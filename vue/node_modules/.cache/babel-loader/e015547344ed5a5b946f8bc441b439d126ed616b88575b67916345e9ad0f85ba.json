{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      isPasswordLogin: true,\n      isForgotPasswordPage: false,\n      loginForm: {\n        email: \"\",\n        password: \"\",\n        code: \"\"\n      },\n      forgotPasswordForm: {\n        email: \"\",\n        code: \"\",\n        newPassword: \"\"\n      }\n    };\n  },\n  methods: {\n    login() {\n      if (this.isPasswordLogin) {\n        // 密码登录\n        this.$http.post(\"/user/loginByPassword\", this.loginForm).then(response => {\n          // 处理登录成功逻辑，可跳转到用户管理页面\n          this.$router.push({\n            name: \"UserManagement\",\n            query: {\n              email: this.loginForm.email\n            }\n          });\n        }).catch(error => {\n          // 处理登录失败逻辑\n          console.log(error);\n        });\n      } else {\n        // 验证码登录\n        this.$http.post(\"/user/loginByEmail\", this.loginForm).then(response => {\n          // 处理登录成功逻辑，可跳转到用户管理页面\n          this.$router.push({\n            name: \"UserManagement\",\n            query: {\n              email: this.loginForm.email\n            }\n          });\n        }).catch(error => {\n          // 处理登录失败逻辑\n          console.log(error);\n        });\n      }\n    },\n    toggleLoginType() {\n      this.isPasswordLogin = !this.isPasswordLogin;\n    },\n    sendCode() {\n      this.$http.post(\"/valid/email\", {\n        email: this.loginForm.email\n      }).then(response => {\n        // 处理发送验证码成功逻辑\n        console.log(\"验证码已发送\");\n      }).catch(error => {\n        // 处理发送验证码失败逻辑\n        console.log(error);\n      });\n    },\n    forgotPassword() {\n      this.isForgotPasswordPage = true;\n    },\n    sendVerifyCode() {\n      this.$http.post(\"/user/verify\", {\n        email: this.forgotPasswordForm.email\n      }).then(response => {\n        // 处理发送验证邮件成功逻辑\n        console.log(\"验证邮件已发送\");\n      }).catch(error => {\n        // 处理发送验证邮件失败逻辑\n        console.log(error);\n      });\n    },\n    resetPassword() {\n      this.$http.put(\"/user/resetPassword\", this.forgotPasswordForm).then(response => {\n        // 处理重置密码成功逻辑\n        this.isForgotPasswordPage = false;\n      }).catch(error => {\n        // 处理重置密码失败逻辑\n        console.log(error);\n      });\n    },\n    backToLogin() {\n      this.isForgotPasswordPage = false;\n    }\n  }\n};","map":{"version":3,"names":["data","isPasswordLogin","isForgotPasswordPage","loginForm","email","password","code","forgotPasswordForm","newPassword","methods","login","$http","post","then","response","$router","push","name","query","catch","error","console","log","toggleLoginType","sendCode","forgotPassword","sendVerifyCode","resetPassword","put","backToLogin"],"sources":["src/views/Login.vue"],"sourcesContent":["<template>\r\n  <div class=\"login-container\">\r\n    <el-form :model=\"loginForm\" ref=\"loginFormRef\" label-width=\"80px\">\r\n      <el-form-item label=\"邮箱\">\r\n        <el-input v-model=\"loginForm.email\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"密码\" v-if=\"isPasswordLogin\">\r\n        <el-input v-model=\"loginForm.password\" type=\"password\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"验证码\" v-if=\"!isPasswordLogin\">\r\n        <el-input v-model=\"loginForm.code\"></el-input>\r\n        <el-button @click=\"sendCode\">发送验证码</el-button>\r\n      </el-form-item>\r\n      <el-form-item>\r\n        <el-button type=\"primary\" @click=\"login\">登录</el-button>\r\n        <el-button @click=\"toggleLoginType\">\r\n          切换到 {{ isPasswordLogin ? \"验证码登录\" : \"密码登录\" }}\r\n        </el-button>\r\n        <el-button @click=\"forgotPassword\">忘记密码</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n    <!-- 忘记密码页面 -->\r\n    <div v-if=\"isForgotPasswordPage\" class=\"forgot-password-container\">\r\n      <el-form\r\n        :model=\"forgotPasswordForm\"\r\n        ref=\"forgotPasswordFormRef\"\r\n        label-width=\"80px\"\r\n      >\r\n        <el-form-item label=\"邮箱\">\r\n          <el-input v-model=\"forgotPasswordForm.email\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"验证码\">\r\n          <el-input v-model=\"forgotPasswordForm.code\"></el-input>\r\n          <el-button @click=\"sendVerifyCode\">发送验证码</el-button>\r\n        </el-form-item>\r\n        <el-form-item label=\"新密码\">\r\n          <el-input\r\n            v-model=\"forgotPasswordForm.newPassword\"\r\n            type=\"password\"\r\n          ></el-input>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"resetPassword\">重置密码</el-button>\r\n          <el-button @click=\"backToLogin\">返回登录</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      isPasswordLogin: true,\r\n      isForgotPasswordPage: false,\r\n      loginForm: {\r\n        email: \"\",\r\n        password: \"\",\r\n        code: \"\",\r\n      },\r\n      forgotPasswordForm: {\r\n        email: \"\",\r\n        code: \"\",\r\n        newPassword: \"\",\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    login() {\r\n      if (this.isPasswordLogin) {\r\n        // 密码登录\r\n        this.$http\r\n          .post(\"/user/loginByPassword\", this.loginForm)\r\n          .then((response) => {\r\n            // 处理登录成功逻辑，可跳转到用户管理页面\r\n            this.$router.push({\r\n              name: \"UserManagement\",\r\n              query: { email: this.loginForm.email },\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            // 处理登录失败逻辑\r\n            console.log(error);\r\n          });\r\n      } else {\r\n        // 验证码登录\r\n        this.$http\r\n          .post(\"/user/loginByEmail\", this.loginForm)\r\n          .then((response) => {\r\n            // 处理登录成功逻辑，可跳转到用户管理页面\r\n            this.$router.push({\r\n              name: \"UserManagement\",\r\n              query: { email: this.loginForm.email },\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            // 处理登录失败逻辑\r\n            console.log(error);\r\n          });\r\n      }\r\n    },\r\n    toggleLoginType() {\r\n      this.isPasswordLogin = !this.isPasswordLogin;\r\n    },\r\n    sendCode() {\r\n      this.$http\r\n        .post(\"/valid/email\", { email: this.loginForm.email })\r\n        .then((response) => {\r\n          // 处理发送验证码成功逻辑\r\n          console.log(\"验证码已发送\");\r\n        })\r\n        .catch((error) => {\r\n          // 处理发送验证码失败逻辑\r\n          console.log(error);\r\n        });\r\n    },\r\n    forgotPassword() {\r\n      this.isForgotPasswordPage = true;\r\n    },\r\n    sendVerifyCode() {\r\n      this.$http\r\n        .post(\"/user/verify\", { email: this.forgotPasswordForm.email })\r\n        .then((response) => {\r\n          // 处理发送验证邮件成功逻辑\r\n          console.log(\"验证邮件已发送\");\r\n        })\r\n        .catch((error) => {\r\n          // 处理发送验证邮件失败逻辑\r\n          console.log(error);\r\n        });\r\n    },\r\n    resetPassword() {\r\n      this.$http\r\n        .put(\"/user/resetPassword\", this.forgotPasswordForm)\r\n        .then((response) => {\r\n          // 处理重置密码成功逻辑\r\n          this.isForgotPasswordPage = false;\r\n        })\r\n        .catch((error) => {\r\n          // 处理重置密码失败逻辑\r\n          console.log(error);\r\n        });\r\n    },\r\n    backToLogin() {\r\n      this.isForgotPasswordPage = false;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.login-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n  background-color: #f4f4f4;\r\n}\r\n\r\n.el-form {\r\n  width: 50%;\r\n  background-color: white;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.el-input {\r\n  /* width: 100%; */\r\n  padding: 8px;\r\n  margin-bottom: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 3px;\r\n}\r\n\r\n.el-button {\r\n  margin: 5px;\r\n  padding: 8px 15px;\r\n  border: none;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n}\r\n\r\n.el-button--primary {\r\n  background-color: #42b983;\r\n  color: white;\r\n}\r\n\r\n.el-button--default {\r\n  background-color: #f4f4f4;\r\n  color: #333;\r\n}\r\n\r\n.forgot-password-container {\r\n  margin-top: 20px;\r\n  background-color: white;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);\r\n  width: 300px;\r\n}\r\n</style>\r\n"],"mappings":";AAmDA;EACAA,KAAA;IACA;MACAC,eAAA;MACAC,oBAAA;MACAC,SAAA;QACAC,KAAA;QACAC,QAAA;QACAC,IAAA;MACA;MACAC,kBAAA;QACAH,KAAA;QACAE,IAAA;QACAE,WAAA;MACA;IACA;EACA;EACAC,OAAA;IACAC,MAAA;MACA,SAAAT,eAAA;QACA;QACA,KAAAU,KAAA,CACAC,IAAA,+BAAAT,SAAA,EACAU,IAAA,CAAAC,QAAA;UACA;UACA,KAAAC,OAAA,CAAAC,IAAA;YACAC,IAAA;YACAC,KAAA;cAAAd,KAAA,OAAAD,SAAA,CAAAC;YAAA;UACA;QACA,GACAe,KAAA,CAAAC,KAAA;UACA;UACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA;QACA;MACA;QACA;QACA,KAAAT,KAAA,CACAC,IAAA,4BAAAT,SAAA,EACAU,IAAA,CAAAC,QAAA;UACA;UACA,KAAAC,OAAA,CAAAC,IAAA;YACAC,IAAA;YACAC,KAAA;cAAAd,KAAA,OAAAD,SAAA,CAAAC;YAAA;UACA;QACA,GACAe,KAAA,CAAAC,KAAA;UACA;UACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA;QACA;MACA;IACA;IACAG,gBAAA;MACA,KAAAtB,eAAA,SAAAA,eAAA;IACA;IACAuB,SAAA;MACA,KAAAb,KAAA,CACAC,IAAA;QAAAR,KAAA,OAAAD,SAAA,CAAAC;MAAA,GACAS,IAAA,CAAAC,QAAA;QACA;QACAO,OAAA,CAAAC,GAAA;MACA,GACAH,KAAA,CAAAC,KAAA;QACA;QACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA;MACA;IACA;IACAK,eAAA;MACA,KAAAvB,oBAAA;IACA;IACAwB,eAAA;MACA,KAAAf,KAAA,CACAC,IAAA;QAAAR,KAAA,OAAAG,kBAAA,CAAAH;MAAA,GACAS,IAAA,CAAAC,QAAA;QACA;QACAO,OAAA,CAAAC,GAAA;MACA,GACAH,KAAA,CAAAC,KAAA;QACA;QACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA;MACA;IACA;IACAO,cAAA;MACA,KAAAhB,KAAA,CACAiB,GAAA,6BAAArB,kBAAA,EACAM,IAAA,CAAAC,QAAA;QACA;QACA,KAAAZ,oBAAA;MACA,GACAiB,KAAA,CAAAC,KAAA;QACA;QACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA;MACA;IACA;IACAS,YAAA;MACA,KAAA3B,oBAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}