{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport request from \"@/utils/request\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      tagList: [],\n      selectedIds: [],\n      dialogVisible: false,\n      dialogType: \"create\",\n      currentTag: {\n        name: \"\",\n        parentId: \"\",\n        color: \"#409EFF\",\n        createdBy: \"\"\n      },\n      rules: {\n        name: [{\n          required: true,\n          message: \"请输入标签名称\",\n          trigger: \"blur\"\n        }],\n        createdBy: [{\n          required: true,\n          message: \"请输入创建人\",\n          trigger: \"blur\"\n        }]\n      }\n    };\n  },\n  computed: {\n    dialogTitle() {\n      return this.dialogType === \"create\" ? \"新建标签\" : \"编辑标签\";\n    }\n  },\n  created() {\n    this.fetchTags();\n  },\n  methods: {\n    async fetchTags() {\n      request.get(`/tag/get?userId=${15}`).then(res => {\n        if (res.code !== 200) {\n          this.$message.error(res.msg);\n          return;\n        }\n        this.tagList = res.data;\n      }).catch(() => {\n        this.$message.error(\"获取标签失败\");\n      });\n    },\n    showCreateDialog() {\n      this.dialogType = \"create\";\n      this.currentTag = {\n        name: \"\",\n        parentId: \"\",\n        color: \"#409EFF\",\n        createdBy: \"\"\n      };\n      this.dialogVisible = true;\n    },\n    handleEdit(row) {\n      this.dialogType = \"edit\";\n      this.currentTag = {\n        ...row\n      };\n      this.dialogVisible = true;\n    },\n    async submitForm() {\n      this.$refs.tagForm.validate(async valid => {\n        if (valid) {\n          if (this.dialogType === \"create\") {\n            request.post(\"/tag/create\", this.currentTag).then(res => {\n              if (res.code !== 200) {\n                this.$message.error(res.msg);\n                return;\n              }\n              this.tagList = res.data;\n              this.dialogVisible = false;\n              this.fetchTags();\n            }).catch(() => {\n              this.$message.error(\"创建标签失败\");\n            });\n          } else {\n            request.put(`/tag/modify?id=${this.currentTag.id}`).then(res => {\n              if (res.code !== 200) {\n                this.$message.error(res.msg);\n                return;\n              }\n              this.tagList = res.data;\n              this.dialogVisible = false;\n              this.fetchTags();\n            }).catch(() => {\n              this.$message.error(\"修改标签失败\");\n            });\n          }\n        }\n      });\n    },\n    async handleDelete(id) {\n      request.put(`/tag/delete?id=${id}`).then(res => {\n        if (res.code !== 200) {\n          this.$message.error(res.msg);\n          return;\n        }\n        this.fetchTags();\n        this.$message.success(\"删除成功\");\n      }).catch(() => {\n        this.$message.error(\"删除失败\");\n      });\n    },\n    async batchDelete() {\n      request.put(\"/tag/deletes\", {\n        ids: this.selectedIds,\n        userId: \"当前用户ID\"\n      }).then(res => {\n        if (res.code !== 200) {\n          this.$message.error(res.msg);\n          return;\n        }\n        this.fetchTags();\n        this.selectedIds = [];\n        this.$message.success(\"批量删除成功\");\n      }).catch(() => {\n        this.$message.error(\"批量删除失败\");\n      });\n      try {\n        await axios.put(\"/tag/deletes\", null, {\n          params: {\n            ids: this.selectedIds,\n            userId: \"当前用户ID\"\n          },\n          headers: {\n            accessToken: localStorage.getItem(\"accessToken\")\n          }\n        });\n        this.$message.success(\"批量删除成功\");\n        this.fetchTags();\n        this.selectedIds = [];\n      } catch (error) {\n        this.$message.error(\"批量删除失败\");\n      }\n    },\n    handleSelectionChange(selection) {\n      this.selectedIds = selection.map(item => item.id);\n    }\n  }\n};","map":{"version":3,"names":["request","axios","data","tagList","selectedIds","dialogVisible","dialogType","currentTag","name","parentId","color","createdBy","rules","required","message","trigger","computed","dialogTitle","created","fetchTags","methods","get","then","res","code","$message","error","msg","catch","showCreateDialog","handleEdit","row","submitForm","$refs","tagForm","validate","valid","post","put","id","handleDelete","success","batchDelete","ids","userId","params","headers","accessToken","localStorage","getItem","handleSelectionChange","selection","map","item"],"sources":["src/views/Tag.vue"],"sourcesContent":["<template>\r\n  <div class=\"tag-management\">\r\n    <!-- 操作工具栏 -->\r\n    <div class=\"operation-bar\">\r\n      <el-button type=\"primary\" @click=\"showCreateDialog\">新建标签</el-button>\r\n      <el-button\r\n        type=\"danger\"\r\n        @click=\"batchDelete\"\r\n        :disabled=\"selectedIds.length === 0\"\r\n        >批量删除</el-button\r\n      >\r\n    </div>\r\n\r\n    <!-- 标签表格 -->\r\n    <el-table\r\n      :data=\"tagList\"\r\n      style=\"width: 100%\"\r\n      @selection-change=\"handleSelectionChange\"\r\n    >\r\n      <el-table-column type=\"selection\" width=\"55\"></el-table-column>\r\n      <el-table-column prop=\"name\" label=\"标签名称\"></el-table-column>\r\n      <el-table-column prop=\"color\" label=\"颜色\">\r\n        <template #default=\"{ row }\">\r\n          <div\r\n            class=\"color-block\"\r\n            :style=\"{ backgroundColor: row.color }\"\r\n          ></div>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column prop=\"createdBy\" label=\"创建人\"></el-table-column>\r\n\r\n      <el-table-column label=\"操作\" width=\"180\">\r\n        <template #default=\"{ row }\">\r\n          <el-button size=\"mini\" @click=\"handleEdit(row)\">编辑</el-button>\r\n          <el-button size=\"mini\" type=\"danger\" @click=\"handleDelete(row.id)\"\r\n            >删除</el-button\r\n          >\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 创建/编辑对话框 -->\r\n    <el-dialog :title=\"dialogTitle\" :visible.sync=\"dialogVisible\">\r\n      <el-form :model=\"currentTag\" :rules=\"rules\" ref=\"tagForm\">\r\n        <el-form-item label=\"标签名称\" prop=\"name\">\r\n          <el-input v-model=\"currentTag.name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"父类ID\" prop=\"parentId\">\r\n          <el-input v-model=\"currentTag.parentId\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"颜色\" prop=\"color\">\r\n          <el-color-picker v-model=\"currentTag.color\"></el-color-picker>\r\n        </el-form-item>\r\n        <el-form-item label=\"创建人\" prop=\"createdBy\">\r\n          <el-input v-model=\"currentTag.createdBy\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\">\r\n        <el-button @click=\"dialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"submitForm\">确认</el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport request from \"@/utils/request\";\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      tagList: [],\r\n      selectedIds: [],\r\n      dialogVisible: false,\r\n      dialogType: \"create\",\r\n      currentTag: {\r\n        name: \"\",\r\n        parentId: \"\",\r\n        color: \"#409EFF\",\r\n        createdBy: \"\",\r\n      },\r\n      rules: {\r\n        name: [{ required: true, message: \"请输入标签名称\", trigger: \"blur\" }],\r\n        createdBy: [\r\n          { required: true, message: \"请输入创建人\", trigger: \"blur\" },\r\n        ],\r\n      },\r\n    };\r\n  },\r\n  computed: {\r\n    dialogTitle() {\r\n      return this.dialogType === \"create\" ? \"新建标签\" : \"编辑标签\";\r\n    },\r\n  },\r\n  created() {\r\n    this.fetchTags();\r\n  },\r\n  methods: {\r\n    async fetchTags() {\r\n      request\r\n        .get(`/tag/get?userId=${15}`)\r\n        .then((res) => {\r\n          if (res.code !== 200) {\r\n            this.$message.error(res.msg);\r\n            return;\r\n          }\r\n          this.tagList = res.data;\r\n        })\r\n        .catch(() => {\r\n          this.$message.error(\"获取标签失败\");\r\n        });\r\n    },\r\n\r\n    showCreateDialog() {\r\n      this.dialogType = \"create\";\r\n      this.currentTag = {\r\n        name: \"\",\r\n        parentId: \"\",\r\n        color: \"#409EFF\",\r\n        createdBy: \"\",\r\n      };\r\n      this.dialogVisible = true;\r\n    },\r\n\r\n    handleEdit(row) {\r\n      this.dialogType = \"edit\";\r\n      this.currentTag = { ...row };\r\n      this.dialogVisible = true;\r\n    },\r\n\r\n    async submitForm() {\r\n      this.$refs.tagForm.validate(async (valid) => {\r\n        if (valid) {\r\n          if (this.dialogType === \"create\") {\r\n            request\r\n              .post(\"/tag/create\", this.currentTag)\r\n              .then((res) => {\r\n                if (res.code !== 200) {\r\n                  this.$message.error(res.msg);\r\n                  return;\r\n                }\r\n                this.tagList = res.data;\r\n                this.dialogVisible = false;\r\n                this.fetchTags();\r\n              })\r\n              .catch(() => {\r\n                this.$message.error(\"创建标签失败\");\r\n              });\r\n          } else {\r\n            request\r\n              .put(`/tag/modify?id=${this.currentTag.id}`)\r\n              .then((res) => {\r\n                if (res.code !== 200) {\r\n                  this.$message.error(res.msg);\r\n                  return;\r\n                }\r\n                this.tagList = res.data;\r\n                this.dialogVisible = false;\r\n                this.fetchTags();\r\n              })\r\n              .catch(() => {\r\n                this.$message.error(\"修改标签失败\");\r\n              });\r\n          }\r\n        }\r\n      });\r\n    },\r\n\r\n    async handleDelete(id) {\r\n      request\r\n        .put(`/tag/delete?id=${id}`)\r\n        .then((res) => {\r\n          if (res.code !== 200) {\r\n            this.$message.error(res.msg);\r\n            return;\r\n          }\r\n          this.fetchTags();\r\n          this.$message.success(\"删除成功\");\r\n        })\r\n        .catch(() => {\r\n          this.$message.error(\"删除失败\");\r\n        });\r\n    },\r\n\r\n    async batchDelete() {\r\n      request\r\n        .put(\"/tag/deletes\", { ids: this.selectedIds, userId: \"当前用户ID\" })\r\n        .then((res) => {\r\n          if (res.code !== 200) {\r\n            this.$message.error(res.msg);\r\n            return;\r\n          }\r\n          this.fetchTags();\r\n          this.selectedIds = [];\r\n          this.$message.success(\"批量删除成功\");\r\n        })\r\n        .catch(() => {\r\n          this.$message.error(\"批量删除失败\");\r\n        });\r\n      try {\r\n        await axios.put(\"/tag/deletes\", null, {\r\n          params: { ids: this.selectedIds, userId: \"当前用户ID\" },\r\n          headers: { accessToken: localStorage.getItem(\"accessToken\") },\r\n        });\r\n        this.$message.success(\"批量删除成功\");\r\n        this.fetchTags();\r\n        this.selectedIds = [];\r\n      } catch (error) {\r\n        this.$message.error(\"批量删除失败\");\r\n      }\r\n    },\r\n\r\n    handleSelectionChange(selection) {\r\n      this.selectedIds = selection.map((item) => item.id);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.color-block {\r\n  width: 24px;\r\n  height: 24px;\r\n  border-radius: 4px;\r\n}\r\n\r\n.operation-bar {\r\n  margin-bottom: 20px;\r\n}\r\n</style>\r\n"],"mappings":";;AAkEA,OAAAA,OAAA;AACA,OAAAC,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,WAAA;MACAC,aAAA;MACAC,UAAA;MACAC,UAAA;QACAC,IAAA;QACAC,QAAA;QACAC,KAAA;QACAC,SAAA;MACA;MACAC,KAAA;QACAJ,IAAA;UAAAK,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;QACAJ,SAAA,GACA;UAAAE,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;IACA;EACA;EACAC,QAAA;IACAC,YAAA;MACA,YAAAX,UAAA;IACA;EACA;EACAY,QAAA;IACA,KAAAC,SAAA;EACA;EACAC,OAAA;IACA,MAAAD,UAAA;MACAnB,OAAA,CACAqB,GAAA,0BACAC,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAC,IAAA;UACA,KAAAC,QAAA,CAAAC,KAAA,CAAAH,GAAA,CAAAI,GAAA;UACA;QACA;QACA,KAAAxB,OAAA,GAAAoB,GAAA,CAAArB,IAAA;MACA,GACA0B,KAAA;QACA,KAAAH,QAAA,CAAAC,KAAA;MACA;IACA;IAEAG,iBAAA;MACA,KAAAvB,UAAA;MACA,KAAAC,UAAA;QACAC,IAAA;QACAC,QAAA;QACAC,KAAA;QACAC,SAAA;MACA;MACA,KAAAN,aAAA;IACA;IAEAyB,WAAAC,GAAA;MACA,KAAAzB,UAAA;MACA,KAAAC,UAAA;QAAA,GAAAwB;MAAA;MACA,KAAA1B,aAAA;IACA;IAEA,MAAA2B,WAAA;MACA,KAAAC,KAAA,CAAAC,OAAA,CAAAC,QAAA,OAAAC,KAAA;QACA,IAAAA,KAAA;UACA,SAAA9B,UAAA;YACAN,OAAA,CACAqC,IAAA,qBAAA9B,UAAA,EACAe,IAAA,CAAAC,GAAA;cACA,IAAAA,GAAA,CAAAC,IAAA;gBACA,KAAAC,QAAA,CAAAC,KAAA,CAAAH,GAAA,CAAAI,GAAA;gBACA;cACA;cACA,KAAAxB,OAAA,GAAAoB,GAAA,CAAArB,IAAA;cACA,KAAAG,aAAA;cACA,KAAAc,SAAA;YACA,GACAS,KAAA;cACA,KAAAH,QAAA,CAAAC,KAAA;YACA;UACA;YACA1B,OAAA,CACAsC,GAAA,wBAAA/B,UAAA,CAAAgC,EAAA,IACAjB,IAAA,CAAAC,GAAA;cACA,IAAAA,GAAA,CAAAC,IAAA;gBACA,KAAAC,QAAA,CAAAC,KAAA,CAAAH,GAAA,CAAAI,GAAA;gBACA;cACA;cACA,KAAAxB,OAAA,GAAAoB,GAAA,CAAArB,IAAA;cACA,KAAAG,aAAA;cACA,KAAAc,SAAA;YACA,GACAS,KAAA;cACA,KAAAH,QAAA,CAAAC,KAAA;YACA;UACA;QACA;MACA;IACA;IAEA,MAAAc,aAAAD,EAAA;MACAvC,OAAA,CACAsC,GAAA,mBAAAC,EAAA,IACAjB,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAC,IAAA;UACA,KAAAC,QAAA,CAAAC,KAAA,CAAAH,GAAA,CAAAI,GAAA;UACA;QACA;QACA,KAAAR,SAAA;QACA,KAAAM,QAAA,CAAAgB,OAAA;MACA,GACAb,KAAA;QACA,KAAAH,QAAA,CAAAC,KAAA;MACA;IACA;IAEA,MAAAgB,YAAA;MACA1C,OAAA,CACAsC,GAAA;QAAAK,GAAA,OAAAvC,WAAA;QAAAwC,MAAA;MAAA,GACAtB,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAC,IAAA;UACA,KAAAC,QAAA,CAAAC,KAAA,CAAAH,GAAA,CAAAI,GAAA;UACA;QACA;QACA,KAAAR,SAAA;QACA,KAAAf,WAAA;QACA,KAAAqB,QAAA,CAAAgB,OAAA;MACA,GACAb,KAAA;QACA,KAAAH,QAAA,CAAAC,KAAA;MACA;MACA;QACA,MAAAzB,KAAA,CAAAqC,GAAA;UACAO,MAAA;YAAAF,GAAA,OAAAvC,WAAA;YAAAwC,MAAA;UAAA;UACAE,OAAA;YAAAC,WAAA,EAAAC,YAAA,CAAAC,OAAA;UAAA;QACA;QACA,KAAAxB,QAAA,CAAAgB,OAAA;QACA,KAAAtB,SAAA;QACA,KAAAf,WAAA;MACA,SAAAsB,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA;MACA;IACA;IAEAwB,sBAAAC,SAAA;MACA,KAAA/C,WAAA,GAAA+C,SAAA,CAAAC,GAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAd,EAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}