{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      tagList: [],\n      selectedIds: [],\n      dialogVisible: false,\n      dialogType: 'create',\n      currentTag: {\n        name: '',\n        parentId: '',\n        color: '#409EFF',\n        createdBy: ''\n      },\n      rules: {\n        name: [{\n          required: true,\n          message: '请输入标签名称',\n          trigger: 'blur'\n        }],\n        createdBy: [{\n          required: true,\n          message: '请输入创建人',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  computed: {\n    dialogTitle() {\n      return this.dialogType === 'create' ? '新建标签' : '编辑标签';\n    }\n  },\n  created() {\n    this.fetchTags();\n  },\n  methods: {\n    async fetchTags() {\n      try {\n        const res = await axios.get('/tag/get', {\n          params: {\n            userId: localStorage.getItem(\"userId\")\n          },\n          headers: {\n            accessToken: localStorage.getItem('accessToken')\n          }\n        });\n        this.tagList = res.data.data;\n      } catch (error) {\n        this.$message.error('获取标签失败');\n      }\n    },\n    showCreateDialog() {\n      this.dialogType = 'create';\n      this.currentTag = {\n        name: '',\n        parentId: '',\n        color: '#409EFF',\n        createdBy: ''\n      };\n      this.dialogVisible = true;\n    },\n    handleEdit(row) {\n      this.dialogType = 'edit';\n      this.currentTag = {\n        ...row\n      };\n      this.dialogVisible = true;\n    },\n    async submitForm() {\n      this.$refs.tagForm.validate(async valid => {\n        if (valid) {\n          try {\n            if (this.dialogType === 'create') {\n              await axios.post('/tag/create', this.currentTag, {\n                headers: {\n                  accessToken: localStorage.getItem('accessToken')\n                }\n              });\n            } else {\n              await axios.put('/tag/modify', this.currentTag, {\n                params: {\n                  id: this.currentTag.id\n                },\n                headers: {\n                  accessToken: localStorage.getItem('accessToken')\n                }\n              });\n            }\n            this.$message.success('操作成功');\n            this.dialogVisible = false;\n            this.fetchTags();\n          } catch (error) {\n            this.$message.error('操作失败');\n          }\n        }\n      });\n    },\n    async handleDelete(id) {\n      try {\n        await axios.put('/tag/delete', null, {\n          params: {\n            id,\n            userId: '当前用户ID'\n          },\n          headers: {\n            accessToken: localStorage.getItem('accessToken')\n          }\n        });\n        this.$message.success('删除成功');\n        this.fetchTags();\n      } catch (error) {\n        this.$message.error('删除失败');\n      }\n    },\n    async batchDelete() {\n      try {\n        await axios.put('/tag/deletes', null, {\n          params: {\n            ids: this.selectedIds,\n            userId: '当前用户ID'\n          },\n          headers: {\n            accessToken: localStorage.getItem('accessToken')\n          }\n        });\n        this.$message.success('批量删除成功');\n        this.fetchTags();\n        this.selectedIds = [];\n      } catch (error) {\n        this.$message.error('批量删除失败');\n      }\n    },\n    handleSelectionChange(selection) {\n      this.selectedIds = selection.map(item => item.id);\n    }\n  }\n};","map":{"version":3,"names":["axios","data","tagList","selectedIds","dialogVisible","dialogType","currentTag","name","parentId","color","createdBy","rules","required","message","trigger","computed","dialogTitle","created","fetchTags","methods","res","get","params","userId","localStorage","getItem","headers","accessToken","error","$message","showCreateDialog","handleEdit","row","submitForm","$refs","tagForm","validate","valid","post","put","id","success","handleDelete","batchDelete","ids","handleSelectionChange","selection","map","item"],"sources":["src/views/Tag.vue"],"sourcesContent":["<template>\r\n  <div class=\"tag-management\">\r\n    <!-- 操作工具栏 -->\r\n    <div class=\"operation-bar\">\r\n      <el-button type=\"primary\" @click=\"showCreateDialog\">新建标签</el-button>\r\n      <el-button type=\"danger\" @click=\"batchDelete\" :disabled=\"selectedIds.length === 0\">批量删除</el-button>\r\n    </div>\r\n\r\n    <!-- 标签表格 -->\r\n    <el-table\r\n        :data=\"tagList\"\r\n        style=\"width: 100%\"\r\n        @selection-change=\"handleSelectionChange\"\r\n    >\r\n      <el-table-column type=\"selection\" width=\"55\"></el-table-column>\r\n      <el-table-column prop=\"name\" label=\"标签名称\"></el-table-column>\r\n      <el-table-column prop=\"color\" label=\"颜色\">\r\n        <template #default=\"{row}\">\r\n          <div class=\"color-block\" :style=\"{backgroundColor: row.color}\"></div>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column prop=\"createdBy\" label=\"创建人\"></el-table-column>\r\n      <el-table-column label=\"操作\" width=\"180\">\r\n        <template #default=\"{row}\">\r\n          <el-button size=\"mini\" @click=\"handleEdit(row)\">编辑</el-button>\r\n          <el-button size=\"mini\" type=\"danger\" @click=\"handleDelete(row.id)\">删除</el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 创建/编辑对话框 -->\r\n    <el-dialog :title=\"dialogTitle\" :visible.sync=\"dialogVisible\">\r\n      <el-form :model=\"currentTag\" :rules=\"rules\" ref=\"tagForm\">\r\n        <el-form-item label=\"标签名称\" prop=\"name\">\r\n          <el-input v-model=\"currentTag.name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"父类ID\" prop=\"parentId\">\r\n          <el-input v-model=\"currentTag.parentId\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"颜色\" prop=\"color\">\r\n          <el-color-picker v-model=\"currentTag.color\"></el-color-picker>\r\n        </el-form-item>\r\n        <el-form-item label=\"创建人\" prop=\"createdBy\">\r\n          <el-input v-model=\"currentTag.createdBy\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\">\r\n        <el-button @click=\"dialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"submitForm\">确认</el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      tagList: [],\r\n      selectedIds: [],\r\n      dialogVisible: false,\r\n      dialogType: 'create',\r\n      currentTag: {\r\n        name: '',\r\n        parentId: '',\r\n        color: '#409EFF',\r\n        createdBy: ''\r\n      },\r\n      rules: {\r\n        name: [{ required: true, message: '请输入标签名称', trigger: 'blur' }],\r\n        createdBy: [{ required: true, message: '请输入创建人', trigger: 'blur' }]\r\n      }\r\n    };\r\n  },\r\n  computed: {\r\n    dialogTitle() {\r\n      return this.dialogType === 'create' ? '新建标签' : '编辑标签';\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchTags();\r\n  },\r\n  methods: {\r\n    async fetchTags() {\r\n      \r\n      try {\r\n        \r\n        const res = await axios.get('/tag/get', {\r\n          params: { userId: localStorage.getItem(\"userId\") },\r\n          headers: { accessToken: localStorage.getItem('accessToken') }\r\n        });\r\n        this.tagList = res.data.data;\r\n      } catch (error) {\r\n        this.$message.error('获取标签失败');\r\n      }\r\n    },\r\n\r\n    showCreateDialog() {\r\n      this.dialogType = 'create';\r\n      this.currentTag = {\r\n        name: '',\r\n        parentId: '',\r\n        color: '#409EFF',\r\n        createdBy: ''\r\n      };\r\n      this.dialogVisible = true;\r\n    },\r\n\r\n    handleEdit(row) {\r\n      this.dialogType = 'edit';\r\n      this.currentTag = { ...row };\r\n      this.dialogVisible = true;\r\n    },\r\n\r\n    async submitForm() {\r\n      this.$refs.tagForm.validate(async valid => {\r\n        if (valid) {\r\n          try {\r\n            if (this.dialogType === 'create') {\r\n              await axios.post('/tag/create', this.currentTag, {\r\n                headers: { accessToken: localStorage.getItem('accessToken') }\r\n              });\r\n            } else {\r\n              await axios.put('/tag/modify', this.currentTag, {\r\n                params: { id: this.currentTag.id },\r\n                headers: { accessToken: localStorage.getItem('accessToken') }\r\n              });\r\n            }\r\n            this.$message.success('操作成功');\r\n            this.dialogVisible = false;\r\n            this.fetchTags();\r\n          } catch (error) {\r\n            this.$message.error('操作失败');\r\n          }\r\n        }\r\n      });\r\n    },\r\n\r\n    async handleDelete(id) {\r\n      try {\r\n        await axios.put('/tag/delete', null, {\r\n          params: { id, userId: '当前用户ID' },\r\n          headers: { accessToken: localStorage.getItem('accessToken') }\r\n        });\r\n        this.$message.success('删除成功');\r\n        this.fetchTags();\r\n      } catch (error) {\r\n        this.$message.error('删除失败');\r\n      }\r\n    },\r\n\r\n    async batchDelete() {\r\n      try {\r\n        await axios.put('/tag/deletes', null, {\r\n          params: { ids: this.selectedIds, userId: '当前用户ID' },\r\n          headers: { accessToken: localStorage.getItem('accessToken') }\r\n        });\r\n        this.$message.success('批量删除成功');\r\n        this.fetchTags();\r\n        this.selectedIds = [];\r\n      } catch (error) {\r\n        this.$message.error('批量删除失败');\r\n      }\r\n    },\r\n\r\n    handleSelectionChange(selection) {\r\n      this.selectedIds = selection.map(item => item.id);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.color-block {\r\n  width: 24px;\r\n  height: 24px;\r\n  border-radius: 4px;\r\n}\r\n\r\n.operation-bar {\r\n  margin-bottom: 20px;\r\n}\r\n</style>"],"mappings":";;AAuDA,OAAAA,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,WAAA;MACAC,aAAA;MACAC,UAAA;MACAC,UAAA;QACAC,IAAA;QACAC,QAAA;QACAC,KAAA;QACAC,SAAA;MACA;MACAC,KAAA;QACAJ,IAAA;UAAAK,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;QACAJ,SAAA;UAAAE,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MACA;IACA;EACA;EACAC,QAAA;IACAC,YAAA;MACA,YAAAX,UAAA;IACA;EACA;EACAY,QAAA;IACA,KAAAC,SAAA;EACA;EACAC,OAAA;IACA,MAAAD,UAAA;MAEA;QAEA,MAAAE,GAAA,SAAApB,KAAA,CAAAqB,GAAA;UACAC,MAAA;YAAAC,MAAA,EAAAC,YAAA,CAAAC,OAAA;UAAA;UACAC,OAAA;YAAAC,WAAA,EAAAH,YAAA,CAAAC,OAAA;UAAA;QACA;QACA,KAAAvB,OAAA,GAAAkB,GAAA,CAAAnB,IAAA,CAAAA,IAAA;MACA,SAAA2B,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA;IACA;IAEAE,iBAAA;MACA,KAAAzB,UAAA;MACA,KAAAC,UAAA;QACAC,IAAA;QACAC,QAAA;QACAC,KAAA;QACAC,SAAA;MACA;MACA,KAAAN,aAAA;IACA;IAEA2B,WAAAC,GAAA;MACA,KAAA3B,UAAA;MACA,KAAAC,UAAA;QAAA,GAAA0B;MAAA;MACA,KAAA5B,aAAA;IACA;IAEA,MAAA6B,WAAA;MACA,KAAAC,KAAA,CAAAC,OAAA,CAAAC,QAAA,OAAAC,KAAA;QACA,IAAAA,KAAA;UACA;YACA,SAAAhC,UAAA;cACA,MAAAL,KAAA,CAAAsC,IAAA,qBAAAhC,UAAA;gBACAoB,OAAA;kBAAAC,WAAA,EAAAH,YAAA,CAAAC,OAAA;gBAAA;cACA;YACA;cACA,MAAAzB,KAAA,CAAAuC,GAAA,qBAAAjC,UAAA;gBACAgB,MAAA;kBAAAkB,EAAA,OAAAlC,UAAA,CAAAkC;gBAAA;gBACAd,OAAA;kBAAAC,WAAA,EAAAH,YAAA,CAAAC,OAAA;gBAAA;cACA;YACA;YACA,KAAAI,QAAA,CAAAY,OAAA;YACA,KAAArC,aAAA;YACA,KAAAc,SAAA;UACA,SAAAU,KAAA;YACA,KAAAC,QAAA,CAAAD,KAAA;UACA;QACA;MACA;IACA;IAEA,MAAAc,aAAAF,EAAA;MACA;QACA,MAAAxC,KAAA,CAAAuC,GAAA;UACAjB,MAAA;YAAAkB,EAAA;YAAAjB,MAAA;UAAA;UACAG,OAAA;YAAAC,WAAA,EAAAH,YAAA,CAAAC,OAAA;UAAA;QACA;QACA,KAAAI,QAAA,CAAAY,OAAA;QACA,KAAAvB,SAAA;MACA,SAAAU,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA;IACA;IAEA,MAAAe,YAAA;MACA;QACA,MAAA3C,KAAA,CAAAuC,GAAA;UACAjB,MAAA;YAAAsB,GAAA,OAAAzC,WAAA;YAAAoB,MAAA;UAAA;UACAG,OAAA;YAAAC,WAAA,EAAAH,YAAA,CAAAC,OAAA;UAAA;QACA;QACA,KAAAI,QAAA,CAAAY,OAAA;QACA,KAAAvB,SAAA;QACA,KAAAf,WAAA;MACA,SAAAyB,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA;IACA;IAEAiB,sBAAAC,SAAA;MACA,KAAA3C,WAAA,GAAA2C,SAAA,CAAAC,GAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAR,EAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}