{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport axios from \"axios\";\nimport router from \"@/router\"; // 引入路由实例\n\nconst request = axios.create({\n  baseURL: \"http://8.138.124.114:9766/sparrow/api\",\n  timeout: 60000\n});\n\n// 请求拦截器\nrequest.interceptors.request.use(config => {\n  if (!config.headers[\"Content-Type\"] && !(config.data instanceof FormData)) {\n    config.headers[\"Content-Type\"] = \"application/json;charset=utf-8\";\n  }\n  const accessToken = localStorage.getItem(\"accessToken\");\n  const accessToken2 = localStorage.getItem(\"templeAccessToken\");\n\n  // 不需要token的接口\n  if (config.url.includes(\"/users/loginByPassword\") || config.url.includes(\"/users/loginByEmail\") || config.url.includes(\"/users/email\") || config.url.includes(\"/users/verify\")) {\n    return config;\n  }\n\n  // 忘记密码需要临时token\n  if (config.url.includes(\"/users/resetPassword\") && accessToken2) {\n    config.headers[\"accessToken\"] = `${accessToken2}`;\n    return config;\n  }\n  if (accessToken) {\n    config.headers[\"accessToken\"] = `${accessToken}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nlet isRefreshing = false;\nlet requests = [];\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n  if (typeof res === \"string\") {\n    res = res ? JSON.parse(res) : res;\n  }\n  return res;\n}, async error => {\n  const {\n    config,\n    response\n  } = error;\n\n  // 处理401 token过期\n  if (response && response.data && response.data.code === 401) {\n    if (!isRefreshing) {\n      isRefreshing = true;\n      try {\n        const refreshToken = localStorage.getItem(\"refreshToken\");\n        if (refreshToken) {\n          const refreshResponse = await axios.post(`${request.defaults.baseURL}/user/refresh`, {\n            refreshToken\n          });\n          const {\n            accessToken,\n            refreshToken: newRefreshToken\n          } = refreshResponse.data;\n          localStorage.setItem(\"accessToken\", accessToken);\n          if (newRefreshToken) {\n            localStorage.setItem(\"refreshToken\", newRefreshToken);\n          }\n\n          // 重试所有挂起的请求\n          requests.forEach(cb => cb(accessToken));\n          requests = [];\n          return request(config);\n        }\n      } catch (refreshError) {\n        // 刷新token失败，跳转登录\n        handleLogout();\n        return Promise.reject(refreshError);\n      } finally {\n        isRefreshing = false;\n      }\n    } else {\n      // 将请求加入队列等待token刷新\n      return new Promise(resolve => {\n        requests.push(accessToken => {\n          config.headers[\"accessToken\"] = `${accessToken}`;\n          resolve(request(config));\n        });\n      });\n    }\n  }\n\n  // 处理40005 用户未登录\n  if (response && response.data && response.data.code === 40005) {\n    handleLogout();\n    return Promise.reject(error);\n  }\n  console.log(\"请求错误:\", error);\n  return Promise.reject(error);\n});\n\n// 处理退出登录逻辑\nfunction handleLogout() {\n  localStorage.removeItem(\"accessToken\");\n  localStorage.removeItem(\"refreshToken\");\n  localStorage.removeItem(\"templeAccessToken\");\n\n  // 跳转到登录页，并携带当前路由信息\n  router.replace({\n    path: \"/login\",\n    query: {\n      redirect: router.currentRoute.fullPath\n    }\n  });\n}\nexport default request;","map":{"version":3,"names":["axios","router","request","create","baseURL","timeout","interceptors","use","config","headers","data","FormData","accessToken","localStorage","getItem","accessToken2","url","includes","error","Promise","reject","isRefreshing","requests","response","res","JSON","parse","code","refreshToken","refreshResponse","post","defaults","newRefreshToken","setItem","forEach","cb","refreshError","handleLogout","resolve","push","console","log","removeItem","replace","path","query","redirect","currentRoute","fullPath"],"sources":["C:/Users/NNNaR/Desktop/短链/ShortLink-FrontEnd/vue/src/utils/request.js"],"sourcesContent":["import axios from \"axios\";\r\nimport router from \"@/router\"; // 引入路由实例\r\n\r\nconst request = axios.create({\r\n  baseURL: \"http://8.138.124.114:9766/sparrow/api\",\r\n  timeout: 60000,\r\n});\r\n\r\n// 请求拦截器\r\nrequest.interceptors.request.use(\r\n  (config) => {\r\n    if (!config.headers[\"Content-Type\"] && !(config.data instanceof FormData)) {\r\n      config.headers[\"Content-Type\"] = \"application/json;charset=utf-8\";\r\n    }\r\n\r\n    const accessToken = localStorage.getItem(\"accessToken\");\r\n    const accessToken2 = localStorage.getItem(\"templeAccessToken\");\r\n\r\n    // 不需要token的接口\r\n    if (\r\n      config.url.includes(\"/users/loginByPassword\") ||\r\n      config.url.includes(\"/users/loginByEmail\") ||\r\n      config.url.includes(\"/users/email\") ||\r\n      config.url.includes(\"/users/verify\")\r\n    ) {\r\n      return config;\r\n    }\r\n\r\n    // 忘记密码需要临时token\r\n    if (config.url.includes(\"/users/resetPassword\") && accessToken2) {\r\n      config.headers[\"accessToken\"] = `${accessToken2}`;\r\n      return config;\r\n    }\r\n\r\n    if (accessToken) {\r\n      config.headers[\"accessToken\"] = `${accessToken}`;\r\n    }\r\n\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器\r\nlet isRefreshing = false;\r\nlet requests = [];\r\n\r\nrequest.interceptors.response.use(\r\n  (response) => {\r\n    let res = response.data;\r\n    if (typeof res === \"string\") {\r\n      res = res ? JSON.parse(res) : res;\r\n    }\r\n    return res;\r\n  },\r\n  async (error) => {\r\n    const { config, response } = error;\r\n\r\n    // 处理401 token过期\r\n    if (response && response.data && response.data.code === 401) {\r\n      if (!isRefreshing) {\r\n        isRefreshing = true;\r\n        try {\r\n          const refreshToken = localStorage.getItem(\"refreshToken\");\r\n          if (refreshToken) {\r\n            const refreshResponse = await axios.post(\r\n              `${request.defaults.baseURL}/user/refresh`,\r\n              { refreshToken }\r\n            );\r\n\r\n            const { accessToken, refreshToken: newRefreshToken } =\r\n              refreshResponse.data;\r\n            localStorage.setItem(\"accessToken\", accessToken);\r\n            if (newRefreshToken) {\r\n              localStorage.setItem(\"refreshToken\", newRefreshToken);\r\n            }\r\n\r\n            // 重试所有挂起的请求\r\n            requests.forEach((cb) => cb(accessToken));\r\n            requests = [];\r\n            return request(config);\r\n          }\r\n        } catch (refreshError) {\r\n          // 刷新token失败，跳转登录\r\n          handleLogout();\r\n          return Promise.reject(refreshError);\r\n        } finally {\r\n          isRefreshing = false;\r\n        }\r\n      } else {\r\n        // 将请求加入队列等待token刷新\r\n        return new Promise((resolve) => {\r\n          requests.push((accessToken) => {\r\n            config.headers[\"accessToken\"] = `${accessToken}`;\r\n            resolve(request(config));\r\n          });\r\n        });\r\n      }\r\n    }\r\n\r\n    // 处理40005 用户未登录\r\n    if (response && response.data && response.data.code === 40005) {\r\n      handleLogout();\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    console.log(\"请求错误:\", error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 处理退出登录逻辑\r\nfunction handleLogout() {\r\n  localStorage.removeItem(\"accessToken\");\r\n  localStorage.removeItem(\"refreshToken\");\r\n  localStorage.removeItem(\"templeAccessToken\");\r\n\r\n  // 跳转到登录页，并携带当前路由信息\r\n  router.replace({\r\n    path: \"/login\",\r\n    query: {\r\n      redirect: router.currentRoute.fullPath,\r\n    },\r\n  });\r\n}\r\n\r\nexport default request;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}