{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport request from \"@/utils/request\";\nimport md5 from \"js-md5\";\nconst API_MAP = {\n  expireTime: \"/control/shortLink/deadTime\",\n  allowNum: \"/control/shortLink/visitNum\",\n  privateTarget: \"/control/shortLink/private\",\n  password: \"/control/shortLink/changePwd\"\n};\nexport default {\n  name: \"ShortLinkList\",\n  data() {\n    return {\n      pwdRules: {\n        oldPassword: [{\n          required: true,\n          message: \"必须输入旧密码\",\n          trigger: \"blur\"\n        }],\n        newPassword: [{\n          required: true,\n          message: \"必须输入新密码\",\n          trigger: \"blur\"\n        }, {\n          min: 6,\n          max: 20,\n          message: \"密码长度6-20位\",\n          trigger: \"blur\"\n        }]\n      },\n      activeDetail: null,\n      detailRules: {\n        allowNum: [{\n          type: \"number\",\n          min: 0,\n          message: \"不能小于0\"\n        }],\n        expireTime: [{\n          validator: this.validateExpireTime\n        }],\n        password: [{\n          validator: (rule, value, callback) => {\n            // 仅在启用私密时校验\n            if (this.activeDetail.privateTarget && !value) {\n              callback(new Error(\"启用私密必须设置密码\"));\n            } else {\n              callback();\n            }\n          },\n          trigger: \"blur\"\n        }]\n      },\n      changePwdDialogVisible: false,\n      pwdForm: {\n        id: \"\",\n        oldPassword: \"\",\n        newPassword: \"\"\n      },\n      loading: false,\n      tableData: [],\n      total: 0,\n      tagOptions: [],\n      password: \"\",\n      currentLink: null,\n      passwordDialogVisible: false,\n      queryParams: {\n        pageNum: 1,\n        pageSize: 10,\n        keyword: \"\",\n        tags: [],\n        status: null\n      },\n      statusOptions: [{\n        value: 0,\n        label: \"草稿\"\n      }, {\n        value: 1,\n        label: \"发布\"\n      }, {\n        value: 2,\n        label: \"禁用\"\n      }],\n      statusMap: {\n        0: {\n          label: \"草稿\",\n          type: \"info\"\n        },\n        1: {\n          label: \"正常\",\n          type: \"success\"\n        },\n        2: {\n          label: \"禁用\",\n          type: \"danger\"\n        }\n      }\n    };\n  },\n  mounted() {\n    this.fetchData();\n    this.fetchTags();\n  },\n  methods: {\n    // async fetchData() {\n    //   this.loading = true;\n    //   // 确保参数格式正确（多选标签转为逗号分隔）\n    //   console.log(this.queryParams.pageNum, this.queryParams.pageSize);\n    //   let params = {\n    //     pageNum: this.queryParams.pageNum,\n    //     pageSize: this.queryParams.pageSize,\n    //   };\n    //   if (this.queryParams.keyword) params.keyword = this.queryParams.keyword;\n    //   if (this.queryParams.status) params.status = this.queryParams.status;\n    //   // params = {\n    //   //   tags: this.queryParams.tags,\n    //   // };\n    //   request\n    //     .get(\"/shortLink/list\", { ...params })\n    //     .then((res) => {\n    //       if (res.code === 200) {\n    //         console.log(\"请求参数:\", { ...params });\n    //         console.log(\"接口返回res:\", res);\n    //         this.tableData = res.data.list;\n    //         this.total = res.data.total || 0;\n    //       }\n    //     })\n    //     .catch((error) => {\n    //       this.$message.error(\"加载失败\");\n    //     })\n    //     .finally(() => {\n    //       this.loading = false;\n    //     });\n    // },\n    async fetchData() {\n      try {\n        this.loading = true;\n\n        // 构造请求参数\n        const params = {\n          pageNum: this.queryParams.pageNum,\n          pageSize: this.queryParams.pageSize,\n          keyword: this.queryParams.keyword || undefined,\n          // 空值不传\n          status: this.queryParams.status || undefined,\n          // 空值不传\n          tags: this.queryParams.tags?.length ? this.queryParams.tags.join(\",\") : undefined\n        };\n\n        // 移除值为undefined的参数\n        const filteredParams = Object.fromEntries(Object.entries(params).filter(([_, value]) => value !== undefined));\n        console.log(\"请求参数:\", filteredParams);\n        const res = await request.get(\"/shortLink/list\", {\n          params: filteredParams // 正确传递GET参数\n        });\n        if (res.code === 200) {\n          console.log(\"接口返回数据:\", res);\n          this.tableData = res.data.list || [];\n          this.total = res.data.total || 0;\n        } else {\n          // 处理业务逻辑错误\n          this.$message.error(res.msg || \"获取数据失败\");\n        }\n      } catch (error) {\n        // 拦截器已经处理了401/40005等错误，这里处理其他错误\n        console.error(\"请求异常:\", error);\n        if (!error.response) {\n          this.$message.error(\"网络错误，请检查连接\");\n        }\n        // 其他错误消息已在拦截器中显示\n      } finally {\n        this.loading = false;\n      }\n    },\n    async fetchTags() {\n      try {\n        const res = await request.get(\"/tag/get\", {\n          headers: {\n            accessToken: localStorage.getItem(\"accessToken\")\n          }\n        });\n        // 处理可能的空值\n        if (res && res.data) {\n          this.tagOptions = res.data.data || [];\n        } else {\n          this.tagOptions = [];\n          console.error(\"标签接口返回数据异常:\", res);\n        }\n      } catch (error) {\n        console.error(\"获取标签失败:\", error);\n        this.tagOptions = [];\n      }\n    },\n    async handleDelete(id) {\n      try {\n        await request.delete(`/delete/shortLink/${id}`, {\n          headers: {\n            accessToken: localStorage.getItem(\"accessToken\")\n          }\n        });\n        this.$message.success(\"删除成功\");\n\n        // 删除后检查当前页是否为空\n        if (this.tableData.length === 1 && this.queryParams.pageNum > 1) {\n          this.queryParams.pageNum -= 1;\n        }\n        await this.fetchData();\n      } catch (error) {\n        this.$message.error(\"删除失败\");\n      }\n    },\n    handleLinkClick(row) {\n      if (row.hasPassword) {\n        this.currentLink = row;\n        this.passwordDialogVisible = true;\n      } else {\n        this.accessLink(row.fullShortUrl);\n      }\n    },\n    async verifyPassword() {\n      try {\n        const res = await request.post(\"/shortLink/verifyPassword\", {\n          shortLink: this.currentLink.shortUrl,\n          password: this.password\n        });\n        if (res.code === 200) {\n          this.accessLink(this.currentLink.fullShortUrl);\n          this.passwordDialogVisible = false;\n        } else {\n          this.$message.error(\"密码错误\");\n        }\n      } catch (error) {\n        this.$message.error(\"验证失败\");\n      }\n    },\n    accessLink(url) {\n      window.open(url, \"_blank\");\n      // 记录访问统计\n      request.get(`/sparrow/${this.currentLink.shortUrl}`, {\n        headers: {\n          accessToken: localStorage.getItem(\"accessToken\")\n        }\n      });\n    },\n    // 显示详情\n    handleShowDetail(row) {\n      this.activeDetail = {\n        ...row\n      }; // 克隆行数据\n    },\n    // 保存修改\n    async saveDetail() {\n      try {\n        await this.$refs.detailForm.validate();\n        const originalData = this.tableData.find(item => item.id === this.activeDetail.id);\n        const changedFields = this.getChangedFields(originalData);\n\n        // 批量调用接口\n        const requests = changedFields.map(field => this.callSpecificApi(field));\n        await Promise.all(requests);\n        this.$message.success(\"保存成功\");\n        await this.fetchData();\n      } catch (error) {\n        this.$message.error(`保存失败: ${error.message}`);\n      }\n    },\n    // getChangedFields(original) {\n    //   let fields = Object.keys(API_MAP).filter(key =>\n    //       JSON.stringify(this.activeDetail[key]) !== JSON.stringify(original[key])\n    //   );\n    //\n    //   // 排除密码单独修改的情况\n    //   if (fields.includes('password')) {\n    //     fields = fields.filter(f => f !== 'privateTarget');\n    //   }\n    //   return fields;\n    // },\n    getChangedFields(original) {\n      // 只检测以下字段变化\n      const compareFields = [\"expireTime\", \"allowNum\", \"privateTarget\"];\n      return compareFields.filter(key => this.activeDetail[key] !== original[key]);\n    },\n    async callSpecificApi(field) {\n      const apiPath = API_MAP[field];\n      const params = this.buildParamsByField(field);\n      const res = await request.put(apiPath, params);\n      if (res.code !== 200) throw new Error(res.msg || \"接口异常\");\n    },\n    // 在 methods 中添加以下方法\n    buildParamsByField(field) {\n      const baseParams = {\n        id: this.activeDetail.id\n      };\n      switch (field) {\n        // 过期时间\n        case \"expireTime\":\n          return {\n            ...baseParams,\n            expireTime: this.activeDetail.expireTime\n          };\n\n        // 访问次数\n        case \"allowNum\":\n          return {\n            ...baseParams,\n            allowNum: this.activeDetail.allowNum\n          };\n\n        // 私密状态（需校验密码）\n        case \"privateTarget\":\n          if (this.activeDetail.privateTarget) {\n            if (!this.activeDetail.password) {\n              throw new Error(\"启用私密必须设置密码\");\n            }\n            if (this.activeDetail.password.length < 4 || this.activeDetail.password.length > 12) {\n              // ✅ 添加长度校验\n              throw new Error(\"请输入4-12位密码\");\n            }\n          }\n          return {\n            ...baseParams,\n            privateTarget: this.activeDetail.privateTarget,\n            password: md5(this.activeDetail.password) // 新密码直接加密\n          };\n\n        // 密码修改（参数名转换 newPassword）\n        // case 'password':\n        //   if (this.activeDetail.password.length < 6) {\n        //     throw new Error('密码至少6位');\n        //   }\n        //   return {\n        //     ...baseParams,\n        //     oldPassword: md5(this.oldPassword),      // 新增旧密码字段\n        //     newPassword: md5(this.activeDetail.password)\n        //   };\n\n        default:\n          throw new Error(\"未知字段类型\");\n      }\n    },\n    openChangePasswordDialog(row) {\n      if (!row.hasPassword) {\n        this.$message.error(\"该短链未设置密码\");\n        return;\n      }\n      this.pwdForm.id = row.id;\n      this.changePwdDialogVisible = true;\n    },\n    async handleChangePassword() {\n      try {\n        console.log(this.pwdForm.oldPassword);\n        console.log(this.pwdForm.newPassword);\n        const res = await request.put(\"/control/shortLink/changePwd\", {\n          id: this.pwdForm.id,\n          password: md5(this.pwdForm.oldPassword),\n          newPassword: md5(this.pwdForm.newPassword)\n        });\n        if (res.code === 200) {\n          this.$message.success(\"密码修改成功\");\n          this.changePwdDialogVisible = false;\n          await this.fetchData();\n        } else {\n          this.$message.error(res.msg);\n        }\n      } catch (error) {\n        this.$message.error(\"修改失败: \" + error.response?.data?.msg);\n      }\n    },\n    // 重置修改\n    resetDetail() {\n      this.activeDetail = {\n        ...this.tableData.find(item => item.id === this.activeDetail.id)\n      };\n    },\n    handleSizeChange(val) {\n      this.queryParams.pageSize = val;\n      this.queryParams.pageNum = 1;\n      this.fetchData();\n    },\n    handleCurrentChange(val) {\n      this.queryParams.pageNum = val;\n      this.fetchData();\n    },\n    resetQuery() {\n      this.queryParams = {\n        pageNum: 1,\n        pageSize: 10,\n        keyword: \"\",\n        tags: [],\n        status: null\n      };\n      this.fetchData();\n    }\n  }\n};","map":{"version":3,"names":["request","md5","API_MAP","expireTime","allowNum","privateTarget","password","name","data","pwdRules","oldPassword","required","message","trigger","newPassword","min","max","activeDetail","detailRules","type","validator","validateExpireTime","rule","value","callback","Error","changePwdDialogVisible","pwdForm","id","loading","tableData","total","tagOptions","currentLink","passwordDialogVisible","queryParams","pageNum","pageSize","keyword","tags","status","statusOptions","label","statusMap","mounted","fetchData","fetchTags","methods","params","undefined","length","join","filteredParams","Object","fromEntries","entries","filter","_","console","log","res","get","code","list","$message","error","msg","response","headers","accessToken","localStorage","getItem","handleDelete","delete","success","handleLinkClick","row","hasPassword","accessLink","fullShortUrl","verifyPassword","post","shortLink","shortUrl","url","window","open","handleShowDetail","saveDetail","$refs","detailForm","validate","originalData","find","item","changedFields","getChangedFields","requests","map","field","callSpecificApi","Promise","all","original","compareFields","key","apiPath","buildParamsByField","put","baseParams","openChangePasswordDialog","handleChangePassword","resetDetail","handleSizeChange","val","handleCurrentChange","resetQuery"],"sources":["src/views/ShortLinkList.vue"],"sourcesContent":["<template>\r\n  <div class=\"list-container\">\r\n    <!-- 搜索和过滤区 -->\r\n    <div class=\"filter-bar\">\r\n      <el-input\r\n        v-model=\"queryParams.keyword\"\r\n        placeholder=\"输入标题/长链/短链\"\r\n        clearable\r\n        class=\"search-input\"\r\n        @keyup.enter=\"fetchData\"\r\n      >\r\n        <template #prefix>\r\n          <i class=\"el-icon-search\"></i>\r\n        </template>\r\n      </el-input>\r\n\r\n      <el-select\r\n        v-model=\"queryParams.tags\"\r\n        multiple\r\n        filterable\r\n        placeholder=\"选择标签\"\r\n        style=\"width: 240px\"\r\n      >\r\n        <el-option\r\n          v-for=\"tag in tagOptions\"\r\n          :key=\"tag.id\"\r\n          :label=\"tag.name\"\r\n          :value=\"tag.id\"\r\n        />\r\n      </el-select>\r\n\r\n      <el-select\r\n        v-model=\"queryParams.status\"\r\n        placeholder=\"选择状态\"\r\n        clearable\r\n        style=\"width: 120px\"\r\n      >\r\n        <el-option\r\n          v-for=\"item in statusOptions\"\r\n          :key=\"item.value\"\r\n          :label=\"item.label\"\r\n          :value=\"item.value\"\r\n        />\r\n      </el-select>\r\n\r\n      <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"fetchData\"\r\n        >查询</el-button\r\n      >\r\n\r\n      <el-button icon=\"el-icon-refresh\" @click=\"resetQuery\">重置</el-button>\r\n    </div>\r\n\r\n    <!-- 数据表格 -->\r\n    <el-table\r\n      :data=\"tableData\"\r\n      stripe\r\n      border\r\n      v-loading=\"loading\"\r\n      element-loading-text=\"加载中...\"\r\n      class=\"data-table\"\r\n    >\r\n      <el-table-column prop=\"title\" label=\"标题\" min-width=\"150\" />\r\n\r\n      <el-table-column prop=\"fullShortUrl\" label=\"短链\" width=\"220\">\r\n        <template #default=\"{ row }\">\r\n          <el-tooltip\r\n            effect=\"dark\"\r\n            :content=\"`点击次数: ${row.visits} | 独立IP: ${row.ipNum}`\"\r\n            placement=\"top\"\r\n          >\r\n            <el-link\r\n              type=\"primary\"\r\n              :underline=\"false\"\r\n              @click=\"handleLinkClick(row)\"\r\n              >{{ row.fullShortUrl }}</el-link\r\n            >\r\n          </el-tooltip>\r\n          <el-tag\r\n            v-if=\"row.hasPassword\"\r\n            size=\"mini\"\r\n            type=\"danger\"\r\n            effect=\"dark\"\r\n            class=\"link-tag\"\r\n            >加密</el-tag\r\n          >\r\n          <el-tag\r\n            v-if=\"row.privateTarget\"\r\n            size=\"mini\"\r\n            type=\"warning\"\r\n            effect=\"dark\"\r\n            class=\"link-tag\"\r\n            >私有</el-tag\r\n          >\r\n        </template>\r\n      </el-table-column>\r\n\r\n      <el-table-column label=\"标签\" width=\"180\">\r\n        <template #default=\"{ row }\">\r\n          <el-tag\r\n            v-for=\"tag in row.tags\"\r\n            :key=\"tag\"\r\n            size=\"mini\"\r\n            class=\"tag-item\"\r\n            >{{ tag }}</el-tag\r\n          >\r\n        </template>\r\n      </el-table-column>\r\n\r\n      <el-table-column\r\n        prop=\"longUrl\"\r\n        label=\"原始链接\"\r\n        min-width=\"280\"\r\n        show-overflow-tooltip\r\n      />\r\n\r\n      <el-table-column label=\"状态\" width=\"100\">\r\n        <template #default=\"{ row }\">\r\n          <el-tag :type=\"statusMap[row.status].type\" size=\"small\">{{\r\n            statusMap[row.status].label\r\n          }}</el-tag>\r\n        </template>\r\n      </el-table-column>\r\n\r\n      <el-table-column label=\"操作\" width=\"280\" fixed=\"right\">\r\n        <template #default=\"{ row }\">\r\n          <el-button type=\"primary\" size=\"mini\" @click=\"handleShowDetail(row)\"\r\n            >详情</el-button\r\n          >\r\n\r\n          <el-button\r\n            type=\"primary\"\r\n            size=\"mini\"\r\n            :disabled=\"!row.hasPassword\"\r\n            @click=\"openChangePasswordDialog(row)\"\r\n            >修改密码</el-button\r\n          >\r\n\r\n          <el-popconfirm\r\n            title=\"确认删除该短链吗？\"\r\n            @confirm=\"handleDelete(row.id)\"\r\n          >\r\n            <template #reference>\r\n              <el-button type=\"danger\" size=\"mini\" style=\"margin-left: 10px\"\r\n                >删除</el-button\r\n              >\r\n            </template>\r\n          </el-popconfirm>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 遮罩层 -->\r\n    <div\r\n      class=\"modal-mask\"\r\n      v-if=\"activeDetail\"\r\n      @click.self=\"activeDetail = null\"\r\n    ></div>\r\n\r\n    <!-- 短链详情卡片 -->\r\n    <transition name=\"el-zoom-in-top\">\r\n      <el-card v-if=\"activeDetail\" class=\"detail-card\" style=\"margin-top: 20px\">\r\n        <div class=\"detail-header\">\r\n          <h3>短链详情（title: {{ activeDetail.title }}）</h3>\r\n          <el-button\r\n            icon=\"el-icon-close\"\r\n            circle\r\n            @click=\"activeDetail = null\"\r\n            class=\"close-btn\"\r\n          />\r\n        </div>\r\n\r\n        <!-- 集成LinkDetail的核心表单 -->\r\n        <el-form\r\n          :model=\"activeDetail\"\r\n          :rules=\"detailRules\"\r\n          ref=\"detailForm\"\r\n          label-width=\"120px\"\r\n        >\r\n          <el-form-item label=\"允许访问次数\" prop=\"allowNum\">\r\n            <el-input-number\r\n              v-model=\"activeDetail.allowNum\"\r\n              :min=\"0\"\r\n              controls-position=\"right\"\r\n            />\r\n          </el-form-item>\r\n\r\n          <el-form-item label=\"过期时间\">\r\n            <el-date-picker\r\n              v-model=\"activeDetail.expireTime\"\r\n              type=\"datetime\"\r\n              value-format=\"timestamp\"\r\n            />\r\n          </el-form-item>\r\n\r\n          <el-form-item label=\"私密链接\">\r\n            <el-switch v-model=\"activeDetail.privateTarget\" />\r\n          </el-form-item>\r\n\r\n          <el-form-item v-if=\"activeDetail.privateTarget\" label=\"访问密码\">\r\n            <el-input\r\n              v-model=\"activeDetail.password\"\r\n              type=\"password\"\r\n              show-password\r\n              placeholder=\"设置新密码\"\r\n            />\r\n          </el-form-item>\r\n        </el-form>\r\n\r\n        <!-- 操作按钮 -->\r\n        <div class=\"action-btns\">\r\n          <el-button type=\"primary\" @click=\"saveDetail\">保存</el-button>\r\n          <el-button @click=\"resetDetail\">重置</el-button>\r\n        </div>\r\n      </el-card>\r\n    </transition>\r\n\r\n    <!-- 分页组件 -->\r\n    <el-pagination\r\n      background\r\n      :current-page=\"queryParams.pageNum\"\r\n      :page-sizes=\"[10, 20, 50, 100]\"\r\n      :page-size=\"queryParams.pageSize\"\r\n      :total=\"total\"\r\n      layout=\"total, sizes, prev, pager, next, jumper\"\r\n      @size-change=\"handleSizeChange\"\r\n      @current-change=\"handleCurrentChange\"\r\n      class=\"pagination\"\r\n    />\r\n\r\n    <!-- 密码验证对话框 -->\r\n    <el-dialog\r\n      title=\"访问验证\"\r\n      :visible.sync=\"passwordDialogVisible\"\r\n      width=\"30%\"\r\n    >\r\n      <el-input\r\n        v-model=\"password\"\r\n        type=\"password\"\r\n        placeholder=\"请输入访问密码\"\r\n        show-password\r\n        @keyup.enter=\"verifyPassword\"\r\n      />\r\n      <span slot=\"footer\">\r\n        <el-button @click=\"passwordDialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"verifyPassword\">确认</el-button>\r\n      </span>\r\n    </el-dialog>\r\n\r\n    <el-dialog\r\n      title=\"修改密码\"\r\n      :visible.sync=\"changePwdDialogVisible\"\r\n      width=\"400px\"\r\n    >\r\n      <el-form :model=\"pwdForm\" :rules=\"pwdRules\" ref=\"pwdFormRef\">\r\n        <el-form-item label=\"旧密码\" prop=\"oldPassword\">\r\n          <el-input\r\n            v-model=\"pwdForm.oldPassword\"\r\n            type=\"password\"\r\n            show-password\r\n            placeholder=\"请输入原密码\"\r\n          />\r\n        </el-form-item>\r\n        <el-form-item label=\"新密码\" prop=\"newPassword\">\r\n          <el-input\r\n            v-model=\"pwdForm.newPassword\"\r\n            type=\"password\"\r\n            show-password\r\n            placeholder=\"6-20位字符\"\r\n          />\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\">\r\n        <el-button @click=\"changePwdDialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"handleChangePassword\"\r\n          >确认修改</el-button\r\n        >\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport request from \"@/utils/request\";\r\nimport md5 from \"js-md5\";\r\n\r\nconst API_MAP = {\r\n  expireTime: \"/control/shortLink/deadTime\",\r\n  allowNum: \"/control/shortLink/visitNum\",\r\n  privateTarget: \"/control/shortLink/private\",\r\n  password: \"/control/shortLink/changePwd\",\r\n};\r\n\r\nexport default {\r\n  name: \"ShortLinkList\",\r\n  data() {\r\n    return {\r\n      pwdRules: {\r\n        oldPassword: [\r\n          { required: true, message: \"必须输入旧密码\", trigger: \"blur\" },\r\n        ],\r\n        newPassword: [\r\n          { required: true, message: \"必须输入新密码\", trigger: \"blur\" },\r\n          { min: 6, max: 20, message: \"密码长度6-20位\", trigger: \"blur\" },\r\n        ],\r\n      },\r\n      activeDetail: null,\r\n      detailRules: {\r\n        allowNum: [{ type: \"number\", min: 0, message: \"不能小于0\" }],\r\n        expireTime: [{ validator: this.validateExpireTime }],\r\n        password: [\r\n          {\r\n            validator: (rule, value, callback) => {\r\n              // 仅在启用私密时校验\r\n              if (this.activeDetail.privateTarget && !value) {\r\n                callback(new Error(\"启用私密必须设置密码\"));\r\n              } else {\r\n                callback();\r\n              }\r\n            },\r\n            trigger: \"blur\",\r\n          },\r\n        ],\r\n      },\r\n      changePwdDialogVisible: false,\r\n      pwdForm: {\r\n        id: \"\",\r\n        oldPassword: \"\",\r\n        newPassword: \"\",\r\n      },\r\n      loading: false,\r\n      tableData: [],\r\n      total: 0,\r\n      tagOptions: [],\r\n      password: \"\",\r\n      currentLink: null,\r\n      passwordDialogVisible: false,\r\n      queryParams: {\r\n        pageNum: 1,\r\n        pageSize: 10,\r\n        keyword: \"\",\r\n        tags: [],\r\n        status: null,\r\n      },\r\n      statusOptions: [\r\n        { value: 0, label: \"草稿\" },\r\n        { value: 1, label: \"发布\" },\r\n        { value: 2, label: \"禁用\" },\r\n      ],\r\n      statusMap: {\r\n        0: { label: \"草稿\", type: \"info\" },\r\n        1: { label: \"正常\", type: \"success\" },\r\n        2: { label: \"禁用\", type: \"danger\" },\r\n      },\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchData();\r\n    this.fetchTags();\r\n  },\r\n  methods: {\r\n    // async fetchData() {\r\n    //   this.loading = true;\r\n    //   // 确保参数格式正确（多选标签转为逗号分隔）\r\n    //   console.log(this.queryParams.pageNum, this.queryParams.pageSize);\r\n    //   let params = {\r\n    //     pageNum: this.queryParams.pageNum,\r\n    //     pageSize: this.queryParams.pageSize,\r\n    //   };\r\n    //   if (this.queryParams.keyword) params.keyword = this.queryParams.keyword;\r\n    //   if (this.queryParams.status) params.status = this.queryParams.status;\r\n    //   // params = {\r\n    //   //   tags: this.queryParams.tags,\r\n    //   // };\r\n    //   request\r\n    //     .get(\"/shortLink/list\", { ...params })\r\n    //     .then((res) => {\r\n    //       if (res.code === 200) {\r\n    //         console.log(\"请求参数:\", { ...params });\r\n    //         console.log(\"接口返回res:\", res);\r\n    //         this.tableData = res.data.list;\r\n    //         this.total = res.data.total || 0;\r\n    //       }\r\n    //     })\r\n    //     .catch((error) => {\r\n    //       this.$message.error(\"加载失败\");\r\n    //     })\r\n    //     .finally(() => {\r\n    //       this.loading = false;\r\n    //     });\r\n    // },\r\n    async fetchData() {\r\n      try {\r\n        this.loading = true;\r\n\r\n        // 构造请求参数\r\n        const params = {\r\n          pageNum: this.queryParams.pageNum,\r\n          pageSize: this.queryParams.pageSize,\r\n          keyword: this.queryParams.keyword || undefined, // 空值不传\r\n          status: this.queryParams.status || undefined, // 空值不传\r\n          tags: this.queryParams.tags?.length\r\n            ? this.queryParams.tags.join(\",\")\r\n            : undefined,\r\n        };\r\n\r\n        // 移除值为undefined的参数\r\n        const filteredParams = Object.fromEntries(\r\n          Object.entries(params).filter(([_, value]) => value !== undefined)\r\n        );\r\n\r\n        console.log(\"请求参数:\", filteredParams);\r\n\r\n        const res = await request.get(\"/shortLink/list\", {\r\n          params: filteredParams, // 正确传递GET参数\r\n        });\r\n\r\n        if (res.code === 200) {\r\n          console.log(\"接口返回数据:\", res);\r\n          this.tableData = res.data.list || [];\r\n          this.total = res.data.total || 0;\r\n        } else {\r\n          // 处理业务逻辑错误\r\n          this.$message.error(res.msg || \"获取数据失败\");\r\n        }\r\n      } catch (error) {\r\n        // 拦截器已经处理了401/40005等错误，这里处理其他错误\r\n        console.error(\"请求异常:\", error);\r\n        if (!error.response) {\r\n          this.$message.error(\"网络错误，请检查连接\");\r\n        }\r\n        // 其他错误消息已在拦截器中显示\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n    async fetchTags() {\r\n      try {\r\n        const res = await request.get(\"/tag/get\", {\r\n          headers: { accessToken: localStorage.getItem(\"accessToken\") },\r\n        });\r\n        // 处理可能的空值\r\n        if (res && res.data) {\r\n          this.tagOptions = res.data.data || [];\r\n        } else {\r\n          this.tagOptions = [];\r\n          console.error(\"标签接口返回数据异常:\", res);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"获取标签失败:\", error);\r\n        this.tagOptions = [];\r\n      }\r\n    },\r\n\r\n    async handleDelete(id) {\r\n      try {\r\n        await request.delete(`/delete/shortLink/${id}`, {\r\n          headers: { accessToken: localStorage.getItem(\"accessToken\") },\r\n        });\r\n        this.$message.success(\"删除成功\");\r\n\r\n        // 删除后检查当前页是否为空\r\n        if (this.tableData.length === 1 && this.queryParams.pageNum > 1) {\r\n          this.queryParams.pageNum -= 1;\r\n        }\r\n        await this.fetchData();\r\n      } catch (error) {\r\n        this.$message.error(\"删除失败\");\r\n      }\r\n    },\r\n\r\n    handleLinkClick(row) {\r\n      if (row.hasPassword) {\r\n        this.currentLink = row;\r\n        this.passwordDialogVisible = true;\r\n      } else {\r\n        this.accessLink(row.fullShortUrl);\r\n      }\r\n    },\r\n\r\n    async verifyPassword() {\r\n      try {\r\n        const res = await request.post(\"/shortLink/verifyPassword\", {\r\n          shortLink: this.currentLink.shortUrl,\r\n          password: this.password,\r\n        });\r\n\r\n        if (res.code === 200) {\r\n          this.accessLink(this.currentLink.fullShortUrl);\r\n          this.passwordDialogVisible = false;\r\n        } else {\r\n          this.$message.error(\"密码错误\");\r\n        }\r\n      } catch (error) {\r\n        this.$message.error(\"验证失败\");\r\n      }\r\n    },\r\n\r\n    accessLink(url) {\r\n      window.open(url, \"_blank\");\r\n      // 记录访问统计\r\n      request.get(`/sparrow/${this.currentLink.shortUrl}`, {\r\n        headers: { accessToken: localStorage.getItem(\"accessToken\") },\r\n      });\r\n    },\r\n\r\n    // 显示详情\r\n    handleShowDetail(row) {\r\n      this.activeDetail = { ...row }; // 克隆行数据\r\n    },\r\n\r\n    // 保存修改\r\n    async saveDetail() {\r\n      try {\r\n        await this.$refs.detailForm.validate();\r\n        const originalData = this.tableData.find(\r\n          (item) => item.id === this.activeDetail.id\r\n        );\r\n        const changedFields = this.getChangedFields(originalData);\r\n\r\n        // 批量调用接口\r\n        const requests = changedFields.map((field) =>\r\n          this.callSpecificApi(field)\r\n        );\r\n        await Promise.all(requests);\r\n\r\n        this.$message.success(\"保存成功\");\r\n        await this.fetchData();\r\n      } catch (error) {\r\n        this.$message.error(`保存失败: ${error.message}`);\r\n      }\r\n    },\r\n\r\n    // getChangedFields(original) {\r\n    //   let fields = Object.keys(API_MAP).filter(key =>\r\n    //       JSON.stringify(this.activeDetail[key]) !== JSON.stringify(original[key])\r\n    //   );\r\n    //\r\n    //   // 排除密码单独修改的情况\r\n    //   if (fields.includes('password')) {\r\n    //     fields = fields.filter(f => f !== 'privateTarget');\r\n    //   }\r\n    //   return fields;\r\n    // },\r\n    getChangedFields(original) {\r\n      // 只检测以下字段变化\r\n      const compareFields = [\"expireTime\", \"allowNum\", \"privateTarget\"];\r\n      return compareFields.filter(\r\n        (key) => this.activeDetail[key] !== original[key]\r\n      );\r\n    },\r\n\r\n    async callSpecificApi(field) {\r\n      const apiPath = API_MAP[field];\r\n      const params = this.buildParamsByField(field);\r\n      const res = await request.put(apiPath, params);\r\n\r\n      if (res.code !== 200) throw new Error(res.msg || \"接口异常\");\r\n    },\r\n\r\n    // 在 methods 中添加以下方法\r\n    buildParamsByField(field) {\r\n      const baseParams = { id: this.activeDetail.id };\r\n\r\n      switch (field) {\r\n        // 过期时间\r\n        case \"expireTime\":\r\n          return {\r\n            ...baseParams,\r\n            expireTime: this.activeDetail.expireTime,\r\n          };\r\n\r\n        // 访问次数\r\n        case \"allowNum\":\r\n          return {\r\n            ...baseParams,\r\n            allowNum: this.activeDetail.allowNum,\r\n          };\r\n\r\n        // 私密状态（需校验密码）\r\n        case \"privateTarget\":\r\n          if (this.activeDetail.privateTarget) {\r\n            if (!this.activeDetail.password) {\r\n              throw new Error(\"启用私密必须设置密码\");\r\n            }\r\n            if (\r\n              this.activeDetail.password.length < 4 ||\r\n              this.activeDetail.password.length > 12\r\n            ) {\r\n              // ✅ 添加长度校验\r\n              throw new Error(\"请输入4-12位密码\");\r\n            }\r\n          }\r\n          return {\r\n            ...baseParams,\r\n            privateTarget: this.activeDetail.privateTarget,\r\n            password: md5(this.activeDetail.password), // 新密码直接加密\r\n          };\r\n\r\n        // 密码修改（参数名转换 newPassword）\r\n        // case 'password':\r\n        //   if (this.activeDetail.password.length < 6) {\r\n        //     throw new Error('密码至少6位');\r\n        //   }\r\n        //   return {\r\n        //     ...baseParams,\r\n        //     oldPassword: md5(this.oldPassword),      // 新增旧密码字段\r\n        //     newPassword: md5(this.activeDetail.password)\r\n        //   };\r\n\r\n        default:\r\n          throw new Error(\"未知字段类型\");\r\n      }\r\n    },\r\n\r\n    openChangePasswordDialog(row) {\r\n      if (!row.hasPassword) {\r\n        this.$message.error(\"该短链未设置密码\");\r\n        return;\r\n      }\r\n      this.pwdForm.id = row.id;\r\n      this.changePwdDialogVisible = true;\r\n    },\r\n\r\n    async handleChangePassword() {\r\n      try {\r\n        console.log(this.pwdForm.oldPassword);\r\n        console.log(this.pwdForm.newPassword);\r\n        const res = await request.put(\"/control/shortLink/changePwd\", {\r\n          id: this.pwdForm.id,\r\n          password: md5(this.pwdForm.oldPassword),\r\n          newPassword: md5(this.pwdForm.newPassword),\r\n        });\r\n\r\n        if (res.code === 200) {\r\n          this.$message.success(\"密码修改成功\");\r\n          this.changePwdDialogVisible = false;\r\n          await this.fetchData();\r\n        } else {\r\n          this.$message.error(res.msg);\r\n        }\r\n      } catch (error) {\r\n        this.$message.error(\"修改失败: \" + error.response?.data?.msg);\r\n      }\r\n    },\r\n\r\n    // 重置修改\r\n    resetDetail() {\r\n      this.activeDetail = {\r\n        ...this.tableData.find((item) => item.id === this.activeDetail.id),\r\n      };\r\n    },\r\n\r\n    handleSizeChange(val) {\r\n      this.queryParams.pageSize = val;\r\n      this.queryParams.pageNum = 1;\r\n      this.fetchData();\r\n    },\r\n\r\n    handleCurrentChange(val) {\r\n      this.queryParams.pageNum = val;\r\n      this.fetchData();\r\n    },\r\n\r\n    resetQuery() {\r\n      this.queryParams = {\r\n        pageNum: 1,\r\n        pageSize: 10,\r\n        keyword: \"\",\r\n        tags: [],\r\n        status: null,\r\n      };\r\n      this.fetchData();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.filter-bar {\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.link-tag {\r\n  margin-left: 8px;\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.tag-item {\r\n  margin: 2px;\r\n}\r\n\r\n.data-table {\r\n  margin: 20px 0;\r\n}\r\n\r\n.pagination {\r\n  margin-top: 20px;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.modal-mask {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(0, 0, 0, 0.5); /* 半透明黑色 */\r\n  z-index: 99; /* 比卡片低一级 */\r\n  transition: opacity 0.3s ease;\r\n}\r\n\r\n.detail-card {\r\n  position: fixed; /* 改为fixed定位 */\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 50%;\r\n  max-height: 80vh;\r\n  overflow-y: auto;\r\n  background: #fff;\r\n  z-index: 100;\r\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.3);\r\n  border-radius: 4px;\r\n}\r\n\r\n.detail-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.action-btns {\r\n  text-align: center;\r\n  margin-top: 20px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}