{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { MessageBox } from \"element-ui\";\nimport defaultAvatar from \"@/assets/logo.png\"; // 引入默认头像，需确保路径正确\nimport request from \"../utils/request\";\nexport default {\n  data() {\n    return {\n      isChangingPassword: false,\n      userInfo: {\n        email: \"\",\n        nickname: \"\",\n        avatar: \"\",\n        profile: \"\",\n        oldPassword: \"\",\n        newPassword: \"\"\n      },\n      defaultAvatar // 存储默认头像路径\n    };\n  },\n  created() {\n    this.fetchUserInformation();\n  },\n  methods: {\n    fetchUserInformation() {\n      // 从本地存储获取参数\n      const userId = localStorage.getItem(\"userEmail\");\n      if (!userId) {\n        console.error(\"本地存储中未找到用户ID\");\n        return;\n      }\n      request.get(`/user/information?userId=${userId}`).then(response => {\n        if (response.code === 200) {\n          const {\n            name,\n            avatar,\n            profile,\n            email\n          } = response.data;\n          this.userInfo = {\n            ...this.userInfo,\n            nickname: name,\n            avatar,\n            profile,\n            email\n          };\n        } else {\n          console.error(response.msg);\n        }\n      }).catch(error => {\n        console.error(\"获取用户信息失败\", error);\n      });\n    },\n    saveNickname() {\n      request.put(\"/user/name\", {\n        email: this.userInfo.email,\n        nickname: String(this.userInfo.nickname)\n      }).then(response => {\n        // 处理修改昵称成功逻辑\n        console.log(\"昵称修改成功\");\n        this.$message.success(\"昵称修改成功\");\n      }).catch(error => {\n        // 处理修改昵称失败逻辑\n        console.log(error);\n        this.$message.error(\"昵称修改失败\");\n      });\n    },\n    saveProfile() {\n      request.put(\"/user/profile\", {\n        email: this.userInfo.email,\n        profile: String(this.userInfo.profile)\n      }).then(response => {\n        // 处理修改个人简介成功逻辑\n        console.log(\"个人简介修改成功\");\n        this.$message.success(\"个人简介修改成功\");\n      }).catch(error => {\n        // 处理修改个人简介失败逻辑\n        console.log(error);\n        this.$message.error(\"个人简介修改失败\");\n      });\n    },\n    savePassword() {\n      request.put(\"/user/change/password\", {\n        email: this.userInfo.email,\n        oldPassword: String(this.userInfo.oldPassword),\n        newPassword: String(this.userInfo.newPassword)\n      }).then(response => {\n        // 处理修改密码成功逻辑\n        this.isChangingPassword = false;\n        console.log(\"密码修改成功\");\n        this.$message.success(\"密码修改成功\");\n      }).catch(error => {\n        // 处理修改密码失败逻辑\n        console.log(error);\n        this.$message.error(\"密码修改失败\");\n      });\n    },\n    toggleChangePassword() {\n      this.isChangingPassword = !this.isChangingPassword;\n    },\n    // 触发文件上传选择框\n    triggerAvatarUpload() {\n      document.getElementById(\"avatarInput\").click();\n    },\n    // 处理头像上传\n    handleAvatarUpload(event) {\n      const file = event.target.files[0];\n      if (file) {\n        const formData = new FormData();\n        formData.append(\"avatar\", file);\n        formData.append(\"email\", this.userInfo.email);\n        request.post(\"/user/uploadAvatar\", formData).then(response => {\n          // 更新用户头像信息\n          this.userInfo.avatar = response.data.avatarUrl;\n          console.log(\"头像上传成功\");\n          this.$message.success(\"头像上传成功\");\n        }).catch(error => {\n          console.log(error);\n          this.$message.error(\"头像上传失败\");\n        });\n      }\n    },\n    // 显示注销确认弹窗\n    showLogoutConfirm() {\n      MessageBox.confirm(\"确定要注销账号吗？\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(() => {\n        request.post(\"/user/logout\").then(response => {\n          // 注销成功，清除token和用户信息\n          localStorage.removeItem(\"accessToken\");\n          localStorage.removeItem(\"refreshToken\");\n          localStorage.removeItem(\"userEmail\");\n          // 跳转到登录页面\n          this.$router.push(\"/login\");\n        }).catch(error => {\n          // 处理注销失败逻辑\n          console.log(error);\n          this.$message.error(\"注销失败\");\n        });\n      }).catch(() => {\n        // 用户取消操作\n      });\n    }\n  }\n};","map":{"version":3,"names":["MessageBox","defaultAvatar","request","data","isChangingPassword","userInfo","email","nickname","avatar","profile","oldPassword","newPassword","created","fetchUserInformation","methods","userId","localStorage","getItem","console","error","get","then","response","code","name","msg","catch","saveNickname","put","String","log","$message","success","saveProfile","savePassword","toggleChangePassword","triggerAvatarUpload","document","getElementById","click","handleAvatarUpload","event","file","target","files","formData","FormData","append","post","avatarUrl","showLogoutConfirm","confirm","confirmButtonText","cancelButtonText","type","removeItem","$router","push"],"sources":["src/views/User.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-form\r\n      :model=\"userInfo\"\r\n      ref=\"userInfoFormRef\"\r\n      label-width=\"80px\"\r\n      class=\"create-form\"\r\n    >\r\n      <h2 class=\"form-title\">用户信息</h2>\r\n      <!-- 邮箱信息，从接口获取并展示，不使用input框 -->\r\n      <el-form-item label=\"邮箱\">\r\n        <span class=\"email-display\">{{ userInfo.email }}</span>\r\n      </el-form-item>\r\n      <el-form-item label=\"头像\">\r\n        <div class=\"avatar-container\">\r\n          <!-- 展示头像 -->\r\n          <img\r\n            :src=\"userInfo.avatar || defaultAvatar\"\r\n            alt=\"Avatar\"\r\n            class=\"avatar\"\r\n          />\r\n          <!-- 隐藏的文件上传 input -->\r\n          <input\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n            @change=\"handleAvatarUpload\"\r\n            style=\"display: none\"\r\n            id=\"avatarInput\"\r\n          />\r\n          <el-button @click=\"triggerAvatarUpload\">上传头像</el-button>\r\n        </div>\r\n      </el-form-item>\r\n      <el-form-item label=\"昵称\">\r\n        <div class=\"input-button-group\">\r\n          <el-input v-model=\"userInfo.nickname\"></el-input>\r\n          <el-button @click=\"saveNickname\">保存昵称</el-button>\r\n        </div>\r\n      </el-form-item>\r\n\r\n      <el-form-item label=\"个人简介\">\r\n        <div class=\"input-button-group\">\r\n          <el-input v-model=\"userInfo.profile\" type=\"textarea\"></el-input>\r\n          <el-button @click=\"saveProfile\">保存简介</el-button>\r\n        </div>\r\n      </el-form-item>\r\n      <el-form-item label=\"旧密码\" v-if=\"isChangingPassword\">\r\n        <el-input v-model=\"userInfo.oldPassword\" type=\"password\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"新密码\" v-if=\"isChangingPassword\">\r\n        <el-input v-model=\"userInfo.newPassword\" type=\"password\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item>\r\n        <el-button\r\n          type=\"primary\"\r\n          @click=\"savePassword\"\r\n          v-if=\"isChangingPassword\"\r\n          >保存密码</el-button\r\n        >\r\n        <el-button @click=\"toggleChangePassword\">\r\n          {{ isChangingPassword ? \"取消修改密码\" : \"修改密码\" }}\r\n        </el-button>\r\n        <el-button @click=\"showLogoutConfirm\">注销</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { MessageBox } from \"element-ui\";\r\nimport defaultAvatar from \"@/assets/logo.png\"; // 引入默认头像，需确保路径正确\r\nimport request from \"../utils/request\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      isChangingPassword: false,\r\n      userInfo: {\r\n        email: \"\",\r\n        nickname: \"\",\r\n        avatar: \"\",\r\n        profile: \"\",\r\n        oldPassword: \"\",\r\n        newPassword: \"\",\r\n      },\r\n      defaultAvatar, // 存储默认头像路径\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchUserInformation();\r\n  },\r\n  methods: {\r\n    fetchUserInformation() {\r\n      // 从本地存储获取参数\r\n      const userId = localStorage.getItem(\"userEmail\");\r\n      if (!userId) {\r\n        console.error(\"本地存储中未找到用户ID\");\r\n        return;\r\n      }\r\n      request\r\n        .get(`/user/information?userId=${userId}`)\r\n        .then((response) => {\r\n          if (response.code === 200) {\r\n            const { name, avatar, profile, email } = response.data;\r\n            this.userInfo = {\r\n              ...this.userInfo,\r\n              nickname: name,\r\n              avatar,\r\n              profile,\r\n              email,\r\n            };\r\n          } else {\r\n            console.error(response.msg);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"获取用户信息失败\", error);\r\n        });\r\n    },\r\n    saveNickname() {\r\n      request\r\n        .put(\"/user/name\", {\r\n          email: this.userInfo.email,\r\n          nickname: String(this.userInfo.nickname),\r\n        })\r\n        .then((response) => {\r\n          // 处理修改昵称成功逻辑\r\n          console.log(\"昵称修改成功\");\r\n          this.$message.success(\"昵称修改成功\");\r\n        })\r\n        .catch((error) => {\r\n          // 处理修改昵称失败逻辑\r\n          console.log(error);\r\n          this.$message.error(\"昵称修改失败\");\r\n        });\r\n    },\r\n    saveProfile() {\r\n      request\r\n        .put(\"/user/profile\", {\r\n          email: this.userInfo.email,\r\n          profile: String(this.userInfo.profile),\r\n        })\r\n        .then((response) => {\r\n          // 处理修改个人简介成功逻辑\r\n          console.log(\"个人简介修改成功\");\r\n          this.$message.success(\"个人简介修改成功\");\r\n        })\r\n        .catch((error) => {\r\n          // 处理修改个人简介失败逻辑\r\n          console.log(error);\r\n          this.$message.error(\"个人简介修改失败\");\r\n        });\r\n    },\r\n    savePassword() {\r\n      request\r\n        .put(\"/user/change/password\", {\r\n          email: this.userInfo.email,\r\n          oldPassword: String(this.userInfo.oldPassword),\r\n          newPassword: String(this.userInfo.newPassword),\r\n        })\r\n        .then((response) => {\r\n          // 处理修改密码成功逻辑\r\n          this.isChangingPassword = false;\r\n          console.log(\"密码修改成功\");\r\n          this.$message.success(\"密码修改成功\");\r\n        })\r\n        .catch((error) => {\r\n          // 处理修改密码失败逻辑\r\n          console.log(error);\r\n          this.$message.error(\"密码修改失败\");\r\n        });\r\n    },\r\n    toggleChangePassword() {\r\n      this.isChangingPassword = !this.isChangingPassword;\r\n    },\r\n    // 触发文件上传选择框\r\n    triggerAvatarUpload() {\r\n      document.getElementById(\"avatarInput\").click();\r\n    },\r\n    // 处理头像上传\r\n    handleAvatarUpload(event) {\r\n      const file = event.target.files[0];\r\n      if (file) {\r\n        const formData = new FormData();\r\n        formData.append(\"avatar\", file);\r\n        formData.append(\"email\", this.userInfo.email);\r\n        request\r\n          .post(\"/user/uploadAvatar\", formData)\r\n          .then((response) => {\r\n            // 更新用户头像信息\r\n            this.userInfo.avatar = response.data.avatarUrl;\r\n            console.log(\"头像上传成功\");\r\n            this.$message.success(\"头像上传成功\");\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n            this.$message.error(\"头像上传失败\");\r\n          });\r\n      }\r\n    },\r\n    // 显示注销确认弹窗\r\n    showLogoutConfirm() {\r\n      MessageBox.confirm(\"确定要注销账号吗？\", \"提示\", {\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\",\r\n        type: \"warning\",\r\n      })\r\n        .then(() => {\r\n          request\r\n            .post(\"/user/logout\")\r\n            .then((response) => {\r\n              // 注销成功，清除token和用户信息\r\n              localStorage.removeItem(\"accessToken\");\r\n              localStorage.removeItem(\"refreshToken\");\r\n              localStorage.removeItem(\"userEmail\");\r\n              // 跳转到登录页面\r\n              this.$router.push(\"/login\");\r\n            })\r\n            .catch((error) => {\r\n              // 处理注销失败逻辑\r\n              console.log(error);\r\n              this.$message.error(\"注销失败\");\r\n            });\r\n        })\r\n        .catch(() => {\r\n          // 用户取消操作\r\n        });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.avatar-container {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.avatar {\r\n  width: 80px;\r\n  height: 80px;\r\n  border-radius: 50%;\r\n  margin-right: 10px;\r\n  object-fit: cover;\r\n  border: 1px solid #409eff;\r\n}\r\n\r\n.create-form {\r\n  max-width: 800px;\r\n  margin: 20px auto;\r\n  padding: 30px;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.form-title {\r\n  text-align: center;\r\n  color: #409eff;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.input-button-group {\r\n  display: flex;\r\n  gap: 5px;\r\n  align-items: center;\r\n}\r\n\r\n.input-button-group.el-input {\r\n  flex: 1;\r\n  margin-right: 10px;\r\n}\r\n\r\n.email-display {\r\n  display: inline-block;\r\n  text-align: left;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}