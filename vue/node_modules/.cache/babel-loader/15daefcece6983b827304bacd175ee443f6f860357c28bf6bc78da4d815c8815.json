{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport request from \"@/utils/request\";\nconst API_MAP = {\n  expireTime: \"/control/shortLink/deadTime\",\n  allowNum: \"/control/shortLink/visitNum\",\n  privateTarget: \"/control/shortLink/private\",\n  password: \"/control/shortLink/changePwd\"\n};\nexport default {\n  name: \"ShortLinkList\",\n  data() {\n    return {\n      pwdRules: {\n        oldPassword: [{\n          required: true,\n          message: \"必须输入旧密码\",\n          trigger: \"blur\"\n        }],\n        newPassword: [{\n          required: true,\n          message: \"必须输入新密码\",\n          trigger: \"blur\"\n        }, {\n          min: 6,\n          max: 20,\n          message: \"密码长度6-20位\",\n          trigger: \"blur\"\n        }]\n      },\n      activeDetail: null,\n      originalData: null,\n      detailRules: {\n        allowNum: [{\n          type: \"number\",\n          min: 0,\n          message: \"不能小于0\"\n        }],\n        expireTime: [{\n          validator: this.validateExpireTime\n        }],\n        password: [{\n          validator: (rule, value, callback) => {\n            // 仅在启用私密时校验\n            if (this.activeDetail.privateTarget && !value) {\n              callback(new Error(\"启用私密必须设置密码\"));\n            } else {\n              callback();\n            }\n          },\n          trigger: \"blur\"\n        }]\n      },\n      changePwdDialogVisible: false,\n      pwdForm: {\n        id: \"\",\n        oldPassword: \"\",\n        newPassword: \"\"\n      },\n      loading: false,\n      tableData: [],\n      total: 0,\n      tagOptions: [],\n      // password: \"\",\n      // currentLink: null,\n      // passwordDialogVisible: false,\n      queryParams: {\n        pageNum: 1,\n        pageSize: 10,\n        keyword: \"\",\n        tags: [],\n        status: null\n      },\n      statusOptions: [{\n        value: 0,\n        label: \"草稿\"\n      }, {\n        value: 1,\n        label: \"发布\"\n      }, {\n        value: 2,\n        label: \"禁用\"\n      }],\n      statusMap: {\n        0: {\n          label: \"草稿\",\n          type: \"info\"\n        },\n        1: {\n          label: \"正常\",\n          type: \"success\"\n        },\n        2: {\n          label: \"禁用\",\n          type: \"danger\"\n        }\n      }\n    };\n  },\n  mounted() {\n    this.fetchData();\n    this.fetchTags();\n  },\n  methods: {\n    async fetchData() {\n      try {\n        this.loading = true;\n\n        // 构造请求参数\n        const params = {\n          pageNum: this.queryParams.pageNum,\n          pageSize: this.queryParams.pageSize,\n          keyword: this.queryParams.keyword || undefined,\n          // 空值不传\n          status: this.queryParams.status || undefined,\n          // 空值不传\n          tags: this.queryParams.tags?.length ? this.queryParams.tags.join(\",\") : undefined\n        };\n\n        // 移除值为undefined的参数\n        const filteredParams = Object.fromEntries(Object.entries(params).filter(([_, value]) => value !== undefined));\n        const res = await request.get(\"/shortLink/list\", {\n          params: filteredParams // 正确传递GET参数\n        });\n        if (res.code === 200) {\n          this.tableData = res.data.list || [];\n          this.total = res.data.total || 0;\n        } else {\n          // 处理业务逻辑错误\n          this.$message.error(res.msg || \"获取数据失败\");\n        }\n      } catch (error) {\n        // 拦截器已经处理了401/40005等错误，这里处理其他错误\n        console.error(\"请求异常:\", error);\n        if (!error.response) {\n          this.$message.error(\"网络错误，请检查连接\");\n        }\n        // 其他错误消息已在拦截器中显示\n      } finally {\n        this.loading = false;\n      }\n    },\n    async fetchTags() {\n      try {\n        const res = await request.get(\"/tag/get\");\n        if (res.code === 200) {\n          this.tagOptions = res.data || [];\n          console.log(this.tagList);\n        } else {\n          this.$message.error(res.msg || \"获取标签失败\");\n          this.tagOptions = [];\n        }\n      } catch (error) {\n        console.error(\"获取标签失败:\", error);\n        this.$message.error(\"获取标签失败，请检查网络连接\");\n        this.tagOptions = [];\n      }\n    },\n    async handleDelete(id) {\n      try {\n        await request.delete(`/delete/shortLink/${id}`, {\n          headers: {\n            accessToken: localStorage.getItem(\"accessToken\")\n          }\n        });\n        this.$message.success(\"删除成功\");\n\n        // 删除后检查当前页是否为空\n        if (this.tableData.length === 1 && this.queryParams.pageNum > 1) {\n          this.queryParams.pageNum -= 1;\n        }\n        await this.fetchData();\n      } catch (error) {\n        this.$message.error(\"删除失败\");\n      }\n    },\n    async accessLink(row) {\n      try {\n        // // 创建新窗口避免被浏览器拦截\n        // const newWindow = window.open('', '_blank');\n        console.log(\"row:\", row);\n\n        // 调用后端接口进行跳转\n        const response = await request.post(\"/shortLink/verifyPassword\", {\n          shortLink: row.shortLink,\n          password: row.password // 传递空密码由后端处理\n        }, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n          }\n        });\n\n        // 处理重定向\n        if (response.data.code === 200) {\n          // 显示倒计时界面\n          this.showRedirectPage(newWindow, response.data.data);\n\n          // 发送统计请求（不阻塞主流程）\n          this.sendStatistics(row.shortLink);\n        }\n      } catch (error) {\n        console.error(\"跳转失败:\", error);\n        this.$message.error(\"链接打开失败\");\n      }\n    },\n    // 显示重定向页面\n    showRedirectPage(newWindow, targetUrl) {\n      let seconds = 5;\n      const htmlContent = `\n        <div style=\"padding: 20px; text-align: center\">\n          <h3>正在跳转...</h3>\n          <p>将在 <span id=\"countdown\">5</span> 秒后自动跳转</p>\n          <p>或 <a href=\"${targetUrl}\" style=\"color: blue\">立即跳转</a></p>\n        </div>\n      `;\n      newWindow.document.write(htmlContent);\n\n      // 倒计时逻辑\n      const timer = setInterval(() => {\n        seconds--;\n        newWindow.document.getElementById(\"countdown\").textContent = seconds;\n        if (seconds <= 0) {\n          clearInterval(timer);\n          newWindow.location.href = targetUrl;\n        }\n      }, 1000);\n\n      // 立即跳转处理\n      newWindow.document.querySelector(\"a\").addEventListener(\"click\", e => {\n        e.preventDefault();\n        newWindow.location.href = targetUrl;\n      });\n    },\n    // 发送统计请求\n    async sendStatistics(shortLink) {\n      try {\n        await request.get(`/sparrow/${shortLink}`);\n      } catch (error) {\n        console.error(\"统计请求失败:\", error);\n      }\n    },\n    // async verifyPassword() {\n    //   console.log(this.currentLink.shortUrl)\n    //   console.log(this.password)\n    //   try {\n    //     const res = await request.post(\"/shortLink/verifyPassword\", requestData,{\n    //       headers: {\n    //         'Content-Type': 'application/json',\n    //         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n    //       }});\n    //\n    //     console.log(res)\n    //\n    //     if (res.code === 200 && res.data) {\n    //       // 成功处理\n    //       this.$message.success('密码验证成功');\n    //       this.passwordDialogVisible = false;\n    //\n    //       // 跳转逻辑\n    //       this.handleRedirect(res.data);\n    //     } else {\n    //       throw new Error(res.msg || '验证失败');\n    //     }\n    //   } catch (error) {\n    //     // 错误处理\n    //     let errorMsg = '验证失败';\n    //     if (error.response) {\n    //       errorMsg = `服务器错误: ${error.response.status}`;\n    //     } else if (error.message.includes('Network Error')) {\n    //       errorMsg = '网络连接异常';\n    //     }\n    //     this.$message.error(errorMsg);\n    //     console.error('验证错误:', error);\n    //   }\n    // },\n\n    // async verifyPassword() {\n    //   try {\n    //     const requestData = {\n    //       shortLink: this.currentLink.shortLink,\n    //       password: this.password\n    //     };\n    //\n    //     const res = await request.post(\"/shortLink/verifyPassword\", requestData);\n    //\n    //     if (res.code === 200 && res.data) {\n    //       // this.$message.success('密码验证成功');\n    //       // this.passwordDialogVisible = false;\n    //       this.handleRedirect(res.data, this.currentLink);\n    //     } else {\n    //       throw new Error(res.msg || '验证失败');\n    //     }\n    //   } catch (error) {\n    //     let errorMsg = '验证失败';\n    //     if (error.response) {\n    //       errorMsg = `服务器错误: ${error.response.status}`;\n    //     } else if (error.message.includes('Network Error')) {\n    //       errorMsg = '网络连接异常';\n    //     }\n    //     this.$message.error(errorMsg);\n    //   }\n    // },\n\n    async handleRedirect(targetUrl, row) {\n      // 显示成功提示\n      this.$notify({\n        title: \"跳转提示\",\n        message: \"验证成功，即将跳转...\",\n        type: \"success\",\n        duration: 2000\n      });\n\n      // 先发送统计请求\n      try {\n        await request.get(`/sparrow/${row.shortLink}`);\n      } catch (error) {\n        console.error(\"统计请求失败:\", error);\n      }\n\n      // 创建新窗口\n      const newWindow = window.open(\"\", \"_blank\");\n\n      // 倒计时跳转逻辑\n      let seconds = 5;\n      const countdownElement = document.createElement(\"div\");\n      countdownElement.innerHTML = `\n        <div style=\"padding: 20px; text-align: center\">\n          <h3>验证成功！即将跳转到目标页面</h3>\n          <p>URL: ${targetUrl}</p>\n          <p>将在 <span style=\"color: #409EFF; font-weight: bold\">${seconds}</span> 秒后自动跳转</p>\n          <p>或 <a href=\"${targetUrl}\" style=\"color: #409EFF; cursor: pointer\">立即跳转</a></p>\n        </div>\n      `;\n      newWindow.document.body.appendChild(countdownElement);\n\n      // 倒计时更新\n      const timer = setInterval(() => {\n        seconds--;\n        countdownElement.querySelector(\"span\").textContent = seconds;\n        if (seconds <= 0) {\n          clearInterval(timer);\n          newWindow.location.href = targetUrl;\n        }\n      }, 1000);\n\n      // 立即跳转点击处理\n      countdownElement.querySelector(\"a\").addEventListener(\"click\", e => {\n        e.preventDefault();\n        newWindow.location.href = targetUrl;\n      });\n    },\n    // 显示详情\n    handleShowDetail(row) {\n      this.activeDetail = {\n        ...row\n      }; // 克隆行数据\n      console.log(this.activeDetail);\n    },\n    // 保存修改\n    async saveDetail() {\n      try {\n        await this.$refs.detailForm.validate();\n        const originalData = this.tableData.find(item => item.id === this.activeDetail.id);\n        const changedFields = this.getChangedFields(originalData);\n\n        // 批量调用接口\n        const requests = changedFields.map(field => this.callSpecificApi(field));\n        await Promise.all(requests);\n        this.$message.success(\"保存成功\");\n        await this.fetchData();\n      } catch (error) {\n        this.$message.error(`保存失败: ${error.message}`);\n      }\n    },\n    getChangedFields(original) {\n      // 只检测以下字段变化\n      const compareFields = [\"expireTime\", \"allowNum\", \"privateTarget\"];\n      return compareFields.filter(key => this.activeDetail[key] !== original[key]);\n    },\n    async callSpecificApi(field) {\n      const apiPath = API_MAP[field];\n      const params = this.buildParamsByField(field);\n      const res = await request.put(apiPath, params);\n      if (res.code !== 200) throw new Error(res.msg || \"接口异常\");\n    },\n    // 在 methods 中添加以下方法\n    buildParamsByField(field) {\n      const baseParams = {\n        id: this.activeDetail.id\n      };\n      switch (field) {\n        // 过期时间\n        case \"expireTime\":\n          return {\n            ...baseParams,\n            expireTime: this.activeDetail.expireTime\n          };\n\n        // 访问次数\n        case \"allowNum\":\n          return {\n            ...baseParams,\n            allowNum: this.activeDetail.allowNum\n          };\n\n        // 私密状态（需校验密码）\n        case \"privateTarget\":\n          if (this.activeDetail.privateTarget) {\n            if (!this.activeDetail.password) {\n              throw new Error(\"启用私密必须设置密码\");\n            }\n            if (this.activeDetail.password.length < 4 || this.activeDetail.password.length > 12) {\n              // ✅ 添加长度校验\n              throw new Error(\"请输入4-12位密码\");\n            }\n          }\n          return {\n            ...baseParams,\n            privateTarget: this.activeDetail.privateTarget,\n            password: this.activeDetail.password // 新密码直接加密\n          };\n        default:\n          throw new Error(\"未知字段类型\");\n      }\n    },\n    openChangePasswordDialog(row) {\n      if (!row.hasPassword) {\n        this.$message.error(\"该短链未设置密码\");\n        return;\n      }\n      this.pwdForm.id = row.id;\n      this.changePwdDialogVisible = true;\n    },\n    async handleChangePassword() {\n      try {\n        console.log(this.pwdForm.oldPassword);\n        console.log(this.pwdForm.newPassword);\n        const res = await request.put(\"/control/shortLink/changePwd\", {\n          id: this.pwdForm.id,\n          password: this.pwdForm.oldPassword,\n          newPassword: this.pwdForm.newPassword\n        });\n        if (res.code === 200) {\n          this.$message.success(\"密码修改成功\");\n          this.changePwdDialogVisible = false;\n          await this.fetchData();\n        } else {\n          this.$message.error(res.msg);\n        }\n      } catch (error) {\n        this.$message.error(\"修改失败: \" + error.response?.data?.msg);\n      }\n    },\n    // 重置修改\n    resetDetail() {\n      this.activeDetail = {\n        ...this.tableData.find(item => item.id === this.activeDetail.id)\n      };\n    },\n    handleSizeChange(val) {\n      this.queryParams.pageSize = val;\n      this.queryParams.pageNum = 1;\n      this.fetchData();\n    },\n    handleCurrentChange(val) {\n      this.queryParams.pageNum = val;\n      this.fetchData();\n    },\n    resetQuery() {\n      this.queryParams = {\n        pageNum: 1,\n        pageSize: 10,\n        keyword: \"\",\n        tags: [],\n        status: null\n      };\n      this.fetchData();\n    }\n  }\n};","map":{"version":3,"names":["request","API_MAP","expireTime","allowNum","privateTarget","password","name","data","pwdRules","oldPassword","required","message","trigger","newPassword","min","max","activeDetail","originalData","detailRules","type","validator","validateExpireTime","rule","value","callback","Error","changePwdDialogVisible","pwdForm","id","loading","tableData","total","tagOptions","queryParams","pageNum","pageSize","keyword","tags","status","statusOptions","label","statusMap","mounted","fetchData","fetchTags","methods","params","undefined","length","join","filteredParams","Object","fromEntries","entries","filter","_","res","get","code","list","$message","error","msg","console","response","log","tagList","handleDelete","delete","headers","accessToken","localStorage","getItem","success","accessLink","row","post","shortLink","Authorization","showRedirectPage","newWindow","sendStatistics","targetUrl","seconds","htmlContent","document","write","timer","setInterval","getElementById","textContent","clearInterval","location","href","querySelector","addEventListener","e","preventDefault","handleRedirect","$notify","title","duration","window","open","countdownElement","createElement","innerHTML","body","appendChild","handleShowDetail","saveDetail","$refs","detailForm","validate","find","item","changedFields","getChangedFields","requests","map","field","callSpecificApi","Promise","all","original","compareFields","key","apiPath","buildParamsByField","put","baseParams","openChangePasswordDialog","hasPassword","handleChangePassword","resetDetail","handleSizeChange","val","handleCurrentChange","resetQuery"],"sources":["src/views/ShortLinkList.vue"],"sourcesContent":["<!--<template>-->\r\n<!--  <div class=\"list-container\">-->\r\n<!--    &lt;!&ndash; 搜索和过滤区 &ndash;&gt;-->\r\n<!--    <div class=\"filter-bar\">-->\r\n<!--      <el-input-->\r\n<!--        v-model=\"queryParams.keyword\"-->\r\n<!--        placeholder=\"输入标题/长链/短链\"-->\r\n<!--        clearable-->\r\n<!--        class=\"search-input\"-->\r\n<!--        @keyup.enter=\"fetchData\"-->\r\n<!--      >-->\r\n<!--        <template #prefix>-->\r\n<!--          <i class=\"el-icon-search\"></i>-->\r\n<!--        </template>-->\r\n<!--      </el-input>-->\r\n\r\n<!--      <el-select-->\r\n<!--        v-model=\"queryParams.tags\"-->\r\n<!--        multiple-->\r\n<!--        filterable-->\r\n<!--        placeholder=\"选择标签\"-->\r\n<!--        style=\"width: 240px\"-->\r\n<!--      >-->\r\n<!--        <el-option-->\r\n<!--          v-for=\"tag in tagOptions\"-->\r\n<!--          :key=\"tag.id\"-->\r\n<!--          :label=\"tag.name\"-->\r\n<!--          :value=\"tag.id\"-->\r\n<!--        />-->\r\n<!--      </el-select>-->\r\n\r\n<!--      <el-select-->\r\n<!--        v-model=\"queryParams.status\"-->\r\n<!--        placeholder=\"选择状态\"-->\r\n<!--        clearable-->\r\n<!--        style=\"width: 120px\"-->\r\n<!--      >-->\r\n<!--        <el-option-->\r\n<!--          v-for=\"item in statusOptions\"-->\r\n<!--          :key=\"item.value\"-->\r\n<!--          :label=\"item.label\"-->\r\n<!--          :value=\"item.value\"-->\r\n<!--        />-->\r\n<!--      </el-select>-->\r\n\r\n<!--      <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"fetchData\"-->\r\n<!--        >查询</el-button-->\r\n<!--      >-->\r\n\r\n<!--      <el-button icon=\"el-icon-refresh\" @click=\"resetQuery\">重置</el-button>-->\r\n<!--    </div>-->\r\n\r\n<!--    &lt;!&ndash; 数据表格 &ndash;&gt;-->\r\n<!--    <el-table-->\r\n<!--      :data=\"tableData\"-->\r\n<!--      stripe-->\r\n<!--      border-->\r\n<!--      v-loading=\"loading\"-->\r\n<!--      element-loading-text=\"加载中...\"-->\r\n<!--      class=\"data-table\"-->\r\n<!--    >-->\r\n<!--      <el-table-column prop=\"title\" label=\"标题\" min-width=\"150\" />-->\r\n\r\n<!--      <el-table-column prop=\"fullShortUrl\" label=\"短链\" width=\"220\">-->\r\n<!--        <template #default=\"{ row }\">-->\r\n<!--          <el-tooltip-->\r\n<!--            effect=\"dark\"-->\r\n<!--            :content=\"`点击次数: ${row.visits} | 独立IP: ${row.ipNum}`\"-->\r\n<!--            placement=\"top\"-->\r\n<!--          >-->\r\n<!--            <el-link-->\r\n<!--              type=\"primary\"-->\r\n<!--              :underline=\"false\"-->\r\n<!--              @click=\"handleLinkClick(row)\"-->\r\n<!--              >{{ row.fullShortUrl }}</el-link-->\r\n<!--            >-->\r\n<!--          </el-tooltip>-->\r\n<!--          <el-tag-->\r\n<!--            v-if=\"row.hasPassword\"-->\r\n<!--            size=\"mini\"-->\r\n<!--            type=\"danger\"-->\r\n<!--            effect=\"dark\"-->\r\n<!--            class=\"link-tag\"-->\r\n<!--            >加密</el-tag-->\r\n<!--          >-->\r\n<!--          <el-tag-->\r\n<!--            v-if=\"row.privateTarget\"-->\r\n<!--            size=\"mini\"-->\r\n<!--            type=\"warning\"-->\r\n<!--            effect=\"dark\"-->\r\n<!--            class=\"link-tag\"-->\r\n<!--            >私有</el-tag-->\r\n<!--          >-->\r\n<!--        </template>-->\r\n<!--      </el-table-column>-->\r\n\r\n<!--      <el-table-column label=\"标签\" width=\"180\">-->\r\n<!--        <template #default=\"{ row }\">-->\r\n<!--          <el-tag-->\r\n<!--            v-for=\"tag in row.tags\"-->\r\n<!--            :key=\"tag\"-->\r\n<!--            size=\"mini\"-->\r\n<!--            class=\"tag-item\"-->\r\n<!--            >{{ tag }}</el-tag-->\r\n<!--          >-->\r\n<!--        </template>-->\r\n<!--      </el-table-column>-->\r\n\r\n<!--      <el-table-column-->\r\n<!--        prop=\"longUrl\"-->\r\n<!--        label=\"原始链接\"-->\r\n<!--        min-width=\"280\"-->\r\n<!--        show-overflow-tooltip-->\r\n<!--      />-->\r\n\r\n<!--      <el-table-column label=\"状态\" width=\"100\">-->\r\n<!--        <template #default=\"{ row }\">-->\r\n<!--          <el-tag :type=\"statusMap[row.status].type\" size=\"small\">{{-->\r\n<!--            statusMap[row.status].label-->\r\n<!--          }}</el-tag>-->\r\n<!--        </template>-->\r\n<!--      </el-table-column>-->\r\n\r\n<!--      <el-table-column label=\"操作\" width=\"280\" fixed=\"right\">-->\r\n<!--        <template #default=\"{ row }\">-->\r\n<!--          <el-button type=\"primary\" size=\"mini\" @click=\"handleShowDetail(row)\"-->\r\n<!--            >详情</el-button-->\r\n<!--          >-->\r\n\r\n<!--          <el-button-->\r\n<!--            type=\"primary\"-->\r\n<!--            size=\"mini\"-->\r\n<!--            :disabled=\"!row.hasPassword\"-->\r\n<!--            @click=\"openChangePasswordDialog(row)\"-->\r\n<!--            >修改密码</el-button-->\r\n<!--          >-->\r\n\r\n<!--          <el-popconfirm-->\r\n<!--            title=\"确认删除该短链吗？\"-->\r\n<!--            @confirm=\"handleDelete(row.id)\"-->\r\n<!--          >-->\r\n<!--            <template #reference>-->\r\n<!--              <el-button type=\"danger\" size=\"mini\" style=\"margin-left: 10px\"-->\r\n<!--                >删除</el-button-->\r\n<!--              >-->\r\n<!--            </template>-->\r\n<!--          </el-popconfirm>-->\r\n<!--        </template>-->\r\n<!--      </el-table-column>-->\r\n<!--    </el-table>-->\r\n\r\n<!--    &lt;!&ndash; 遮罩层 &ndash;&gt;-->\r\n<!--    <div-->\r\n<!--      class=\"modal-mask\"-->\r\n<!--      v-if=\"activeDetail\"-->\r\n<!--      @click.self=\"activeDetail = null\"-->\r\n<!--    ></div>-->\r\n\r\n<!--    &lt;!&ndash; 短链详情卡片 &ndash;&gt;-->\r\n<!--    <transition name=\"el-zoom-in-top\">-->\r\n<!--      <el-card v-if=\"activeDetail\" class=\"detail-card\" style=\"margin-top: 20px\">-->\r\n<!--        <div class=\"detail-header\">-->\r\n<!--          <h3>短链详情（title: {{ activeDetail.title }}）</h3>-->\r\n<!--          <el-button-->\r\n<!--            icon=\"el-icon-close\"-->\r\n<!--            circle-->\r\n<!--            @click=\"activeDetail = null\"-->\r\n<!--            class=\"close-btn\"-->\r\n<!--          />-->\r\n<!--        </div>-->\r\n\r\n<!--        &lt;!&ndash; 集成LinkDetail的核心表单 &ndash;&gt;-->\r\n<!--        <el-form-->\r\n<!--          :model=\"activeDetail\"-->\r\n<!--          :rules=\"detailRules\"-->\r\n<!--          ref=\"detailForm\"-->\r\n<!--          label-width=\"120px\"-->\r\n<!--        >-->\r\n<!--          <el-form-item label=\"允许访问次数\" prop=\"allowNum\">-->\r\n<!--            <el-input-number-->\r\n<!--              v-model=\"activeDetail.allowNum\"-->\r\n<!--              :min=\"0\"-->\r\n<!--              controls-position=\"right\"-->\r\n<!--            />-->\r\n<!--          </el-form-item>-->\r\n\r\n<!--          <el-form-item label=\"过期时间\">-->\r\n<!--            <el-date-picker-->\r\n<!--              v-model=\"activeDetail.expireTime\"-->\r\n<!--              type=\"datetime\"-->\r\n<!--              value-format=\"yyyy-MM-dd HH:mm:ss\"-->\r\n<!--              format=\"yyyy-MM-dd HH:mm:ss\"-->\r\n<!--              placeholder=\"选择过期时间\"-->\r\n<!--              clearable-->\r\n<!--              style=\"width: 100%\"-->\r\n<!--            />-->\r\n<!--          </el-form-item>-->\r\n\r\n<!--          <el-form-item label=\"私密链接\">-->\r\n<!--            <el-switch v-model=\"activeDetail.privateTarget\" />-->\r\n<!--          </el-form-item>-->\r\n\r\n<!--          <el-form-item v-if=\"activeDetail.privateTarget\" label=\"设置密码\">-->\r\n<!--            <el-input-->\r\n<!--              v-model=\"activeDetail.password\"-->\r\n<!--              :disabled=\"activeDetail.hasPassword\"-->\r\n<!--              type=\"password\"-->\r\n<!--              show-password-->\r\n<!--              placeholder=\"设置访问密码\"-->\r\n<!--            />-->\r\n<!--          </el-form-item>-->\r\n<!--        </el-form>-->\r\n\r\n<!--        &lt;!&ndash; 操作按钮 &ndash;&gt;-->\r\n<!--        <div class=\"action-btns\">-->\r\n<!--          <el-button type=\"primary\" @click=\"saveDetail\">保存</el-button>-->\r\n<!--          <el-button @click=\"resetDetail\">重置</el-button>-->\r\n<!--        </div>-->\r\n<!--      </el-card>-->\r\n<!--    </transition>-->\r\n\r\n<!--    &lt;!&ndash; 分页组件 &ndash;&gt;-->\r\n<!--    <el-pagination-->\r\n<!--      background-->\r\n<!--      :current-page=\"queryParams.pageNum\"-->\r\n<!--      :page-sizes=\"[10, 20, 50, 100]\"-->\r\n<!--      :page-size=\"queryParams.pageSize\"-->\r\n<!--      :total=\"total\"-->\r\n<!--      layout=\"total, sizes, prev, pager, next, jumper\"-->\r\n<!--      @size-change=\"handleSizeChange\"-->\r\n<!--      @current-change=\"handleCurrentChange\"-->\r\n<!--      class=\"pagination\"-->\r\n<!--    />-->\r\n\r\n<!--    &lt;!&ndash; 密码验证对话框 &ndash;&gt;-->\r\n<!--    <el-dialog-->\r\n<!--      title=\"访问验证\"-->\r\n<!--      :visible.sync=\"passwordDialogVisible\"-->\r\n<!--      width=\"30%\"-->\r\n<!--    >-->\r\n<!--      <el-input-->\r\n<!--        v-model=\"password\"-->\r\n<!--        type=\"password\"-->\r\n<!--        placeholder=\"请输入访问密码\"-->\r\n<!--        show-password-->\r\n<!--        @keyup.enter=\"verifyPassword\"-->\r\n<!--      />-->\r\n<!--      <span slot=\"footer\">-->\r\n<!--        <el-button @click=\"passwordDialogVisible = false\">取消</el-button>-->\r\n<!--        <el-button type=\"primary\" @click=\"verifyPassword\">确认</el-button>-->\r\n<!--      </span>-->\r\n<!--    </el-dialog>-->\r\n\r\n<!--    <el-dialog-->\r\n<!--      title=\"修改密码\"-->\r\n<!--      :visible.sync=\"changePwdDialogVisible\"-->\r\n<!--      width=\"400px\"-->\r\n<!--    >-->\r\n<!--      <el-form :model=\"pwdForm\" :rules=\"pwdRules\" ref=\"pwdFormRef\">-->\r\n<!--        <el-form-item label=\"旧密码\" prop=\"oldPassword\">-->\r\n<!--          <el-input-->\r\n<!--            v-model=\"pwdForm.oldPassword\"-->\r\n<!--            type=\"password\"-->\r\n<!--            show-password-->\r\n<!--            placeholder=\"请输入原密码\"-->\r\n<!--          />-->\r\n<!--        </el-form-item>-->\r\n<!--        <el-form-item label=\"新密码\" prop=\"newPassword\">-->\r\n<!--          <el-input-->\r\n<!--            v-model=\"pwdForm.newPassword\"-->\r\n<!--            type=\"password\"-->\r\n<!--            show-password-->\r\n<!--            placeholder=\"6-20位字符\"-->\r\n<!--          />-->\r\n<!--        </el-form-item>-->\r\n<!--      </el-form>-->\r\n<!--      <span slot=\"footer\">-->\r\n<!--        <el-button @click=\"changePwdDialogVisible = false\">取消</el-button>-->\r\n<!--        <el-button type=\"primary\" @click=\"handleChangePassword\"-->\r\n<!--          >确认修改</el-button-->\r\n<!--        >-->\r\n<!--      </span>-->\r\n<!--    </el-dialog>-->\r\n<!--  </div>-->\r\n<!--</template>-->\r\n\r\n<!--<script>-->\r\n<!--import request from \"@/utils/request\";-->\r\n<!--import md5 from \"js-md5\";-->\r\n\r\n<!--const API_MAP = {-->\r\n<!--  expireTime: \"/control/shortLink/deadTime\",-->\r\n<!--  allowNum: \"/control/shortLink/visitNum\",-->\r\n<!--  privateTarget: \"/control/shortLink/private\",-->\r\n<!--  password: \"/control/shortLink/changePwd\",-->\r\n<!--};-->\r\n\r\n<!--export default {-->\r\n<!--  name: \"ShortLinkList\",-->\r\n<!--  data() {-->\r\n<!--    return {-->\r\n<!--      pwdRules: {-->\r\n<!--        oldPassword: [-->\r\n<!--          { required: true, message: \"必须输入旧密码\", trigger: \"blur\" },-->\r\n<!--        ],-->\r\n<!--        newPassword: [-->\r\n<!--          { required: true, message: \"必须输入新密码\", trigger: \"blur\" },-->\r\n<!--          { min: 6, max: 20, message: \"密码长度6-20位\", trigger: \"blur\" },-->\r\n<!--        ],-->\r\n<!--      },-->\r\n<!--      activeDetail: null,-->\r\n<!--      originalData: null,-->\r\n<!--      detailRules: {-->\r\n<!--        allowNum: [{ type: \"number\", min: 0, message: \"不能小于0\" }],-->\r\n<!--        expireTime: [{ validator: this.validateExpireTime }],-->\r\n<!--        password: [-->\r\n<!--          {-->\r\n<!--            validator: (rule, value, callback) => {-->\r\n<!--              // 仅在启用私密时校验-->\r\n<!--              if (this.activeDetail.privateTarget && !value) {-->\r\n<!--                callback(new Error(\"启用私密必须设置密码\"));-->\r\n<!--              } else {-->\r\n<!--                callback();-->\r\n<!--              }-->\r\n<!--            },-->\r\n<!--            trigger: \"blur\",-->\r\n<!--          },-->\r\n<!--        ],-->\r\n<!--      },-->\r\n<!--      changePwdDialogVisible: false,-->\r\n<!--      pwdForm: {-->\r\n<!--        id: \"\",-->\r\n<!--        oldPassword: \"\",-->\r\n<!--        newPassword: \"\",-->\r\n<!--      },-->\r\n<!--      loading: false,-->\r\n<!--      tableData: [],-->\r\n<!--      total: 0,-->\r\n<!--      tagOptions: [],-->\r\n<!--      password: \"\",-->\r\n<!--      currentLink: null,-->\r\n<!--      passwordDialogVisible: false,-->\r\n<!--      queryParams: {-->\r\n<!--        pageNum: 1,-->\r\n<!--        pageSize: 10,-->\r\n<!--        keyword: \"\",-->\r\n<!--        tags: [],-->\r\n<!--        status: null,-->\r\n<!--      },-->\r\n<!--      statusOptions: [-->\r\n<!--        { value: 0, label: \"草稿\" },-->\r\n<!--        { value: 1, label: \"发布\" },-->\r\n<!--        { value: 2, label: \"禁用\" },-->\r\n<!--      ],-->\r\n<!--      statusMap: {-->\r\n<!--        0: { label: \"草稿\", type: \"info\" },-->\r\n<!--        1: { label: \"正常\", type: \"success\" },-->\r\n<!--        2: { label: \"禁用\", type: \"danger\" },-->\r\n<!--      },-->\r\n<!--    };-->\r\n<!--  },-->\r\n<!--  mounted() {-->\r\n<!--    this.fetchData();-->\r\n<!--    this.fetchTags();-->\r\n<!--  },-->\r\n<!--  methods: {-->\r\n<!--    // async fetchData() {-->\r\n<!--    //   this.loading = true;-->\r\n<!--    //   // 确保参数格式正确（多选标签转为逗号分隔）-->\r\n<!--    //   console.log(this.queryParams.pageNum, this.queryParams.pageSize);-->\r\n<!--    //   let params = {-->\r\n<!--    //     pageNum: this.queryParams.pageNum,-->\r\n<!--    //     pageSize: this.queryParams.pageSize,-->\r\n<!--    //   };-->\r\n<!--    //   if (this.queryParams.keyword) params.keyword = this.queryParams.keyword;-->\r\n<!--    //   if (this.queryParams.status) params.status = this.queryParams.status;-->\r\n<!--    //   // params = {-->\r\n<!--    //   //   tags: this.queryParams.tags,-->\r\n<!--    //   // };-->\r\n<!--    //   request-->\r\n<!--    //     .get(\"/shortLink/list\", { ...params })-->\r\n<!--    //     .then((res) => {-->\r\n<!--    //       if (res.code === 200) {-->\r\n<!--    //         console.log(\"请求参数:\", { ...params });-->\r\n<!--    //         console.log(\"接口返回res:\", res);-->\r\n<!--    //         this.tableData = res.data.list;-->\r\n<!--    //         this.total = res.data.total || 0;-->\r\n<!--    //       }-->\r\n<!--    //     })-->\r\n<!--    //     .catch((error) => {-->\r\n<!--    //       this.$message.error(\"加载失败\");-->\r\n<!--    //     })-->\r\n<!--    //     .finally(() => {-->\r\n<!--    //       this.loading = false;-->\r\n<!--    //     });-->\r\n<!--    // },-->\r\n<!--    async fetchData() {-->\r\n<!--      try {-->\r\n<!--        this.loading = true;-->\r\n\r\n<!--        // 构造请求参数-->\r\n<!--        const params = {-->\r\n<!--          pageNum: this.queryParams.pageNum,-->\r\n<!--          pageSize: this.queryParams.pageSize,-->\r\n<!--          keyword: this.queryParams.keyword || undefined, // 空值不传-->\r\n<!--          status: this.queryParams.status || undefined, // 空值不传-->\r\n<!--          tags: this.queryParams.tags?.length-->\r\n<!--            ? this.queryParams.tags.join(\",\")-->\r\n<!--            : undefined,-->\r\n<!--        };-->\r\n\r\n<!--        // 移除值为undefined的参数-->\r\n<!--        const filteredParams = Object.fromEntries(-->\r\n<!--          Object.entries(params).filter(([_, value]) => value !== undefined)-->\r\n<!--        );-->\r\n\r\n<!--        const res = await request.get(\"/shortLink/list\", {-->\r\n<!--          params: filteredParams, // 正确传递GET参数-->\r\n<!--        });-->\r\n\r\n<!--        if (res.code === 200) {-->\r\n<!--          console.log(\"list:\", res);-->\r\n<!--          this.tableData = res.data.list || [];-->\r\n<!--          this.total = res.data.total || 0;-->\r\n<!--        } else {-->\r\n<!--          // 处理业务逻辑错误-->\r\n<!--          this.$message.error(res.msg || \"获取数据失败\");-->\r\n<!--        }-->\r\n<!--      } catch (error) {-->\r\n<!--        // 拦截器已经处理了401/40005等错误，这里处理其他错误-->\r\n<!--        console.error(\"请求异常:\", error);-->\r\n<!--        if (!error.response) {-->\r\n<!--          this.$message.error(\"网络错误，请检查连接\");-->\r\n<!--        }-->\r\n<!--        // 其他错误消息已在拦截器中显示-->\r\n<!--      } finally {-->\r\n<!--        this.loading = false;-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    // async fetchTags() {-->\r\n<!--    //   try {-->\r\n<!--    //     const res = await request.get(\"/tag/get\");-->\r\n<!--    //     // 处理可能的空值-->\r\n<!--    //     if (res && res.data) {-->\r\n<!--    //       this.tagOptions = res.data.data || [];-->\r\n<!--    //     } else {-->\r\n<!--    //       this.tagOptions = [];-->\r\n<!--    //       console.error(\"标签接口返回数据异常:\", res);-->\r\n<!--    //     }-->\r\n<!--    //   } catch (error) {-->\r\n<!--    //     console.error(\"获取标签失败:\", error);-->\r\n<!--    //     this.tagOptions = [];-->\r\n<!--    //   }-->\r\n<!--    // },-->\r\n\r\n<!--    async fetchTags() {-->\r\n<!--      try {-->\r\n<!--        const res = await request.get(\"/tag/get\");-->\r\n<!--        if (res.code === 200) {-->\r\n<!--          this.tagOptions = res.data || [];-->\r\n\r\n<!--          console.log(this.tagList);-->\r\n<!--        } else {-->\r\n<!--          this.$message.error(res.msg || \"获取标签失败\");-->\r\n<!--          this.tagOptions = [];-->\r\n<!--        }-->\r\n<!--      } catch (error) {-->\r\n<!--        console.error(\"获取标签失败:\", error);-->\r\n<!--        this.$message.error(\"获取标签失败，请检查网络连接\");-->\r\n<!--        this.tagOptions = [];-->\r\n<!--      }-->\r\n<!--    },-->\r\n\r\n<!--    async handleDelete(id) {-->\r\n<!--      try {-->\r\n<!--        await request.delete(`/delete/shortLink/${id}`, {-->\r\n<!--          headers: { accessToken: localStorage.getItem(\"accessToken\") },-->\r\n<!--        });-->\r\n<!--        this.$message.success(\"删除成功\");-->\r\n\r\n<!--        // 删除后检查当前页是否为空-->\r\n<!--        if (this.tableData.length === 1 && this.queryParams.pageNum > 1) {-->\r\n<!--          this.queryParams.pageNum -= 1;-->\r\n<!--        }-->\r\n<!--        await this.fetchData();-->\r\n<!--      } catch (error) {-->\r\n<!--        this.$message.error(\"删除失败\");-->\r\n<!--      }-->\r\n<!--    },-->\r\n\r\n<!--    // handleLinkClick(row) {-->\r\n<!--    //   if (row.hasPassword) {-->\r\n<!--    //     this.currentLink = row;-->\r\n<!--    //     this.passwordDialogVisible = true;-->\r\n<!--    //   } else {-->\r\n<!--    //     this.accessLink(row.fullShortUrl);-->\r\n<!--    //   }-->\r\n<!--    // },-->\r\n<!--    // handleLinkClick(row) {-->\r\n<!--    //   if (row.hasPassword) {-->\r\n<!--    //     this.currentLink = row;-->\r\n<!--    //     this.passwordDialogVisible = true;-->\r\n<!--    //   } else {-->\r\n<!--    //     this.accessLink(row.fullShortUrl);-->\r\n<!--    //   }-->\r\n<!--    // },-->\r\n<!--    handleLinkClick(row) {-->\r\n<!--      // 直接跳转到/sparrow/{shortLink}路由-->\r\n<!--      // 由RedirectPage组件处理是否需要密码-->\r\n<!--      this.$router.push({-->\r\n<!--        name: \"Redirect\",-->\r\n<!--        params: { shortLink: row.shortUrl },-->\r\n<!--      });-->\r\n<!--    },-->\r\n\r\n<!--    async verifyPassword() {-->\r\n<!--      console.log(this.currentLink.shortUrl);-->\r\n<!--      console.log(this.password);-->\r\n<!--      try {-->\r\n<!--        const res = await request.post(\"/shortLink/verifyPassword\", {-->\r\n<!--          shortLink: this.currentLink.shortUrl,-->\r\n<!--          password: this.password,-->\r\n<!--        });-->\r\n\r\n<!--        console.log(res);-->\r\n\r\n<!--        if (res.code === 200) {-->\r\n<!--          this.accessLink(this.currentLink.fullShortUrl);-->\r\n<!--          this.passwordDialogVisible = false;-->\r\n<!--        } else {-->\r\n<!--          this.$message.error(\"密码错误\");-->\r\n<!--        }-->\r\n<!--      } catch (error) {-->\r\n<!--        this.$message.error(\"验证失败\");-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    -->\r\n<!--    accessLink(fullShortUrl) {-->\r\n<!--      // 立即跳转（不等待统计结果）-->\r\n<!--      window.open(fullShortUrl, \"_blank\");-->\r\n\r\n<!--      // 异步发送统计请求（不阻塞跳转）-->\r\n<!--      const shortUrl = fullShortUrl.split(\"/\").pop();-->\r\n<!--      const res = request-->\r\n<!--        .get(`/sparrow/${shortUrl}`, {-->\r\n<!--          headers: { accessToken: localStorage.getItem(\"accessToken\") },-->\r\n<!--        })-->\r\n<!--        .catch((error) => {-->\r\n<!--          console.error(\"统计失败（不影响跳转）:\", error);-->\r\n<!--        });-->\r\n\r\n<!--      console.log(\"res:\", res);-->\r\n<!--    },-->\r\n\r\n<!--    // 显示详情-->\r\n<!--    handleShowDetail(row) {-->\r\n<!--      this.activeDetail = { ...row }; // 克隆行数据-->\r\n<!--      console.log(this.activeDetail);-->\r\n<!--    },-->\r\n\r\n<!--    // 保存修改-->\r\n<!--    async saveDetail() {-->\r\n<!--      try {-->\r\n<!--        await this.$refs.detailForm.validate();-->\r\n<!--        const originalData = this.tableData.find(-->\r\n<!--          (item) => item.id === this.activeDetail.id-->\r\n<!--        );-->\r\n<!--        const changedFields = this.getChangedFields(originalData);-->\r\n\r\n<!--        // 批量调用接口-->\r\n<!--        const requests = changedFields.map((field) =>-->\r\n<!--          this.callSpecificApi(field)-->\r\n<!--        );-->\r\n<!--        await Promise.all(requests);-->\r\n\r\n<!--        this.$message.success(\"保存成功\");-->\r\n<!--        await this.fetchData();-->\r\n<!--      } catch (error) {-->\r\n<!--        this.$message.error(`保存失败: ${error.message}`);-->\r\n<!--      }-->\r\n<!--    },-->\r\n\r\n<!--    // getChangedFields(original) {-->\r\n<!--    //   let fields = Object.keys(API_MAP).filter(key =>-->\r\n<!--    //       JSON.stringify(this.activeDetail[key]) !== JSON.stringify(original[key])-->\r\n<!--    //   );-->\r\n<!--    //-->\r\n<!--    //   // 排除密码单独修改的情况-->\r\n<!--    //   if (fields.includes('password')) {-->\r\n<!--    //     fields = fields.filter(f => f !== 'privateTarget');-->\r\n<!--    //   }-->\r\n<!--    //   return fields;-->\r\n<!--    // },-->\r\n<!--    getChangedFields(original) {-->\r\n<!--      // 只检测以下字段变化-->\r\n<!--      const compareFields = [\"expireTime\", \"allowNum\", \"privateTarget\"];-->\r\n<!--      return compareFields.filter(-->\r\n<!--        (key) => this.activeDetail[key] !== original[key]-->\r\n<!--      );-->\r\n<!--    },-->\r\n\r\n<!--    async callSpecificApi(field) {-->\r\n<!--      const apiPath = API_MAP[field];-->\r\n<!--      const params = this.buildParamsByField(field);-->\r\n<!--      const res = await request.put(apiPath, params);-->\r\n\r\n<!--      if (res.code !== 200) throw new Error(res.msg || \"接口异常\");-->\r\n<!--    },-->\r\n\r\n<!--    // 在 methods 中添加以下方法-->\r\n<!--    buildParamsByField(field) {-->\r\n<!--      const baseParams = { id: this.activeDetail.id };-->\r\n\r\n<!--      switch (field) {-->\r\n<!--        // 过期时间-->\r\n<!--        case \"expireTime\":-->\r\n<!--          return {-->\r\n<!--            ...baseParams,-->\r\n<!--            expireTime: this.activeDetail.expireTime,-->\r\n<!--          };-->\r\n\r\n<!--        // 访问次数-->\r\n<!--        case \"allowNum\":-->\r\n<!--          return {-->\r\n<!--            ...baseParams,-->\r\n<!--            allowNum: this.activeDetail.allowNum,-->\r\n<!--          };-->\r\n\r\n<!--        // 私密状态（需校验密码）-->\r\n<!--        case \"privateTarget\":-->\r\n<!--          if (this.activeDetail.privateTarget) {-->\r\n<!--            if (!this.activeDetail.password) {-->\r\n<!--              throw new Error(\"启用私密必须设置密码\");-->\r\n<!--            }-->\r\n<!--            if (-->\r\n<!--              this.activeDetail.password.length < 4 ||-->\r\n<!--              this.activeDetail.password.length > 12-->\r\n<!--            ) {-->\r\n<!--              // ✅ 添加长度校验-->\r\n<!--              throw new Error(\"请输入4-12位密码\");-->\r\n<!--            }-->\r\n<!--          }-->\r\n<!--          return {-->\r\n<!--            ...baseParams,-->\r\n<!--            privateTarget: this.activeDetail.privateTarget,-->\r\n<!--            password: md5(this.activeDetail.password), // 新密码直接加密-->\r\n<!--          };-->\r\n\r\n<!--        // 密码修改（参数名转换 newPassword）-->\r\n<!--        // case 'password':-->\r\n<!--        //   if (this.activeDetail.password.length < 6) {-->\r\n<!--        //     throw new Error('密码至少6位');-->\r\n<!--        //   }-->\r\n<!--        //   return {-->\r\n<!--        //     ...baseParams,-->\r\n<!--        //     oldPassword: md5(this.oldPassword),      // 新增旧密码字段-->\r\n<!--        //     newPassword: md5(this.activeDetail.password)-->\r\n<!--        //   };-->\r\n\r\n<!--        default:-->\r\n<!--          throw new Error(\"未知字段类型\");-->\r\n<!--      }-->\r\n<!--    },-->\r\n\r\n<!--    openChangePasswordDialog(row) {-->\r\n<!--      if (!row.hasPassword) {-->\r\n<!--        this.$message.error(\"该短链未设置密码\");-->\r\n<!--        return;-->\r\n<!--      }-->\r\n<!--      this.pwdForm.id = row.id;-->\r\n<!--      this.changePwdDialogVisible = true;-->\r\n<!--    },-->\r\n\r\n<!--    async handleChangePassword() {-->\r\n<!--      try {-->\r\n<!--        console.log(this.pwdForm.oldPassword);-->\r\n<!--        console.log(this.pwdForm.newPassword);-->\r\n<!--        const res = await request.put(\"/control/shortLink/changePwd\", {-->\r\n<!--          id: this.pwdForm.id,-->\r\n<!--          password: md5(this.pwdForm.oldPassword),-->\r\n<!--          newPassword: md5(this.pwdForm.newPassword),-->\r\n<!--        });-->\r\n\r\n<!--        if (res.code === 200) {-->\r\n<!--          this.$message.success(\"密码修改成功\");-->\r\n<!--          this.changePwdDialogVisible = false;-->\r\n<!--          await this.fetchData();-->\r\n<!--        } else {-->\r\n<!--          this.$message.error(res.msg);-->\r\n<!--        }-->\r\n<!--      } catch (error) {-->\r\n<!--        this.$message.error(\"修改失败: \" + error.response?.data?.msg);-->\r\n<!--      }-->\r\n<!--    },-->\r\n\r\n<!--    // 重置修改-->\r\n<!--    resetDetail() {-->\r\n<!--      this.activeDetail = {-->\r\n<!--        ...this.tableData.find((item) => item.id === this.activeDetail.id),-->\r\n<!--      };-->\r\n<!--    },-->\r\n\r\n<!--    handleSizeChange(val) {-->\r\n<!--      this.queryParams.pageSize = val;-->\r\n<!--      this.queryParams.pageNum = 1;-->\r\n<!--      this.fetchData();-->\r\n<!--    },-->\r\n\r\n<!--    handleCurrentChange(val) {-->\r\n<!--      this.queryParams.pageNum = val;-->\r\n<!--      this.fetchData();-->\r\n<!--    },-->\r\n\r\n<!--    resetQuery() {-->\r\n<!--      this.queryParams = {-->\r\n<!--        pageNum: 1,-->\r\n<!--        pageSize: 10,-->\r\n<!--        keyword: \"\",-->\r\n<!--        tags: [],-->\r\n<!--        status: null,-->\r\n<!--      };-->\r\n<!--      this.fetchData();-->\r\n<!--    },-->\r\n<!--  },-->\r\n<!--};-->\r\n<!--</script>-->\r\n\r\n<!--<style scoped>-->\r\n<!--.filter-bar {-->\r\n<!--  display: flex;-->\r\n<!--  gap: 10px;-->\r\n<!--  margin-bottom: 20px;-->\r\n<!--}-->\r\n\r\n<!--.link-tag {-->\r\n<!--  margin-left: 8px;-->\r\n<!--  transform: translateY(-2px);-->\r\n<!--}-->\r\n\r\n<!--.tag-item {-->\r\n<!--  margin: 2px;-->\r\n<!--}-->\r\n\r\n<!--.data-table {-->\r\n<!--  margin: 20px 0;-->\r\n<!--}-->\r\n\r\n<!--.pagination {-->\r\n<!--  margin-top: 20px;-->\r\n<!--  justify-content: flex-end;-->\r\n<!--}-->\r\n\r\n<!--.modal-mask {-->\r\n<!--  position: fixed;-->\r\n<!--  top: 0;-->\r\n<!--  left: 0;-->\r\n<!--  right: 0;-->\r\n<!--  bottom: 0;-->\r\n<!--  background: rgba(0, 0, 0, 0.5); /* 半透明黑色 */-->\r\n<!--  z-index: 99; /* 比卡片低一级 */-->\r\n<!--  transition: opacity 0.3s ease;-->\r\n<!--}-->\r\n\r\n<!--.detail-card {-->\r\n<!--  position: fixed; /* 改为fixed定位 */-->\r\n<!--  top: 50%;-->\r\n<!--  left: 50%;-->\r\n<!--  transform: translate(-50%, -50%);-->\r\n<!--  width: 50%;-->\r\n<!--  max-height: 80vh;-->\r\n<!--  overflow-y: auto;-->\r\n<!--  background: #fff;-->\r\n<!--  z-index: 100;-->\r\n<!--  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.3);-->\r\n<!--  border-radius: 4px;-->\r\n<!--}-->\r\n\r\n<!--.detail-header {-->\r\n<!--  display: flex;-->\r\n<!--  justify-content: space-between;-->\r\n<!--  align-items: center;-->\r\n<!--  margin-bottom: 20px;-->\r\n<!--}-->\r\n\r\n<!--.action-btns {-->\r\n<!--  text-align: center;-->\r\n<!--  margin-top: 20px;-->\r\n<!--}-->\r\n<!--</style>-->\r\n\r\n<template>\r\n  <div class=\"list-container\">\r\n    <!-- 搜索和过滤区 -->\r\n    <div class=\"filter-bar\">\r\n      <el-input\r\n        v-model=\"queryParams.keyword\"\r\n        placeholder=\"输入标题/长链/短链\"\r\n        clearable\r\n        class=\"search-input\"\r\n        @keyup.enter=\"fetchData\"\r\n      >\r\n        <template #prefix>\r\n          <i class=\"el-icon-search\"></i>\r\n        </template>\r\n      </el-input>\r\n\r\n      <el-select\r\n        v-model=\"queryParams.tags\"\r\n        multiple\r\n        filterable\r\n        placeholder=\"选择标签\"\r\n        style=\"width: 240px\"\r\n      >\r\n        <el-option\r\n          v-for=\"tag in tagOptions\"\r\n          :key=\"tag.id\"\r\n          :label=\"tag.name\"\r\n          :value=\"tag.id\"\r\n        />\r\n      </el-select>\r\n\r\n      <el-select\r\n        v-model=\"queryParams.status\"\r\n        placeholder=\"选择状态\"\r\n        clearable\r\n        style=\"width: 120px\"\r\n      >\r\n        <el-option\r\n          v-for=\"item in statusOptions\"\r\n          :key=\"item.value\"\r\n          :label=\"item.label\"\r\n          :value=\"item.value\"\r\n        />\r\n      </el-select>\r\n\r\n      <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"fetchData\"\r\n        >查询</el-button\r\n      >\r\n\r\n      <el-button icon=\"el-icon-refresh\" @click=\"resetQuery\">重置</el-button>\r\n    </div>\r\n\r\n    <!-- 数据表格 -->\r\n    <el-table\r\n      :data=\"tableData\"\r\n      stripe\r\n      border\r\n      v-loading=\"loading\"\r\n      element-loading-text=\"加载中...\"\r\n      class=\"data-table\"\r\n    >\r\n      <el-table-column prop=\"title\" label=\"标题\" min-width=\"150\" />\r\n\r\n      <el-table-column prop=\"fullShortUrl\" label=\"短链\" width=\"220\">\r\n        <template #default=\"{ row }\">\r\n          <el-tooltip\r\n            effect=\"dark\"\r\n            :content=\"`点击次数: ${row.visits} | 独立IP: ${row.ipNum}`\"\r\n            placement=\"top\"\r\n          >\r\n            <!--            <el-link-->\r\n            <!--                type=\"primary\"-->\r\n            <!--                :underline=\"false\"-->\r\n            <!--                @click=\"accessLink(row)\"-->\r\n            <!--            >{{ row.fullShortUrl }}</el-link>-->\r\n\r\n            <el-link\r\n              type=\"primary\"\r\n              :underline=\"false\"\r\n              :href=\"`${row.fullShortUrl}`\"\r\n              target=\"_blank\"\r\n              >{{ row.fullShortUrl }}</el-link\r\n            >\r\n          </el-tooltip>\r\n          <el-tag\r\n            v-if=\"row.hasPassword\"\r\n            size=\"mini\"\r\n            type=\"danger\"\r\n            effect=\"dark\"\r\n            class=\"link-tag\"\r\n            >加密</el-tag\r\n          >\r\n          <el-tag\r\n            v-if=\"row.privateTarget\"\r\n            size=\"mini\"\r\n            type=\"warning\"\r\n            effect=\"dark\"\r\n            class=\"link-tag\"\r\n            >私有</el-tag\r\n          >\r\n        </template>\r\n      </el-table-column>\r\n\r\n      <el-table-column label=\"标签\" width=\"180\">\r\n        <template #default=\"{ row }\">\r\n          <el-tag\r\n            v-for=\"tag in row.tags\"\r\n            :key=\"tag\"\r\n            size=\"mini\"\r\n            class=\"tag-item\"\r\n            >{{ tag }}</el-tag\r\n          >\r\n        </template>\r\n      </el-table-column>\r\n\r\n      <el-table-column\r\n        prop=\"longUrl\"\r\n        label=\"原始链接\"\r\n        min-width=\"280\"\r\n        show-overflow-tooltip\r\n      />\r\n\r\n      <el-table-column label=\"状态\" width=\"100\">\r\n        <template #default=\"{ row }\">\r\n          <el-tag :type=\"statusMap[row.status].type\" size=\"small\">{{\r\n            statusMap[row.status].label\r\n          }}</el-tag>\r\n        </template>\r\n      </el-table-column>\r\n\r\n      <el-table-column label=\"操作\" width=\"280\" fixed=\"right\">\r\n        <template #default=\"{ row }\">\r\n          <el-button type=\"primary\" size=\"mini\" @click=\"handleShowDetail(row)\"\r\n            >详情</el-button\r\n          >\r\n\r\n          <el-button\r\n            type=\"primary\"\r\n            size=\"mini\"\r\n            :disabled=\"!row.hasPassword\"\r\n            @click=\"openChangePasswordDialog(row)\"\r\n            >修改密码</el-button\r\n          >\r\n\r\n          <el-popconfirm\r\n            title=\"确认删除该短链吗？\"\r\n            @confirm=\"handleDelete(row.id)\"\r\n          >\r\n            <template #reference>\r\n              <el-button type=\"danger\" size=\"mini\" style=\"margin-left: 10px\"\r\n                >删除</el-button\r\n              >\r\n            </template>\r\n          </el-popconfirm>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 遮罩层 -->\r\n    <div\r\n      class=\"modal-mask\"\r\n      v-if=\"activeDetail\"\r\n      @click.self=\"activeDetail = null\"\r\n    ></div>\r\n\r\n    <!-- 短链详情卡片 -->\r\n    <transition name=\"el-zoom-in-top\">\r\n      <el-card v-if=\"activeDetail\" class=\"detail-card\" style=\"margin-top: 20px\">\r\n        <div class=\"detail-header\">\r\n          <h3>短链详情（title: {{ activeDetail.title }}）</h3>\r\n          <el-button\r\n            icon=\"el-icon-close\"\r\n            circle\r\n            @click=\"activeDetail = null\"\r\n            class=\"close-btn\"\r\n          />\r\n        </div>\r\n\r\n        <!-- 集成LinkDetail的核心表单 -->\r\n        <el-form\r\n          :model=\"activeDetail\"\r\n          :rules=\"detailRules\"\r\n          ref=\"detailForm\"\r\n          label-width=\"120px\"\r\n        >\r\n          <el-form-item label=\"允许访问次数\" prop=\"allowNum\">\r\n            <el-input-number\r\n              v-model=\"activeDetail.allowNum\"\r\n              :min=\"0\"\r\n              controls-position=\"right\"\r\n            />\r\n          </el-form-item>\r\n\r\n          <el-form-item label=\"过期时间\">\r\n            <el-date-picker\r\n              v-model=\"activeDetail.expireTime\"\r\n              type=\"datetime\"\r\n              value-format=\"yyyy-MM-dd HH:mm:ss\"\r\n              format=\"yyyy-MM-dd HH:mm:ss\"\r\n              placeholder=\"选择过期时间\"\r\n              clearable\r\n              style=\"width: 100%\"\r\n            />\r\n          </el-form-item>\r\n\r\n          <el-form-item label=\"私密链接\">\r\n            <el-switch v-model=\"activeDetail.privateTarget\" />\r\n          </el-form-item>\r\n\r\n          <el-form-item v-if=\"activeDetail.privateTarget\" label=\"设置密码\">\r\n            <el-input\r\n              v-model=\"activeDetail.password\"\r\n              :disabled=\"activeDetail.hasPassword\"\r\n              type=\"password\"\r\n              show-password\r\n              placeholder=\"设置访问密码\"\r\n            />\r\n          </el-form-item>\r\n        </el-form>\r\n\r\n        <!-- 操作按钮 -->\r\n        <div class=\"action-btns\">\r\n          <el-button type=\"primary\" @click=\"saveDetail\">保存</el-button>\r\n          <el-button @click=\"resetDetail\">重置</el-button>\r\n        </div>\r\n      </el-card>\r\n    </transition>\r\n\r\n    <!-- 分页组件 -->\r\n    <el-pagination\r\n      background\r\n      :current-page=\"queryParams.pageNum\"\r\n      :page-sizes=\"[10, 20, 50, 100]\"\r\n      :page-size=\"queryParams.pageSize\"\r\n      :total=\"total\"\r\n      layout=\"total, sizes, prev, pager, next, jumper\"\r\n      @size-change=\"handleSizeChange\"\r\n      @current-change=\"handleCurrentChange\"\r\n      class=\"pagination\"\r\n    />\r\n\r\n    <!--    &lt;!&ndash; 密码验证对话框 &ndash;&gt;-->\r\n    <!--    <el-dialog-->\r\n    <!--        title=\"访问验证\"-->\r\n    <!--        :visible.sync=\"passwordDialogVisible\"-->\r\n    <!--        width=\"30%\"-->\r\n    <!--    >-->\r\n    <!--      <el-input-->\r\n    <!--          v-model=\"password\"-->\r\n    <!--          type=\"password\"-->\r\n    <!--          placeholder=\"请输入访问密码\"-->\r\n    <!--          show-password-->\r\n    <!--          @keyup.enter=\"verifyPassword\"-->\r\n    <!--      />-->\r\n    <!--      <span slot=\"footer\">-->\r\n    <!--        <el-button @click=\"passwordDialogVisible = false\">取消</el-button>-->\r\n    <!--        <el-button type=\"primary\" @click=\"verifyPassword\">确认</el-button>-->\r\n    <!--      </span>-->\r\n    <!--    </el-dialog>-->\r\n\r\n    <el-dialog\r\n      title=\"修改密码\"\r\n      :visible.sync=\"changePwdDialogVisible\"\r\n      width=\"400px\"\r\n    >\r\n      <el-form :model=\"pwdForm\" :rules=\"pwdRules\" ref=\"pwdFormRef\">\r\n        <el-form-item label=\"旧密码\" prop=\"oldPassword\">\r\n          <el-input\r\n            v-model=\"pwdForm.oldPassword\"\r\n            type=\"password\"\r\n            show-password\r\n            placeholder=\"请输入原密码\"\r\n          />\r\n        </el-form-item>\r\n        <el-form-item label=\"新密码\" prop=\"newPassword\">\r\n          <el-input\r\n            v-model=\"pwdForm.newPassword\"\r\n            type=\"password\"\r\n            show-password\r\n            placeholder=\"6-20位字符\"\r\n          />\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\">\r\n        <el-button @click=\"changePwdDialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"handleChangePassword\"\r\n          >确认修改</el-button\r\n        >\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport request from \"@/utils/request\";\r\n\r\nconst API_MAP = {\r\n  expireTime: \"/control/shortLink/deadTime\",\r\n  allowNum: \"/control/shortLink/visitNum\",\r\n  privateTarget: \"/control/shortLink/private\",\r\n  password: \"/control/shortLink/changePwd\",\r\n};\r\n\r\nexport default {\r\n  name: \"ShortLinkList\",\r\n  data() {\r\n    return {\r\n      pwdRules: {\r\n        oldPassword: [\r\n          { required: true, message: \"必须输入旧密码\", trigger: \"blur\" },\r\n        ],\r\n        newPassword: [\r\n          { required: true, message: \"必须输入新密码\", trigger: \"blur\" },\r\n          { min: 6, max: 20, message: \"密码长度6-20位\", trigger: \"blur\" },\r\n        ],\r\n      },\r\n      activeDetail: null,\r\n      originalData: null,\r\n      detailRules: {\r\n        allowNum: [{ type: \"number\", min: 0, message: \"不能小于0\" }],\r\n        expireTime: [{ validator: this.validateExpireTime }],\r\n        password: [\r\n          {\r\n            validator: (rule, value, callback) => {\r\n              // 仅在启用私密时校验\r\n              if (this.activeDetail.privateTarget && !value) {\r\n                callback(new Error(\"启用私密必须设置密码\"));\r\n              } else {\r\n                callback();\r\n              }\r\n            },\r\n            trigger: \"blur\",\r\n          },\r\n        ],\r\n      },\r\n      changePwdDialogVisible: false,\r\n      pwdForm: {\r\n        id: \"\",\r\n        oldPassword: \"\",\r\n        newPassword: \"\",\r\n      },\r\n      loading: false,\r\n      tableData: [],\r\n      total: 0,\r\n      tagOptions: [],\r\n      // password: \"\",\r\n      // currentLink: null,\r\n      // passwordDialogVisible: false,\r\n      queryParams: {\r\n        pageNum: 1,\r\n        pageSize: 10,\r\n        keyword: \"\",\r\n        tags: [],\r\n        status: null,\r\n      },\r\n      statusOptions: [\r\n        { value: 0, label: \"草稿\" },\r\n        { value: 1, label: \"发布\" },\r\n        { value: 2, label: \"禁用\" },\r\n      ],\r\n      statusMap: {\r\n        0: { label: \"草稿\", type: \"info\" },\r\n        1: { label: \"正常\", type: \"success\" },\r\n        2: { label: \"禁用\", type: \"danger\" },\r\n      },\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchData();\r\n    this.fetchTags();\r\n  },\r\n  methods: {\r\n    async fetchData() {\r\n      try {\r\n        this.loading = true;\r\n\r\n        // 构造请求参数\r\n        const params = {\r\n          pageNum: this.queryParams.pageNum,\r\n          pageSize: this.queryParams.pageSize,\r\n          keyword: this.queryParams.keyword || undefined, // 空值不传\r\n          status: this.queryParams.status || undefined, // 空值不传\r\n          tags: this.queryParams.tags?.length\r\n            ? this.queryParams.tags.join(\",\")\r\n            : undefined,\r\n        };\r\n\r\n        // 移除值为undefined的参数\r\n        const filteredParams = Object.fromEntries(\r\n          Object.entries(params).filter(([_, value]) => value !== undefined)\r\n        );\r\n\r\n        const res = await request.get(\"/shortLink/list\", {\r\n          params: filteredParams, // 正确传递GET参数\r\n        });\r\n\r\n        if (res.code === 200) {\r\n          this.tableData = res.data.list || [];\r\n          this.total = res.data.total || 0;\r\n        } else {\r\n          // 处理业务逻辑错误\r\n          this.$message.error(res.msg || \"获取数据失败\");\r\n        }\r\n      } catch (error) {\r\n        // 拦截器已经处理了401/40005等错误，这里处理其他错误\r\n        console.error(\"请求异常:\", error);\r\n        if (!error.response) {\r\n          this.$message.error(\"网络错误，请检查连接\");\r\n        }\r\n        // 其他错误消息已在拦截器中显示\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n\r\n    async fetchTags() {\r\n      try {\r\n        const res = await request.get(\"/tag/get\");\r\n        if (res.code === 200) {\r\n          this.tagOptions = res.data || [];\r\n\r\n          console.log(this.tagList);\r\n        } else {\r\n          this.$message.error(res.msg || \"获取标签失败\");\r\n          this.tagOptions = [];\r\n        }\r\n      } catch (error) {\r\n        console.error(\"获取标签失败:\", error);\r\n        this.$message.error(\"获取标签失败，请检查网络连接\");\r\n        this.tagOptions = [];\r\n      }\r\n    },\r\n\r\n    async handleDelete(id) {\r\n      try {\r\n        await request.delete(`/delete/shortLink/${id}`, {\r\n          headers: { accessToken: localStorage.getItem(\"accessToken\") },\r\n        });\r\n        this.$message.success(\"删除成功\");\r\n\r\n        // 删除后检查当前页是否为空\r\n        if (this.tableData.length === 1 && this.queryParams.pageNum > 1) {\r\n          this.queryParams.pageNum -= 1;\r\n        }\r\n        await this.fetchData();\r\n      } catch (error) {\r\n        this.$message.error(\"删除失败\");\r\n      }\r\n    },\r\n\r\n    async accessLink(row) {\r\n      try {\r\n        // // 创建新窗口避免被浏览器拦截\r\n        // const newWindow = window.open('', '_blank');\r\n        console.log(\"row:\", row);\r\n\r\n        // 调用后端接口进行跳转\r\n        const response = await request.post(\r\n          \"/shortLink/verifyPassword\",\r\n          {\r\n            shortLink: row.shortLink,\r\n            password: row.password, // 传递空密码由后端处理\r\n          },\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\r\n            },\r\n          }\r\n        );\r\n\r\n        // 处理重定向\r\n        if (response.data.code === 200) {\r\n          // 显示倒计时界面\r\n          this.showRedirectPage(newWindow, response.data.data);\r\n\r\n          // 发送统计请求（不阻塞主流程）\r\n          this.sendStatistics(row.shortLink);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"跳转失败:\", error);\r\n        this.$message.error(\"链接打开失败\");\r\n      }\r\n    },\r\n\r\n    // 显示重定向页面\r\n    showRedirectPage(newWindow, targetUrl) {\r\n      let seconds = 5;\r\n\r\n      const htmlContent = `\r\n        <div style=\"padding: 20px; text-align: center\">\r\n          <h3>正在跳转...</h3>\r\n          <p>将在 <span id=\"countdown\">5</span> 秒后自动跳转</p>\r\n          <p>或 <a href=\"${targetUrl}\" style=\"color: blue\">立即跳转</a></p>\r\n        </div>\r\n      `;\r\n\r\n      newWindow.document.write(htmlContent);\r\n\r\n      // 倒计时逻辑\r\n      const timer = setInterval(() => {\r\n        seconds--;\r\n        newWindow.document.getElementById(\"countdown\").textContent = seconds;\r\n\r\n        if (seconds <= 0) {\r\n          clearInterval(timer);\r\n          newWindow.location.href = targetUrl;\r\n        }\r\n      }, 1000);\r\n\r\n      // 立即跳转处理\r\n      newWindow.document.querySelector(\"a\").addEventListener(\"click\", (e) => {\r\n        e.preventDefault();\r\n        newWindow.location.href = targetUrl;\r\n      });\r\n    },\r\n    // 发送统计请求\r\n    async sendStatistics(shortLink) {\r\n      try {\r\n        await request.get(`/sparrow/${shortLink}`);\r\n      } catch (error) {\r\n        console.error(\"统计请求失败:\", error);\r\n      }\r\n    },\r\n\r\n    // async verifyPassword() {\r\n    //   console.log(this.currentLink.shortUrl)\r\n    //   console.log(this.password)\r\n    //   try {\r\n    //     const res = await request.post(\"/shortLink/verifyPassword\", requestData,{\r\n    //       headers: {\r\n    //         'Content-Type': 'application/json',\r\n    //         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\r\n    //       }});\r\n    //\r\n    //     console.log(res)\r\n    //\r\n    //     if (res.code === 200 && res.data) {\r\n    //       // 成功处理\r\n    //       this.$message.success('密码验证成功');\r\n    //       this.passwordDialogVisible = false;\r\n    //\r\n    //       // 跳转逻辑\r\n    //       this.handleRedirect(res.data);\r\n    //     } else {\r\n    //       throw new Error(res.msg || '验证失败');\r\n    //     }\r\n    //   } catch (error) {\r\n    //     // 错误处理\r\n    //     let errorMsg = '验证失败';\r\n    //     if (error.response) {\r\n    //       errorMsg = `服务器错误: ${error.response.status}`;\r\n    //     } else if (error.message.includes('Network Error')) {\r\n    //       errorMsg = '网络连接异常';\r\n    //     }\r\n    //     this.$message.error(errorMsg);\r\n    //     console.error('验证错误:', error);\r\n    //   }\r\n    // },\r\n\r\n    // async verifyPassword() {\r\n    //   try {\r\n    //     const requestData = {\r\n    //       shortLink: this.currentLink.shortLink,\r\n    //       password: this.password\r\n    //     };\r\n    //\r\n    //     const res = await request.post(\"/shortLink/verifyPassword\", requestData);\r\n    //\r\n    //     if (res.code === 200 && res.data) {\r\n    //       // this.$message.success('密码验证成功');\r\n    //       // this.passwordDialogVisible = false;\r\n    //       this.handleRedirect(res.data, this.currentLink);\r\n    //     } else {\r\n    //       throw new Error(res.msg || '验证失败');\r\n    //     }\r\n    //   } catch (error) {\r\n    //     let errorMsg = '验证失败';\r\n    //     if (error.response) {\r\n    //       errorMsg = `服务器错误: ${error.response.status}`;\r\n    //     } else if (error.message.includes('Network Error')) {\r\n    //       errorMsg = '网络连接异常';\r\n    //     }\r\n    //     this.$message.error(errorMsg);\r\n    //   }\r\n    // },\r\n\r\n    async handleRedirect(targetUrl, row) {\r\n      // 显示成功提示\r\n      this.$notify({\r\n        title: \"跳转提示\",\r\n        message: \"验证成功，即将跳转...\",\r\n        type: \"success\",\r\n        duration: 2000,\r\n      });\r\n\r\n      // 先发送统计请求\r\n      try {\r\n        await request.get(`/sparrow/${row.shortLink}`);\r\n      } catch (error) {\r\n        console.error(\"统计请求失败:\", error);\r\n      }\r\n\r\n      // 创建新窗口\r\n      const newWindow = window.open(\"\", \"_blank\");\r\n\r\n      // 倒计时跳转逻辑\r\n      let seconds = 5;\r\n      const countdownElement = document.createElement(\"div\");\r\n      countdownElement.innerHTML = `\r\n        <div style=\"padding: 20px; text-align: center\">\r\n          <h3>验证成功！即将跳转到目标页面</h3>\r\n          <p>URL: ${targetUrl}</p>\r\n          <p>将在 <span style=\"color: #409EFF; font-weight: bold\">${seconds}</span> 秒后自动跳转</p>\r\n          <p>或 <a href=\"${targetUrl}\" style=\"color: #409EFF; cursor: pointer\">立即跳转</a></p>\r\n        </div>\r\n      `;\r\n      newWindow.document.body.appendChild(countdownElement);\r\n\r\n      // 倒计时更新\r\n      const timer = setInterval(() => {\r\n        seconds--;\r\n        countdownElement.querySelector(\"span\").textContent = seconds;\r\n\r\n        if (seconds <= 0) {\r\n          clearInterval(timer);\r\n          newWindow.location.href = targetUrl;\r\n        }\r\n      }, 1000);\r\n\r\n      // 立即跳转点击处理\r\n      countdownElement.querySelector(\"a\").addEventListener(\"click\", (e) => {\r\n        e.preventDefault();\r\n        newWindow.location.href = targetUrl;\r\n      });\r\n    },\r\n\r\n    // 显示详情\r\n    handleShowDetail(row) {\r\n      this.activeDetail = { ...row }; // 克隆行数据\r\n      console.log(this.activeDetail);\r\n    },\r\n\r\n    // 保存修改\r\n    async saveDetail() {\r\n      try {\r\n        await this.$refs.detailForm.validate();\r\n        const originalData = this.tableData.find(\r\n          (item) => item.id === this.activeDetail.id\r\n        );\r\n        const changedFields = this.getChangedFields(originalData);\r\n\r\n        // 批量调用接口\r\n        const requests = changedFields.map((field) =>\r\n          this.callSpecificApi(field)\r\n        );\r\n        await Promise.all(requests);\r\n\r\n        this.$message.success(\"保存成功\");\r\n        await this.fetchData();\r\n      } catch (error) {\r\n        this.$message.error(`保存失败: ${error.message}`);\r\n      }\r\n    },\r\n\r\n    getChangedFields(original) {\r\n      // 只检测以下字段变化\r\n      const compareFields = [\"expireTime\", \"allowNum\", \"privateTarget\"];\r\n      return compareFields.filter(\r\n        (key) => this.activeDetail[key] !== original[key]\r\n      );\r\n    },\r\n\r\n    async callSpecificApi(field) {\r\n      const apiPath = API_MAP[field];\r\n      const params = this.buildParamsByField(field);\r\n      const res = await request.put(apiPath, params);\r\n\r\n      if (res.code !== 200) throw new Error(res.msg || \"接口异常\");\r\n    },\r\n\r\n    // 在 methods 中添加以下方法\r\n    buildParamsByField(field) {\r\n      const baseParams = { id: this.activeDetail.id };\r\n\r\n      switch (field) {\r\n        // 过期时间\r\n        case \"expireTime\":\r\n          return {\r\n            ...baseParams,\r\n            expireTime: this.activeDetail.expireTime,\r\n          };\r\n\r\n        // 访问次数\r\n        case \"allowNum\":\r\n          return {\r\n            ...baseParams,\r\n            allowNum: this.activeDetail.allowNum,\r\n          };\r\n\r\n        // 私密状态（需校验密码）\r\n        case \"privateTarget\":\r\n          if (this.activeDetail.privateTarget) {\r\n            if (!this.activeDetail.password) {\r\n              throw new Error(\"启用私密必须设置密码\");\r\n            }\r\n            if (\r\n              this.activeDetail.password.length < 4 ||\r\n              this.activeDetail.password.length > 12\r\n            ) {\r\n              // ✅ 添加长度校验\r\n              throw new Error(\"请输入4-12位密码\");\r\n            }\r\n          }\r\n          return {\r\n            ...baseParams,\r\n            privateTarget: this.activeDetail.privateTarget,\r\n            password: this.activeDetail.password, // 新密码直接加密\r\n          };\r\n\r\n        default:\r\n          throw new Error(\"未知字段类型\");\r\n      }\r\n    },\r\n\r\n    openChangePasswordDialog(row) {\r\n      if (!row.hasPassword) {\r\n        this.$message.error(\"该短链未设置密码\");\r\n        return;\r\n      }\r\n      this.pwdForm.id = row.id;\r\n      this.changePwdDialogVisible = true;\r\n    },\r\n\r\n    async handleChangePassword() {\r\n      try {\r\n        console.log(this.pwdForm.oldPassword);\r\n        console.log(this.pwdForm.newPassword);\r\n        const res = await request.put(\"/control/shortLink/changePwd\", {\r\n          id: this.pwdForm.id,\r\n          password: this.pwdForm.oldPassword,\r\n          newPassword: this.pwdForm.newPassword,\r\n        });\r\n\r\n        if (res.code === 200) {\r\n          this.$message.success(\"密码修改成功\");\r\n          this.changePwdDialogVisible = false;\r\n          await this.fetchData();\r\n        } else {\r\n          this.$message.error(res.msg);\r\n        }\r\n      } catch (error) {\r\n        this.$message.error(\"修改失败: \" + error.response?.data?.msg);\r\n      }\r\n    },\r\n\r\n    // 重置修改\r\n    resetDetail() {\r\n      this.activeDetail = {\r\n        ...this.tableData.find((item) => item.id === this.activeDetail.id),\r\n      };\r\n    },\r\n\r\n    handleSizeChange(val) {\r\n      this.queryParams.pageSize = val;\r\n      this.queryParams.pageNum = 1;\r\n      this.fetchData();\r\n    },\r\n\r\n    handleCurrentChange(val) {\r\n      this.queryParams.pageNum = val;\r\n      this.fetchData();\r\n    },\r\n\r\n    resetQuery() {\r\n      this.queryParams = {\r\n        pageNum: 1,\r\n        pageSize: 10,\r\n        keyword: \"\",\r\n        tags: [],\r\n        status: null,\r\n      };\r\n      this.fetchData();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.filter-bar {\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.link-tag {\r\n  margin-left: 8px;\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.tag-item {\r\n  margin: 2px;\r\n}\r\n\r\n.data-table {\r\n  margin: 20px 0;\r\n}\r\n\r\n.pagination {\r\n  margin-top: 20px;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.modal-mask {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(0, 0, 0, 0.5); /* 半透明黑色 */\r\n  z-index: 99; /* 比卡片低一级 */\r\n  transition: opacity 0.3s ease;\r\n}\r\n\r\n.detail-card {\r\n  position: fixed; /* 改为fixed定位 */\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 50%;\r\n  max-height: 80vh;\r\n  overflow-y: auto;\r\n  background: #fff;\r\n  z-index: 100;\r\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.3);\r\n  border-radius: 4px;\r\n}\r\n\r\n.detail-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.action-btns {\r\n  text-align: center;\r\n  margin-top: 20px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}