{"ast":null,"code":"import { MessageBox } from \"element-ui\";\nexport default {\n  data() {\n    return {\n      isPasswordLogin: true,\n      isLoginFormVisible: true,\n      isForgotPasswordFormVisible: false,\n      isUserManagementVisible: false,\n      loginForm: {\n        email: \"\",\n        password: \"\",\n        code: \"\"\n      },\n      forgotPasswordForm: {\n        email: \"\",\n        code: \"\",\n        newPassword: \"\"\n      },\n      userInfo: {\n        email: \"\",\n        nickname: \"\",\n        avatar: \"\",\n        profile: \"\",\n        oldPassword: \"\",\n        newPassword: \"\"\n      },\n      defaultAvatar: require(\"@\"),\n      // 默认头像路径\n      loginFormRules: {\n        email: [{\n          required: true,\n          message: \"请输入邮箱\",\n          trigger: \"blur\"\n        }, {\n          pattern: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n          message: \"邮箱格式不正确\",\n          trigger: \"blur\"\n        }],\n        password: [{\n          required: true,\n          message: \"请输入密码\",\n          trigger: \"blur\"\n        }],\n        code: [{\n          required: true,\n          message: \"请输入验证码\",\n          trigger: \"blur\"\n        }]\n      },\n      forgotPasswordFormRules: {\n        email: [{\n          required: true,\n          message: \"请输入邮箱\",\n          trigger: \"blur\"\n        }, {\n          pattern: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n          message: \"邮箱格式不正确\",\n          trigger: \"blur\"\n        }],\n        code: [{\n          required: true,\n          message: \"请输入验证码\",\n          trigger: \"blur\"\n        }],\n        newPassword: [{\n          required: true,\n          message: \"请输入新密码\",\n          trigger: \"blur\"\n        }]\n      },\n      isSendingCode: false,\n      isSendingVerifyCode: false,\n      countdown: 60,\n      countdownVerify: 60,\n      sentCodeTime: null,\n      verifyCodeTime: null,\n      isChangingPassword: false\n    };\n  },\n  methods: {\n    submitLogin() {\n      this.$refs.loginFormRef.validate(valid => {\n        if (valid) {\n          if (!this.isPasswordLogin) {\n            const currentTime = Date.now();\n            if (this.sentCodeTime && currentTime - this.sentCodeTime > 60 * 1000) {\n              this.$message.error(\"验证码已过期，请重新获取\");\n              return;\n            }\n          }\n          this.login();\n        } else {\n          console.log(\"表单校验不通过\");\n          return false;\n        }\n      });\n    },\n    submitResetPassword() {\n      this.$refs.forgotPasswordFormRef.validate(valid => {\n        if (valid) {\n          const currentTime = Date.now();\n          if (this.verifyCodeTime && currentTime - this.verifyCodeTime > 60 * 1000) {\n            this.$message.error(\"验证码已过期，请重新获取\");\n            return;\n          }\n          this.resetPassword();\n        } else {\n          console.log(\"表单校验不通过\");\n          return false;\n        }\n      });\n    },\n    login() {\n      if (this.isPasswordLogin) {\n        // 密码登录\n        this.$http.post(\"/user/loginByPassword\", this.loginForm).then(response => {\n          // 处理登录成功逻辑，跳转到用户管理页面\n          this.isLoginFormVisible = false;\n          this.isUserManagementVisible = true;\n          this.userInfo.email = this.loginForm.email;\n        }).catch(error => {\n          // 处理登录失败逻辑\n          console.log(error);\n        });\n      } else {\n        // 验证码登录\n        this.$http.post(\"/user/loginByEmail\", this.loginForm).then(response => {\n          // 处理登录成功逻辑，跳转到用户管理页面\n          this.isLoginFormVisible = false;\n          this.isUserManagementVisible = true;\n          this.userInfo.email = this.loginForm.email;\n        }).catch(error => {\n          // 处理登录失败逻辑\n          console.log(error);\n        });\n      }\n    },\n    toggleLoginType() {\n      this.isPasswordLogin = !this.isPasswordLogin;\n    },\n    sendCode() {\n      if (this.isSendingCode) return;\n      this.isSendingCode = true;\n      this.$http.post(\"/valid/email\", {\n        email: this.loginForm.email\n      }).then(response => {\n        // 处理发送验证码成功逻辑\n        console.log(\"验证码已发送\");\n        this.sentCodeTime = Date.now();\n        let timer = setInterval(() => {\n          if (this.countdown > 0) {\n            this.countdown--;\n          } else {\n            clearInterval(timer);\n            this.isSendingCode = false;\n            this.countdown = 60;\n          }\n        }, 1000);\n      }).catch(error => {\n        // 处理发送验证码失败逻辑\n        console.log(error);\n        this.isSendingCode = false;\n        this.countdown = 60;\n      });\n    },\n    showForgotPassword() {\n      this.isLoginFormVisible = false;\n      this.isForgotPasswordFormVisible = true;\n    },\n    sendVerifyCode() {\n      if (this.isSendingVerifyCode) return;\n      this.isSendingVerifyCode = true;\n      this.$http.post(\"/user/verify\", {\n        email: this.forgotPasswordForm.email\n      }).then(response => {\n        // 处理发送验证邮件成功逻辑\n        console.log(\"验证邮件已发送\");\n        this.verifyCodeTime = Date.now();\n        let timer = setInterval(() => {\n          if (this.countdownVerify > 0) {\n            this.countdownVerify--;\n          } else {\n            clearInterval(timer);\n            this.isSendingVerifyCode = false;\n            this.countdownVerify = 60;\n          }\n        }, 1000);\n      }).catch(error => {\n        // 处理发送验证邮件失败逻辑\n        console.log(error);\n        this.isSendingVerifyCode = false;\n        this.countdownVerify = 60;\n      });\n    },\n    resetPassword() {\n      this.$http.put(\"/user/resetPassword\", this.forgotPasswordForm).then(response => {\n        // 处理重置密码成功逻辑\n        this.isForgotPasswordFormVisible = false;\n        this.isLoginFormVisible = true;\n      }).catch(error => {\n        // 处理重置密码失败逻辑\n        console.log(error);\n      });\n    },\n    showLoginForm() {\n      this.isLoginFormVisible = true;\n      this.isForgotPasswordFormVisible = false;\n    },\n    // 头像上传相关方法\n    triggerAvatarUpload() {\n      document.getElementById(\"avatarInput\").click();\n    },\n    handleAvatarUpload(event) {\n      const file = event.target.files[0];\n      if (file) {\n        const formData = new FormData();\n        formData.append(\"avatar\", file);\n        this.$http.post(\"/user/uploadAvatar\", formData).then(response => {\n          // 处理上传成功逻辑，更新用户头像路径\n          this.userInfo.avatar = response.data.avatarUrl;\n        }).catch(error => {\n          console.log(error);\n          this.$message.error(\"头像上传失败\");\n        });\n      }\n    },\n    saveUserInfo() {\n      if (this.isChangingPassword) {\n        // 修改密码\n        this.$http.put(\"/user/change/password\", {\n          email: this.userInfo.email,\n          oldPassword: this.userInfo.oldPassword,\n          newPassword: this.userInfo.newPassword\n        }).then(response => {\n          // 处理修改密码成功逻辑\n          this.isChangingPassword = false;\n          console.log(\"密码修改成功\");\n        }).catch(error => {\n          // 处理修改密码失败逻辑\n          console.log(error);\n        });\n      } else {\n        // 修改其他信息\n        this.$http.put(\"/user/name\", {\n          email: this.userInfo.email,\n          nickname: this.userInfo.nickname\n        }).then(response => {\n          // 处理修改昵称成功逻辑\n          console.log(\"昵称修改成功\");\n        }).catch(error => {\n          // 处理修改昵称失败逻辑\n          console.log(error);\n        });\n        this.$http.put(\"/user/profile\", {\n          email: this.userInfo.email,\n          profile: this.userInfo.profile\n        }).then(response => {\n          // 处理修改个人简介成功逻辑\n          console.log(\"个人简介修改成功\");\n        }).catch(error => {\n          // 处理修改个人简介失败逻辑\n          console.log(error);\n        });\n      }\n    },\n    toggleChangePassword() {\n      this.isChangingPassword = !this.isChangingPassword;\n    },\n    showLogoutConfirm() {\n      MessageBox.confirm(\"确定要注销吗？\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(() => {\n        this.$http.post(\"/user/logout\").then(response => {\n          // 处理注销成功逻辑，跳转到登录页面\n          this.isUserManagementVisible = false;\n          this.isLoginFormVisible = true;\n        }).catch(error => {\n          console.log(error);\n          this.$message.error(\"注销失败\");\n        });\n      }).catch(() => {\n        // 用户取消注销\n      });\n    }\n  }\n};","map":{"version":3,"names":["MessageBox","data","isPasswordLogin","isLoginFormVisible","isForgotPasswordFormVisible","isUserManagementVisible","loginForm","email","password","code","forgotPasswordForm","newPassword","userInfo","nickname","avatar","profile","oldPassword","defaultAvatar","require","loginFormRules","required","message","trigger","pattern","forgotPasswordFormRules","isSendingCode","isSendingVerifyCode","countdown","countdownVerify","sentCodeTime","verifyCodeTime","isChangingPassword","methods","submitLogin","$refs","loginFormRef","validate","valid","currentTime","Date","now","$message","error","login","console","log","submitResetPassword","forgotPasswordFormRef","resetPassword","$http","post","then","response","catch","toggleLoginType","sendCode","timer","setInterval","clearInterval","showForgotPassword","sendVerifyCode","put","showLoginForm","triggerAvatarUpload","document","getElementById","click","handleAvatarUpload","event","file","target","files","formData","FormData","append","avatarUrl","saveUserInfo","toggleChangePassword","showLogoutConfirm","confirm","confirmButtonText","cancelButtonText","type"],"sources":["src/views/User.vue"],"sourcesContent":["<template>\r\n  <div class=\"login-container\">\r\n    <!-- 登录表单，通过 isLoginFormVisible 控制显示隐藏 -->\r\n    <div v-if=\"isLoginFormVisible\">\r\n      <el-form\r\n        :model=\"loginForm\"\r\n        ref=\"loginFormRef\"\r\n        label-width=\"80px\"\r\n        :rules=\"loginFormRules\"\r\n      >\r\n        <h2 class=\"title\">登录</h2>\r\n\r\n        <el-form-item label=\"邮箱\" prop=\"email\">\r\n          <el-input v-model=\"loginForm.email\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"密码\" v-if=\"isPasswordLogin\" prop=\"password\">\r\n          <el-input v-model=\"loginForm.password\" type=\"password\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"验证码\" v-if=\"!isPasswordLogin\" prop=\"code\">\r\n          <div class=\"input-button-container\">\r\n            <el-input v-model=\"loginForm.code\"></el-input>\r\n            <el-button @click=\"sendCode\" :disabled=\"isSendingCode\">\r\n              {{ isSendingCode ? `重新发送(${countdown}s)` : \"发送验证码\" }}\r\n            </el-button>\r\n          </div>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <span class=\"hint-text\"\r\n            >（用户初次使用该方式视为注册，密码需要到个人信息页面设置）</span\r\n          >\r\n          <el-button type=\"primary\" @click=\"submitLogin\">登录</el-button>\r\n          <el-button @click=\"toggleLoginType\">\r\n            切换到 {{ isPasswordLogin ? \"验证码登录\" : \"密码登录\" }}\r\n          </el-button>\r\n          <el-button @click=\"showForgotPassword\">忘记密码</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </div>\r\n\r\n    <!-- 忘记密码表单，通过 isForgotPasswordFormVisible 控制显示隐藏 -->\r\n    <div v-if=\"isForgotPasswordFormVisible\">\r\n      <el-form\r\n        :model=\"forgotPasswordForm\"\r\n        ref=\"forgotPasswordFormRef\"\r\n        label-width=\"80px\"\r\n        :rules=\"forgotPasswordFormRules\"\r\n      >\r\n        <h2 class=\"title\">重置密码</h2>\r\n\r\n        <el-form-item label=\"邮箱\" prop=\"email\">\r\n          <el-input v-model=\"forgotPasswordForm.email\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"验证码\" prop=\"code\">\r\n          <div class=\"input-button-container\">\r\n            <el-input v-model=\"forgotPasswordForm.code\"></el-input>\r\n            <el-button @click=\"sendVerifyCode\" :disabled=\"isSendingVerifyCode\">\r\n              {{\r\n                isSendingVerifyCode\r\n                  ? `重新发送(${countdownVerify}s)`\r\n                  : \"发送验证码\"\r\n              }}\r\n            </el-button>\r\n          </div>\r\n        </el-form-item>\r\n        <el-form-item label=\"新密码\" prop=\"newPassword\">\r\n          <el-input\r\n            v-model=\"forgotPasswordForm.newPassword\"\r\n            type=\"password\"\r\n          ></el-input>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"submitResetPassword\"\r\n            >重置密码</el-button\r\n          >\r\n          <el-button @click=\"showLoginForm\">返回登录</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </div>\r\n\r\n    <!-- 用户管理页面，新增头像展示和上传功能 -->\r\n    <div v-if=\"isUserManagementVisible\">\r\n      <el-form :model=\"userInfo\" ref=\"userInfoFormRef\" label-width=\"80px\">\r\n        <h2 class=\"title\">用户管理</h2>\r\n        <el-form-item label=\"邮箱\">\r\n          <el-input v-model=\"userInfo.email\" disabled></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"昵称\">\r\n          <el-input v-model=\"userInfo.nickname\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"头像\">\r\n          <div class=\"avatar-container\">\r\n            <img\r\n              :src=\"userInfo.avatar || defaultAvatar\"\r\n              alt=\"头像\"\r\n              class=\"avatar\"\r\n            />\r\n            <input\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              @change=\"handleAvatarUpload\"\r\n              style=\"display: none\"\r\n              id=\"avatarInput\"\r\n            />\r\n            <el-button @click=\"triggerAvatarUpload\">上传头像</el-button>\r\n          </div>\r\n        </el-form-item>\r\n        <el-form-item label=\"个人简介\">\r\n          <el-input v-model=\"userInfo.profile\" type=\"textarea\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"旧密码\" v-if=\"isChangingPassword\">\r\n          <el-input v-model=\"userInfo.oldPassword\" type=\"password\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"新密码\" v-if=\"isChangingPassword\">\r\n          <el-input v-model=\"userInfo.newPassword\" type=\"password\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"saveUserInfo\">保存信息</el-button>\r\n          <el-button @click=\"toggleChangePassword\">\r\n            {{ isChangingPassword ? \"取消修改密码\" : \"修改密码\" }}\r\n          </el-button>\r\n          <el-button @click=\"showLogoutConfirm\">注销</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { MessageBox } from \"element-ui\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      isPasswordLogin: true,\r\n      isLoginFormVisible: true,\r\n      isForgotPasswordFormVisible: false,\r\n      isUserManagementVisible: false,\r\n      loginForm: {\r\n        email: \"\",\r\n        password: \"\",\r\n        code: \"\",\r\n      },\r\n      forgotPasswordForm: {\r\n        email: \"\",\r\n        code: \"\",\r\n        newPassword: \"\",\r\n      },\r\n      userInfo: {\r\n        email: \"\",\r\n        nickname: \"\",\r\n        avatar: \"\",\r\n        profile: \"\",\r\n        oldPassword: \"\",\r\n        newPassword: \"\",\r\n      },\r\n      defaultAvatar: require(\"@\"), // 默认头像路径\r\n      loginFormRules: {\r\n        email: [\r\n          { required: true, message: \"请输入邮箱\", trigger: \"blur\" },\r\n          {\r\n            pattern: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\r\n            message: \"邮箱格式不正确\",\r\n            trigger: \"blur\",\r\n          },\r\n        ],\r\n        password: [{ required: true, message: \"请输入密码\", trigger: \"blur\" }],\r\n        code: [{ required: true, message: \"请输入验证码\", trigger: \"blur\" }],\r\n      },\r\n      forgotPasswordFormRules: {\r\n        email: [\r\n          { required: true, message: \"请输入邮箱\", trigger: \"blur\" },\r\n          {\r\n            pattern: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\r\n            message: \"邮箱格式不正确\",\r\n            trigger: \"blur\",\r\n          },\r\n        ],\r\n        code: [{ required: true, message: \"请输入验证码\", trigger: \"blur\" }],\r\n        newPassword: [\r\n          { required: true, message: \"请输入新密码\", trigger: \"blur\" },\r\n        ],\r\n      },\r\n      isSendingCode: false,\r\n      isSendingVerifyCode: false,\r\n      countdown: 60,\r\n      countdownVerify: 60,\r\n      sentCodeTime: null,\r\n      verifyCodeTime: null,\r\n      isChangingPassword: false,\r\n    };\r\n  },\r\n  methods: {\r\n    submitLogin() {\r\n      this.$refs.loginFormRef.validate((valid) => {\r\n        if (valid) {\r\n          if (!this.isPasswordLogin) {\r\n            const currentTime = Date.now();\r\n            if (\r\n              this.sentCodeTime &&\r\n              currentTime - this.sentCodeTime > 60 * 1000\r\n            ) {\r\n              this.$message.error(\"验证码已过期，请重新获取\");\r\n              return;\r\n            }\r\n          }\r\n          this.login();\r\n        } else {\r\n          console.log(\"表单校验不通过\");\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    submitResetPassword() {\r\n      this.$refs.forgotPasswordFormRef.validate((valid) => {\r\n        if (valid) {\r\n          const currentTime = Date.now();\r\n          if (\r\n            this.verifyCodeTime &&\r\n            currentTime - this.verifyCodeTime > 60 * 1000\r\n          ) {\r\n            this.$message.error(\"验证码已过期，请重新获取\");\r\n            return;\r\n          }\r\n          this.resetPassword();\r\n        } else {\r\n          console.log(\"表单校验不通过\");\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    login() {\r\n      if (this.isPasswordLogin) {\r\n        // 密码登录\r\n        this.$http\r\n          .post(\"/user/loginByPassword\", this.loginForm)\r\n          .then((response) => {\r\n            // 处理登录成功逻辑，跳转到用户管理页面\r\n            this.isLoginFormVisible = false;\r\n            this.isUserManagementVisible = true;\r\n            this.userInfo.email = this.loginForm.email;\r\n          })\r\n          .catch((error) => {\r\n            // 处理登录失败逻辑\r\n            console.log(error);\r\n          });\r\n      } else {\r\n        // 验证码登录\r\n        this.$http\r\n          .post(\"/user/loginByEmail\", this.loginForm)\r\n          .then((response) => {\r\n            // 处理登录成功逻辑，跳转到用户管理页面\r\n            this.isLoginFormVisible = false;\r\n            this.isUserManagementVisible = true;\r\n            this.userInfo.email = this.loginForm.email;\r\n          })\r\n          .catch((error) => {\r\n            // 处理登录失败逻辑\r\n            console.log(error);\r\n          });\r\n      }\r\n    },\r\n    toggleLoginType() {\r\n      this.isPasswordLogin = !this.isPasswordLogin;\r\n    },\r\n    sendCode() {\r\n      if (this.isSendingCode) return;\r\n      this.isSendingCode = true;\r\n      this.$http\r\n        .post(\"/valid/email\", { email: this.loginForm.email })\r\n        .then((response) => {\r\n          // 处理发送验证码成功逻辑\r\n          console.log(\"验证码已发送\");\r\n          this.sentCodeTime = Date.now();\r\n          let timer = setInterval(() => {\r\n            if (this.countdown > 0) {\r\n              this.countdown--;\r\n            } else {\r\n              clearInterval(timer);\r\n              this.isSendingCode = false;\r\n              this.countdown = 60;\r\n            }\r\n          }, 1000);\r\n        })\r\n        .catch((error) => {\r\n          // 处理发送验证码失败逻辑\r\n          console.log(error);\r\n          this.isSendingCode = false;\r\n          this.countdown = 60;\r\n        });\r\n    },\r\n    showForgotPassword() {\r\n      this.isLoginFormVisible = false;\r\n      this.isForgotPasswordFormVisible = true;\r\n    },\r\n    sendVerifyCode() {\r\n      if (this.isSendingVerifyCode) return;\r\n      this.isSendingVerifyCode = true;\r\n      this.$http\r\n        .post(\"/user/verify\", { email: this.forgotPasswordForm.email })\r\n        .then((response) => {\r\n          // 处理发送验证邮件成功逻辑\r\n          console.log(\"验证邮件已发送\");\r\n          this.verifyCodeTime = Date.now();\r\n          let timer = setInterval(() => {\r\n            if (this.countdownVerify > 0) {\r\n              this.countdownVerify--;\r\n            } else {\r\n              clearInterval(timer);\r\n              this.isSendingVerifyCode = false;\r\n              this.countdownVerify = 60;\r\n            }\r\n          }, 1000);\r\n        })\r\n        .catch((error) => {\r\n          // 处理发送验证邮件失败逻辑\r\n          console.log(error);\r\n          this.isSendingVerifyCode = false;\r\n          this.countdownVerify = 60;\r\n        });\r\n    },\r\n    resetPassword() {\r\n      this.$http\r\n        .put(\"/user/resetPassword\", this.forgotPasswordForm)\r\n        .then((response) => {\r\n          // 处理重置密码成功逻辑\r\n          this.isForgotPasswordFormVisible = false;\r\n          this.isLoginFormVisible = true;\r\n        })\r\n        .catch((error) => {\r\n          // 处理重置密码失败逻辑\r\n          console.log(error);\r\n        });\r\n    },\r\n    showLoginForm() {\r\n      this.isLoginFormVisible = true;\r\n      this.isForgotPasswordFormVisible = false;\r\n    },\r\n    // 头像上传相关方法\r\n    triggerAvatarUpload() {\r\n      document.getElementById(\"avatarInput\").click();\r\n    },\r\n    handleAvatarUpload(event) {\r\n      const file = event.target.files[0];\r\n      if (file) {\r\n        const formData = new FormData();\r\n        formData.append(\"avatar\", file);\r\n        this.$http\r\n          .post(\"/user/uploadAvatar\", formData)\r\n          .then((response) => {\r\n            // 处理上传成功逻辑，更新用户头像路径\r\n            this.userInfo.avatar = response.data.avatarUrl;\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n            this.$message.error(\"头像上传失败\");\r\n          });\r\n      }\r\n    },\r\n    saveUserInfo() {\r\n      if (this.isChangingPassword) {\r\n        // 修改密码\r\n        this.$http\r\n          .put(\"/user/change/password\", {\r\n            email: this.userInfo.email,\r\n            oldPassword: this.userInfo.oldPassword,\r\n            newPassword: this.userInfo.newPassword,\r\n          })\r\n          .then((response) => {\r\n            // 处理修改密码成功逻辑\r\n            this.isChangingPassword = false;\r\n            console.log(\"密码修改成功\");\r\n          })\r\n          .catch((error) => {\r\n            // 处理修改密码失败逻辑\r\n            console.log(error);\r\n          });\r\n      } else {\r\n        // 修改其他信息\r\n        this.$http\r\n          .put(\"/user/name\", {\r\n            email: this.userInfo.email,\r\n            nickname: this.userInfo.nickname,\r\n          })\r\n          .then((response) => {\r\n            // 处理修改昵称成功逻辑\r\n            console.log(\"昵称修改成功\");\r\n          })\r\n          .catch((error) => {\r\n            // 处理修改昵称失败逻辑\r\n            console.log(error);\r\n          });\r\n\r\n        this.$http\r\n          .put(\"/user/profile\", {\r\n            email: this.userInfo.email,\r\n            profile: this.userInfo.profile,\r\n          })\r\n          .then((response) => {\r\n            // 处理修改个人简介成功逻辑\r\n            console.log(\"个人简介修改成功\");\r\n          })\r\n          .catch((error) => {\r\n            // 处理修改个人简介失败逻辑\r\n            console.log(error);\r\n          });\r\n      }\r\n    },\r\n    toggleChangePassword() {\r\n      this.isChangingPassword = !this.isChangingPassword;\r\n    },\r\n    showLogoutConfirm() {\r\n      MessageBox.confirm(\"确定要注销吗？\", \"提示\", {\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\",\r\n        type: \"warning\",\r\n      })\r\n        .then(() => {\r\n          this.$http\r\n            .post(\"/user/logout\")\r\n            .then((response) => {\r\n              // 处理注销成功逻辑，跳转到登录页面\r\n              this.isUserManagementVisible = false;\r\n              this.isLoginFormVisible = true;\r\n            })\r\n            .catch((error) => {\r\n              console.log(error);\r\n              this.$message.error(\"注销失败\");\r\n            });\r\n        })\r\n        .catch(() => {\r\n          // 用户取消注销\r\n        });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nh2 {\r\n  padding: 0;\r\n  text-align: center;\r\n  color: #333;\r\n}\r\n\r\n.login-container {\r\n  min-height: 100vh;\r\n  background-color: #f4f4f4;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.login-container > div {\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.el-form {\r\n  width: 350px;\r\n  background-color: white;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.el-input {\r\n  width: 60%;\r\n  padding: 8px;\r\n  margin-bottom: 0;\r\n  border: 1px solid #ccc;\r\n  border-radius: 3px;\r\n}\r\n\r\n.input-button-container {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n.el-button {\r\n  margin: 0;\r\n  padding: 8px 15px;\r\n  border: none;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.el-button--primary {\r\n  background-color: #42b983;\r\n  color: white;\r\n}\r\n\r\n.el-button--primary:hover {\r\n  background-color: #37a373;\r\n}\r\n\r\n.el-button--default {\r\n  background-color: #f4f4f4;\r\n  color: #333;\r\n}\r\n</style>\r\n"],"mappings":"AAgIA,SAAAA,UAAA;AAEA;EACAC,KAAA;IACA;MACAC,eAAA;MACAC,kBAAA;MACAC,2BAAA;MACAC,uBAAA;MACAC,SAAA;QACAC,KAAA;QACAC,QAAA;QACAC,IAAA;MACA;MACAC,kBAAA;QACAH,KAAA;QACAE,IAAA;QACAE,WAAA;MACA;MACAC,QAAA;QACAL,KAAA;QACAM,QAAA;QACAC,MAAA;QACAC,OAAA;QACAC,WAAA;QACAL,WAAA;MACA;MACAM,aAAA,EAAAC,OAAA;MAAA;MACAC,cAAA;QACAZ,KAAA,GACA;UAAAa,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UACAC,OAAA;UACAF,OAAA;UACAC,OAAA;QACA,EACA;QACAd,QAAA;UAAAY,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;QACAb,IAAA;UAAAW,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MACA;MACAE,uBAAA;QACAjB,KAAA,GACA;UAAAa,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UACAC,OAAA;UACAF,OAAA;UACAC,OAAA;QACA,EACA;QACAb,IAAA;UAAAW,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;QACAX,WAAA,GACA;UAAAS,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;MACAG,aAAA;MACAC,mBAAA;MACAC,SAAA;MACAC,eAAA;MACAC,YAAA;MACAC,cAAA;MACAC,kBAAA;IACA;EACA;EACAC,OAAA;IACAC,YAAA;MACA,KAAAC,KAAA,CAAAC,YAAA,CAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,UAAAnC,eAAA;YACA,MAAAoC,WAAA,GAAAC,IAAA,CAAAC,GAAA;YACA,IACA,KAAAX,YAAA,IACAS,WAAA,QAAAT,YAAA,cACA;cACA,KAAAY,QAAA,CAAAC,KAAA;cACA;YACA;UACA;UACA,KAAAC,KAAA;QACA;UACAC,OAAA,CAAAC,GAAA;UACA;QACA;MACA;IACA;IACAC,oBAAA;MACA,KAAAZ,KAAA,CAAAa,qBAAA,CAAAX,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,MAAAC,WAAA,GAAAC,IAAA,CAAAC,GAAA;UACA,IACA,KAAAV,cAAA,IACAQ,WAAA,QAAAR,cAAA,cACA;YACA,KAAAW,QAAA,CAAAC,KAAA;YACA;UACA;UACA,KAAAM,aAAA;QACA;UACAJ,OAAA,CAAAC,GAAA;UACA;QACA;MACA;IACA;IACAF,MAAA;MACA,SAAAzC,eAAA;QACA;QACA,KAAA+C,KAAA,CACAC,IAAA,+BAAA5C,SAAA,EACA6C,IAAA,CAAAC,QAAA;UACA;UACA,KAAAjD,kBAAA;UACA,KAAAE,uBAAA;UACA,KAAAO,QAAA,CAAAL,KAAA,QAAAD,SAAA,CAAAC,KAAA;QACA,GACA8C,KAAA,CAAAX,KAAA;UACA;UACAE,OAAA,CAAAC,GAAA,CAAAH,KAAA;QACA;MACA;QACA;QACA,KAAAO,KAAA,CACAC,IAAA,4BAAA5C,SAAA,EACA6C,IAAA,CAAAC,QAAA;UACA;UACA,KAAAjD,kBAAA;UACA,KAAAE,uBAAA;UACA,KAAAO,QAAA,CAAAL,KAAA,QAAAD,SAAA,CAAAC,KAAA;QACA,GACA8C,KAAA,CAAAX,KAAA;UACA;UACAE,OAAA,CAAAC,GAAA,CAAAH,KAAA;QACA;MACA;IACA;IACAY,gBAAA;MACA,KAAApD,eAAA,SAAAA,eAAA;IACA;IACAqD,SAAA;MACA,SAAA9B,aAAA;MACA,KAAAA,aAAA;MACA,KAAAwB,KAAA,CACAC,IAAA;QAAA3C,KAAA,OAAAD,SAAA,CAAAC;MAAA,GACA4C,IAAA,CAAAC,QAAA;QACA;QACAR,OAAA,CAAAC,GAAA;QACA,KAAAhB,YAAA,GAAAU,IAAA,CAAAC,GAAA;QACA,IAAAgB,KAAA,GAAAC,WAAA;UACA,SAAA9B,SAAA;YACA,KAAAA,SAAA;UACA;YACA+B,aAAA,CAAAF,KAAA;YACA,KAAA/B,aAAA;YACA,KAAAE,SAAA;UACA;QACA;MACA,GACA0B,KAAA,CAAAX,KAAA;QACA;QACAE,OAAA,CAAAC,GAAA,CAAAH,KAAA;QACA,KAAAjB,aAAA;QACA,KAAAE,SAAA;MACA;IACA;IACAgC,mBAAA;MACA,KAAAxD,kBAAA;MACA,KAAAC,2BAAA;IACA;IACAwD,eAAA;MACA,SAAAlC,mBAAA;MACA,KAAAA,mBAAA;MACA,KAAAuB,KAAA,CACAC,IAAA;QAAA3C,KAAA,OAAAG,kBAAA,CAAAH;MAAA,GACA4C,IAAA,CAAAC,QAAA;QACA;QACAR,OAAA,CAAAC,GAAA;QACA,KAAAf,cAAA,GAAAS,IAAA,CAAAC,GAAA;QACA,IAAAgB,KAAA,GAAAC,WAAA;UACA,SAAA7B,eAAA;YACA,KAAAA,eAAA;UACA;YACA8B,aAAA,CAAAF,KAAA;YACA,KAAA9B,mBAAA;YACA,KAAAE,eAAA;UACA;QACA;MACA,GACAyB,KAAA,CAAAX,KAAA;QACA;QACAE,OAAA,CAAAC,GAAA,CAAAH,KAAA;QACA,KAAAhB,mBAAA;QACA,KAAAE,eAAA;MACA;IACA;IACAoB,cAAA;MACA,KAAAC,KAAA,CACAY,GAAA,6BAAAnD,kBAAA,EACAyC,IAAA,CAAAC,QAAA;QACA;QACA,KAAAhD,2BAAA;QACA,KAAAD,kBAAA;MACA,GACAkD,KAAA,CAAAX,KAAA;QACA;QACAE,OAAA,CAAAC,GAAA,CAAAH,KAAA;MACA;IACA;IACAoB,cAAA;MACA,KAAA3D,kBAAA;MACA,KAAAC,2BAAA;IACA;IACA;IACA2D,oBAAA;MACAC,QAAA,CAAAC,cAAA,gBAAAC,KAAA;IACA;IACAC,mBAAAC,KAAA;MACA,MAAAC,IAAA,GAAAD,KAAA,CAAAE,MAAA,CAAAC,KAAA;MACA,IAAAF,IAAA;QACA,MAAAG,QAAA,OAAAC,QAAA;QACAD,QAAA,CAAAE,MAAA,WAAAL,IAAA;QACA,KAAApB,KAAA,CACAC,IAAA,uBAAAsB,QAAA,EACArB,IAAA,CAAAC,QAAA;UACA;UACA,KAAAxC,QAAA,CAAAE,MAAA,GAAAsC,QAAA,CAAAnD,IAAA,CAAA0E,SAAA;QACA,GACAtB,KAAA,CAAAX,KAAA;UACAE,OAAA,CAAAC,GAAA,CAAAH,KAAA;UACA,KAAAD,QAAA,CAAAC,KAAA;QACA;MACA;IACA;IACAkC,aAAA;MACA,SAAA7C,kBAAA;QACA;QACA,KAAAkB,KAAA,CACAY,GAAA;UACAtD,KAAA,OAAAK,QAAA,CAAAL,KAAA;UACAS,WAAA,OAAAJ,QAAA,CAAAI,WAAA;UACAL,WAAA,OAAAC,QAAA,CAAAD;QACA,GACAwC,IAAA,CAAAC,QAAA;UACA;UACA,KAAArB,kBAAA;UACAa,OAAA,CAAAC,GAAA;QACA,GACAQ,KAAA,CAAAX,KAAA;UACA;UACAE,OAAA,CAAAC,GAAA,CAAAH,KAAA;QACA;MACA;QACA;QACA,KAAAO,KAAA,CACAY,GAAA;UACAtD,KAAA,OAAAK,QAAA,CAAAL,KAAA;UACAM,QAAA,OAAAD,QAAA,CAAAC;QACA,GACAsC,IAAA,CAAAC,QAAA;UACA;UACAR,OAAA,CAAAC,GAAA;QACA,GACAQ,KAAA,CAAAX,KAAA;UACA;UACAE,OAAA,CAAAC,GAAA,CAAAH,KAAA;QACA;QAEA,KAAAO,KAAA,CACAY,GAAA;UACAtD,KAAA,OAAAK,QAAA,CAAAL,KAAA;UACAQ,OAAA,OAAAH,QAAA,CAAAG;QACA,GACAoC,IAAA,CAAAC,QAAA;UACA;UACAR,OAAA,CAAAC,GAAA;QACA,GACAQ,KAAA,CAAAX,KAAA;UACA;UACAE,OAAA,CAAAC,GAAA,CAAAH,KAAA;QACA;MACA;IACA;IACAmC,qBAAA;MACA,KAAA9C,kBAAA,SAAAA,kBAAA;IACA;IACA+C,kBAAA;MACA9E,UAAA,CAAA+E,OAAA;QACAC,iBAAA;QACAC,gBAAA;QACAC,IAAA;MACA,GACA/B,IAAA;QACA,KAAAF,KAAA,CACAC,IAAA,iBACAC,IAAA,CAAAC,QAAA;UACA;UACA,KAAA/C,uBAAA;UACA,KAAAF,kBAAA;QACA,GACAkD,KAAA,CAAAX,KAAA;UACAE,OAAA,CAAAC,GAAA,CAAAH,KAAA;UACA,KAAAD,QAAA,CAAAC,KAAA;QACA;MACA,GACAW,KAAA;QACA;MAAA,CACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}