{"ast":null,"code":"import request from \"../utils/request\";\nexport default {\n  data() {\n    return {\n      isPasswordLogin: true,\n      isLoginFormVisible: true,\n      isForgotPasswordFormVisible: false,\n      loginForm: {\n        email: \"\",\n        password: \"\",\n        verificationCode: \"\"\n      },\n      forgotPasswordForm: {\n        email: \"\",\n        verificationCode: \"\",\n        newPassword: \"\"\n      },\n      loginFormRules: {\n        email: [{\n          required: true,\n          message: \"请输入邮箱\",\n          trigger: \"blur\"\n        }, {\n          pattern: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n          message: \"邮箱格式不正确\",\n          trigger: \"blur\"\n        }],\n        password: [{\n          required: true,\n          message: \"请输入密码\",\n          trigger: \"blur\"\n        }],\n        verificationCode: [{\n          required: true,\n          message: \"请输入验证码\",\n          trigger: \"blur\"\n        }, {\n          min: 6,\n          max: 6,\n          message: \"验证码长度必须为6\",\n          trigger: \"blur\"\n        }]\n      },\n      forgotPasswordFormRules: {\n        email: [{\n          required: true,\n          message: \"请输入邮箱\",\n          trigger: \"blur\"\n        }, {\n          pattern: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n          message: \"邮箱格式不正确\",\n          trigger: \"blur\"\n        }],\n        verificationCode: [{\n          required: true,\n          message: \"请输入验证码\",\n          trigger: \"blur\"\n        }, {\n          min: 6,\n          max: 6,\n          message: \"验证码长度必须为6\",\n          trigger: \"blur\"\n        }],\n        newPassword: [{\n          required: true,\n          message: \"请输入新密码\",\n          trigger: \"blur\"\n        }]\n      },\n      isSendingCode: false,\n      // 登录验证码发送状态\n      isSendingVerifyCode: false,\n      // 忘记密码的验证码发送状态\n      countdown: 60,\n      countdownVerify: 60,\n      sentCodeTime: null,\n      // 登录验证码发送时间\n      verifyCodeTime: null // 忘记密码的验证码发送时间\n    };\n  },\n  methods: {\n    submitLogin() {\n      this.$refs.loginFormRef.validate(valid => {\n        if (valid) {\n          if (!this.isPasswordLogin) {\n            const currentTime = Date.now();\n            if (this.sentCodeTime && currentTime - this.sentCodeTime > 60 * 1000) {\n              this.$message.error(\"验证码已过期，请重新获取\");\n              return;\n            }\n          }\n          this.login();\n        } else {\n          console.log(\"表单校验不通过\");\n          return false;\n        }\n      });\n    },\n    submitResetPassword() {\n      this.$refs.forgotPasswordFormRef.validate(valid => {\n        if (valid) {\n          const currentTime = Date.now();\n          if (this.verifyCodeTime && currentTime - this.verifyCodeTime > 60 * 1000) {\n            this.$message.error(\"验证码已过期，请重新获取\");\n            return;\n          }\n          this.resetPassword();\n        } else {\n          console.log(\"表单校验不通过\");\n          return false;\n        }\n      });\n    },\n    login() {\n      if (this.isPasswordLogin) {\n        // 密码登录\n        request.post(\"/user/loginByPassword\", {\n          email: this.loginForm.email,\n          password: this.loginForm.password\n        }).then(response => {\n          const {\n            refreshToken,\n            accessToken\n          } = response.data;\n          // 存储 refreshToken 到 localStorage\n          localStorage.setItem(\"refreshToken\", refreshToken);\n          // 存储 accessToken 到 localStorage\n          localStorage.setItem(\"accessToken\", accessToken);\n          // 存储用户信息到 localStorage\n          localStorage.setItem(\"userEmail\", this.loginForm.email);\n          this.$message.success(\"登录成功\");\n          // 页面跳转\n          this.$router.push(\"/create\");\n        }).catch(error => {\n          // 处理登录失败逻辑\n          console.log(error);\n          this.$message.error(\"登录失败，请检查邮箱和密码\");\n        });\n      } else {\n        // 验证码登录\n        request.post(\"/user/loginByEmail\", {\n          email: this.loginForm.email,\n          verificationCode: this.loginForm.verificationCode\n        }).then(response => {\n          const {\n            refreshToken,\n            accessToken\n          } = response.data;\n          // 存储 refreshToken 到 localStorage\n          localStorage.setItem(\"refreshToken\", refreshToken);\n          // 存储 accessToken 到 localStorage\n          localStorage.setItem(\"accessToken\", accessToken);\n          // 存储用户信息到 localStorage\n          localStorage.setItem(\"userEmail\", this.loginForm.email);\n          this.$message.success(\"登录成功\");\n          // 页面跳转\n          this.$router.push(\"/create\");\n        }).catch(error => {\n          // 处理登录失败逻辑\n          console.log(error);\n          this.$message.error(\"登录失败，请检查邮箱和验证码\");\n        });\n      }\n    },\n    toggleLoginType() {\n      this.isPasswordLogin = !this.isPasswordLogin;\n      // 切换登录方式时重置验证码时间和状态\n      this.sentCodeTime = null;\n      this.isSendingCode = false;\n      this.countdown = 60;\n      this.loginForm.verificationCode = \"\";\n    },\n    // 登录验证码\n    sendCode() {\n      if (this.isSendingCode) return;\n      this.isSendingCode = true;\n      request.post(`/user/email?email=${this.loginForm.email}`).then(response => {\n        // 处理发送验证码成功逻辑\n        this.$message.success(\"验证码已发送\");\n        this.sentCodeTime = Date.now();\n        let timer = setInterval(() => {\n          if (this.countdown > 0) {\n            this.countdown--;\n          } else {\n            clearInterval(timer);\n            this.isSendingCode = false;\n            this.countdown = 60;\n          }\n        }, 1000);\n      }).catch(error => {\n        // 处理发送验证码失败逻辑\n        this.$message.error(\"验证码发送失败，请稍后重试\");\n        this.isSendingCode = false;\n        this.countdown = 60;\n      });\n    },\n    showForgotPassword() {\n      this.isLoginFormVisible = false;\n      this.isForgotPasswordFormVisible = true;\n    },\n    // 忘记密码的验证码\n    sendVerifyCode() {\n      if (this.isSendingVerifyCode) return;\n      this.isSendingVerifyCode = true;\n      request.post(`/user/email?email=${this.forgotPasswordForm.email}`).then(response => {\n        // 处理发送验证邮件成功逻辑\n        this.$message.success(\"验证码已发送\");\n        this.verifyCodeTime = Date.now();\n        let timer = setInterval(() => {\n          if (this.countdownVerify > 0) {\n            this.countdownVerify--;\n          } else {\n            clearInterval(timer);\n            this.isSendingVerifyCode = false;\n            this.countdownVerify = 60;\n          }\n        }, 1000);\n      }).catch(error => {\n        // 处理发送验证邮件失败逻辑\n        this.$message.error(\"验证邮件发送失败，请稍后重试\");\n        this.isSendingVerifyCode = false;\n        this.countdownVerify = 60;\n      });\n    },\n    resetPassword() {\n      request.put(\"/user/resetPassword\", this.forgotPasswordForm).then(response => {\n        // 处理重置密码成功逻辑\n        this.isForgotPasswordFormVisible = false;\n        this.isLoginFormVisible = true;\n      }).catch(error => {\n        // 处理重置密码失败逻辑\n        console.log(error);\n      });\n    },\n    showLoginForm() {\n      this.isLoginFormVisible = true;\n      this.isForgotPasswordFormVisible = false;\n    }\n  }\n};","map":{"version":3,"names":["request","data","isPasswordLogin","isLoginFormVisible","isForgotPasswordFormVisible","loginForm","email","password","verificationCode","forgotPasswordForm","newPassword","loginFormRules","required","message","trigger","pattern","min","max","forgotPasswordFormRules","isSendingCode","isSendingVerifyCode","countdown","countdownVerify","sentCodeTime","verifyCodeTime","methods","submitLogin","$refs","loginFormRef","validate","valid","currentTime","Date","now","$message","error","login","console","log","submitResetPassword","forgotPasswordFormRef","resetPassword","post","then","response","refreshToken","accessToken","localStorage","setItem","success","$router","push","catch","toggleLoginType","sendCode","timer","setInterval","clearInterval","showForgotPassword","sendVerifyCode","put","showLoginForm"],"sources":["src/views/Login.vue"],"sourcesContent":["<template>\n  <div class=\"login-container\">\n    <!-- 登录表单，通过 isLoginFormVisible 控制显示隐藏 -->\n    <div v-if=\"isLoginFormVisible\">\n      <el-form\n        :model=\"loginForm\"\n        ref=\"loginFormRef\"\n        label-width=\"80px\"\n        :rules=\"loginFormRules\"\n      >\n        <h2 class=\"title\">登录</h2>\n\n        <el-form-item label=\"邮箱\" prop=\"email\">\n          <el-input v-model=\"loginForm.email\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"密码\" v-if=\"isPasswordLogin\" prop=\"password\">\n          <el-input v-model=\"loginForm.password\" type=\"password\"></el-input>\n        </el-form-item>\n        <el-form-item\n          label=\"验证码\"\n          v-if=\"!isPasswordLogin\"\n          prop=\"verificationCode\"\n        >\n          <el-input v-model=\"loginForm.verificationCode\"></el-input>\n          <el-button @click=\"sendCode\" :disabled=\"isSendingCode\">\n            {{ isSendingCode ? `重新发送(${countdown}s)` : \"发送验证码\" }}\n          </el-button>\n        </el-form-item>\n        <el-form-item>\n          <span class=\"hint-text\"\n            >（用户初次使用该方式视为注册，密码需要到个人信息页面设置）</span\n          >\n          <el-button type=\"primary\" @click=\"submitLogin\">登录</el-button>\n          <el-button @click=\"toggleLoginType\">\n            切换到 {{ isPasswordLogin ? \"验证码登录\" : \"密码登录\" }}\n          </el-button>\n          <el-button @click=\"showForgotPassword\">忘记密码</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n\n    <!-- 忘记密码表单，通过 isForgotPasswordFormVisible 控制显示隐藏 -->\n    <div v-if=\"isForgotPasswordFormVisible\">\n      <el-form\n        :model=\"forgotPasswordForm\"\n        ref=\"forgotPasswordFormRef\"\n        label-width=\"80px\"\n        :rules=\"forgotPasswordFormRules\"\n      >\n        <h2 class=\"title\">重置密码</h2>\n\n        <el-form-item label=\"邮箱\" prop=\"email\">\n          <el-input v-model=\"forgotPasswordForm.email\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"验证码\" prop=\"verificationCode\">\n          <el-input v-model=\"forgotPasswordForm.verificationCode\"></el-input>\n          <el-button @click=\"sendVerifyCode\" :disabled=\"isSendingVerifyCode\">\n            {{\n              isSendingVerifyCode\n                ? `重新发送(${countdownVerify}s)`\n                : \"发送验证码\"\n            }}\n          </el-button>\n        </el-form-item>\n        <el-form-item label=\"新密码\" prop=\"newPassword\">\n          <el-input\n            v-model=\"forgotPasswordForm.newPassword\"\n            type=\"password\"\n          ></el-input>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"submitResetPassword\"\n            >重置密码</el-button\n          >\n          <el-button @click=\"showLoginForm\">返回登录</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport request from \"../utils/request\";\n\nexport default {\n  data() {\n    return {\n      isPasswordLogin: true,\n      isLoginFormVisible: true,\n      isForgotPasswordFormVisible: false,\n      loginForm: {\n        email: \"\",\n        password: \"\",\n        verificationCode: \"\",\n      },\n      forgotPasswordForm: {\n        email: \"\",\n        verificationCode: \"\",\n        newPassword: \"\",\n      },\n      loginFormRules: {\n        email: [\n          { required: true, message: \"请输入邮箱\", trigger: \"blur\" },\n          {\n            pattern: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n            message: \"邮箱格式不正确\",\n            trigger: \"blur\",\n          },\n        ],\n        password: [{ required: true, message: \"请输入密码\", trigger: \"blur\" }],\n        verificationCode: [\n          { required: true, message: \"请输入验证码\", trigger: \"blur\" },\n          { min: 6, max: 6, message: \"验证码长度必须为6\", trigger: \"blur\" },\n        ],\n      },\n      forgotPasswordFormRules: {\n        email: [\n          { required: true, message: \"请输入邮箱\", trigger: \"blur\" },\n          {\n            pattern: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n            message: \"邮箱格式不正确\",\n            trigger: \"blur\",\n          },\n        ],\n        verificationCode: [\n          { required: true, message: \"请输入验证码\", trigger: \"blur\" },\n          { min: 6, max: 6, message: \"验证码长度必须为6\", trigger: \"blur\" },\n        ],\n        newPassword: [\n          { required: true, message: \"请输入新密码\", trigger: \"blur\" },\n        ],\n      },\n      isSendingCode: false, // 登录验证码发送状态\n      isSendingVerifyCode: false, // 忘记密码的验证码发送状态\n      countdown: 60,\n      countdownVerify: 60,\n      sentCodeTime: null, // 登录验证码发送时间\n      verifyCodeTime: null, // 忘记密码的验证码发送时间\n    };\n  },\n  methods: {\n    submitLogin() {\n      this.$refs.loginFormRef.validate((valid) => {\n        if (valid) {\n          if (!this.isPasswordLogin) {\n            const currentTime = Date.now();\n            if (\n              this.sentCodeTime &&\n              currentTime - this.sentCodeTime > 60 * 1000\n            ) {\n              this.$message.error(\"验证码已过期，请重新获取\");\n              return;\n            }\n          }\n          this.login();\n        } else {\n          console.log(\"表单校验不通过\");\n          return false;\n        }\n      });\n    },\n\n    submitResetPassword() {\n      this.$refs.forgotPasswordFormRef.validate((valid) => {\n        if (valid) {\n          const currentTime = Date.now();\n          if (\n            this.verifyCodeTime &&\n            currentTime - this.verifyCodeTime > 60 * 1000\n          ) {\n            this.$message.error(\"验证码已过期，请重新获取\");\n            return;\n          }\n          this.resetPassword();\n        } else {\n          console.log(\"表单校验不通过\");\n          return false;\n        }\n      });\n    },\n\n    login() {\n      if (this.isPasswordLogin) {\n        // 密码登录\n        request\n          .post(\"/user/loginByPassword\", {\n            email: this.loginForm.email,\n            password: this.loginForm.password,\n          })\n          .then((response) => {\n            const { refreshToken, accessToken } = response.data;\n            // 存储 refreshToken 到 localStorage\n            localStorage.setItem(\"refreshToken\", refreshToken);\n            // 存储 accessToken 到 localStorage\n            localStorage.setItem(\"accessToken\", accessToken);\n            // 存储用户信息到 localStorage\n            localStorage.setItem(\"userEmail\", this.loginForm.email);\n            this.$message.success(\"登录成功\");\n            // 页面跳转\n            this.$router.push(\"/create\");\n          })\n          .catch((error) => {\n            // 处理登录失败逻辑\n            console.log(error);\n            this.$message.error(\"登录失败，请检查邮箱和密码\");\n          });\n      } else {\n        // 验证码登录\n        request\n          .post(\"/user/loginByEmail\", {\n            email: this.loginForm.email,\n            verificationCode: this.loginForm.verificationCode,\n          })\n          .then((response) => {\n            const { refreshToken, accessToken } = response.data;\n            // 存储 refreshToken 到 localStorage\n            localStorage.setItem(\"refreshToken\", refreshToken);\n            // 存储 accessToken 到 localStorage\n            localStorage.setItem(\"accessToken\", accessToken);\n            // 存储用户信息到 localStorage\n            localStorage.setItem(\"userEmail\", this.loginForm.email);\n            this.$message.success(\"登录成功\");\n            // 页面跳转\n            this.$router.push(\"/create\");\n          })\n          .catch((error) => {\n            // 处理登录失败逻辑\n            console.log(error);\n            this.$message.error(\"登录失败，请检查邮箱和验证码\");\n          });\n      }\n    },\n\n    toggleLoginType() {\n      this.isPasswordLogin = !this.isPasswordLogin;\n      // 切换登录方式时重置验证码时间和状态\n      this.sentCodeTime = null;\n      this.isSendingCode = false;\n      this.countdown = 60;\n      this.loginForm.verificationCode = \"\";\n    },\n\n    // 登录验证码\n    sendCode() {\n      if (this.isSendingCode) return;\n      this.isSendingCode = true;\n      request\n        .post(`/user/email?email=${this.loginForm.email}`)\n        .then((response) => {\n          // 处理发送验证码成功逻辑\n          this.$message.success(\"验证码已发送\");\n          this.sentCodeTime = Date.now();\n          let timer = setInterval(() => {\n            if (this.countdown > 0) {\n              this.countdown--;\n            } else {\n              clearInterval(timer);\n              this.isSendingCode = false;\n              this.countdown = 60;\n            }\n          }, 1000);\n        })\n        .catch((error) => {\n          // 处理发送验证码失败逻辑\n          this.$message.error(\"验证码发送失败，请稍后重试\");\n          this.isSendingCode = false;\n          this.countdown = 60;\n        });\n    },\n\n    showForgotPassword() {\n      this.isLoginFormVisible = false;\n      this.isForgotPasswordFormVisible = true;\n    },\n\n    // 忘记密码的验证码\n    sendVerifyCode() {\n      if (this.isSendingVerifyCode) return;\n      this.isSendingVerifyCode = true;\n      request\n        .post(`/user/email?email=${this.forgotPasswordForm.email}`)\n        .then((response) => {\n          // 处理发送验证邮件成功逻辑\n          this.$message.success(\"验证码已发送\");\n          this.verifyCodeTime = Date.now();\n          let timer = setInterval(() => {\n            if (this.countdownVerify > 0) {\n              this.countdownVerify--;\n            } else {\n              clearInterval(timer);\n              this.isSendingVerifyCode = false;\n              this.countdownVerify = 60;\n            }\n          }, 1000);\n        })\n        .catch((error) => {\n          // 处理发送验证邮件失败逻辑\n          this.$message.error(\"验证邮件发送失败，请稍后重试\");\n          this.isSendingVerifyCode = false;\n          this.countdownVerify = 60;\n        });\n    },\n\n    resetPassword() {\n      request\n        .put(\"/user/resetPassword\", this.forgotPasswordForm)\n        .then((response) => {\n          // 处理重置密码成功逻辑\n          this.isForgotPasswordFormVisible = false;\n          this.isLoginFormVisible = true;\n        })\n        .catch((error) => {\n          // 处理重置密码失败逻辑\n          console.log(error);\n        });\n    },\n\n    showLoginForm() {\n      this.isLoginFormVisible = true;\n      this.isForgotPasswordFormVisible = false;\n    },\n  },\n};\n</script>\n\n<style scoped>\nh2 {\n  padding: 0;\n  text-align: center;\n  color: #333;\n}\n\n.login-container {\n  min-height: 100vh;\n  background-color: #f4f4f4;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.login-container > div {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.el-form {\n  width: 50%;\n  background-color: white;\n  padding: 20px;\n  border-radius: 5px;\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);\n}\n\n.el-input {\n  width: calc(100% - 18px);\n  padding: 8px;\n  margin-bottom: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n}\n\n.el-button {\n  margin: 5px;\n  padding: 8px 15px;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.el-button--primary {\n  background-color: #42b983;\n  color: white;\n}\n\n.el-button--primary:hover {\n  background-color: #37a373;\n}\n\n.el-button--default {\n  background-color: #f4f4f4;\n  color: #333;\n}\n\n.el-button--default:hover {\n  background-color: #e9e9e9;\n}\n\n.hint-text {\n  display: block;\n  margin-bottom: 10px;\n  color: #666;\n  font-size: 12px;\n}\n\n.el-form-item__error {\n  color: #f56c6c;\n  font-size: 12px;\n  margin-top: 3px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}