{"ast":null,"code":"import axios from \"axios\";\n\n// 创建一个axios对象出来\nconst request = axios.create({\n  baseURL: \"http://8.138.124.114:9766/sparrow/api\",\n  timeout: 60000\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  config.headers[\"Content-Type\"] = \"application/json;charset=utf-8\";\n  // 从本地存储中获取 accessToken\n  const accessToken = localStorage.getItem(\"accessToken\");\n  if (accessToken) {\n    // 设置请求头\n    config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nlet isRefreshing = false;\nlet requests = [];\nrequest.interceptors.response.use(response => {\n  // response.data即为后端返回的Result\n  let res = response.data;\n  // 兼容服务端返回的字符串数据\n  if (typeof res === \"string\") {\n    res = res ? JSON.parse(res) : res;\n  }\n  return res;\n}, async error => {\n  const {\n    config,\n    response\n  } = error;\n  if (response && response.status === 401) {\n    if (!isRefreshing) {\n      isRefreshing = true;\n      try {\n        // 从本地存储中获取 refreshToken\n        const refreshToken = localStorage.getItem(\"refreshToken\");\n        if (refreshToken) {\n          // 发送刷新 token 的请求\n          const refreshResponse = await axios.post(`${request.defaults.baseURL}/user/refreshToken`, {\n            refreshToken\n          });\n          const {\n            accessToken,\n            newRefreshToken\n          } = refreshResponse.data;\n          // 更新本地存储的 token\n          localStorage.setItem(\"accessToken\", accessToken);\n          if (newRefreshToken) {\n            localStorage.setItem(\"refreshToken\", newRefreshToken);\n          }\n          // 重新发起之前失败的请求\n          requests.forEach(cb => cb(accessToken));\n          requests = [];\n          return request(config);\n        }\n      } catch (refreshError) {\n        // 刷新 token 失败，清除本地存储的 token 并跳转到登录页\n        localStorage.removeItem(\"accessToken\");\n        localStorage.removeItem(\"refreshToken\");\n        // 这里需要根据你的项目实际情况进行跳转登录页的操作\n        // 例如在 Vue 项目中可以使用 this.$router.push('/login')\n        console.log(\"刷新 token 失败，跳转到登录页\");\n        return Promise.reject(refreshError);\n      } finally {\n        isRefreshing = false;\n      }\n    } else {\n      // 正在刷新 token，将请求挂起\n      return new Promise(resolve => {\n        requests.push(accessToken => {\n          config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n          resolve(request(config));\n        });\n      });\n    }\n  }\n  console.log(\"err\" + error); // for debug\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","request","create","baseURL","timeout","interceptors","use","config","headers","accessToken","localStorage","getItem","error","Promise","reject","isRefreshing","requests","response","res","data","JSON","parse","status","refreshToken","refreshResponse","post","defaults","newRefreshToken","setItem","forEach","cb","refreshError","removeItem","console","log","resolve","push"],"sources":["D:/桌面/ShortLink-FrontEnd-dev/ShortLink-FrontEnd-dev/vue/src/utils/request.js"],"sourcesContent":["import axios from \"axios\";\n\n// 创建一个axios对象出来\nconst request = axios.create({\n  baseURL: \"http://8.138.124.114:9766/sparrow/api\",\n  timeout: 60000,\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(\n  (config) => {\n    config.headers[\"Content-Type\"] = \"application/json;charset=utf-8\";\n    // 从本地存储中获取 accessToken\n    const accessToken = localStorage.getItem(\"accessToken\");\n    if (accessToken) {\n      // 设置请求头\n      config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nlet isRefreshing = false;\nlet requests = [];\n\nrequest.interceptors.response.use(\n  (response) => {\n    // response.data即为后端返回的Result\n    let res = response.data;\n    // 兼容服务端返回的字符串数据\n    if (typeof res === \"string\") {\n      res = res ? JSON.parse(res) : res;\n    }\n    return res;\n  },\n  async (error) => {\n    const { config, response } = error;\n    if (response && response.status === 401) {\n      if (!isRefreshing) {\n        isRefreshing = true;\n        try {\n          // 从本地存储中获取 refreshToken\n          const refreshToken = localStorage.getItem(\"refreshToken\");\n          if (refreshToken) {\n            // 发送刷新 token 的请求\n            const refreshResponse = await axios.post(\n              `${request.defaults.baseURL}/user/refreshToken`,\n              {\n                refreshToken,\n              }\n            );\n            const { accessToken, newRefreshToken } = refreshResponse.data;\n            // 更新本地存储的 token\n            localStorage.setItem(\"accessToken\", accessToken);\n            if (newRefreshToken) {\n              localStorage.setItem(\"refreshToken\", newRefreshToken);\n            }\n            // 重新发起之前失败的请求\n            requests.forEach((cb) => cb(accessToken));\n            requests = [];\n            return request(config);\n          }\n        } catch (refreshError) {\n          // 刷新 token 失败，清除本地存储的 token 并跳转到登录页\n          localStorage.removeItem(\"accessToken\");\n          localStorage.removeItem(\"refreshToken\");\n          // 这里需要根据你的项目实际情况进行跳转登录页的操作\n          // 例如在 Vue 项目中可以使用 this.$router.push('/login')\n          console.log(\"刷新 token 失败，跳转到登录页\");\n          return Promise.reject(refreshError);\n        } finally {\n          isRefreshing = false;\n        }\n      } else {\n        // 正在刷新 token，将请求挂起\n        return new Promise((resolve) => {\n          requests.push((accessToken) => {\n            config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n            resolve(request(config));\n          });\n        });\n      }\n    }\n    console.log(\"err\" + error); // for debug\n    return Promise.reject(error);\n  }\n);\n\nexport default request;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}