{"ast":null,"code":"export default {\n  name: 'LinkDetail',\n  props: ['linkId'],\n  data() {\n    // 密码一致性验证\n    const validatePass = (rule, value, callback) => {\n      if (this.currentLink.isPrivate && !value) {\n        callback(new Error('请输入访问密码'));\n      } else if (this.currentLink.confirmPassword !== value) {\n        callback(new Error('两次输入密码不一致'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      currentLink: null,\n      saving: false,\n      rules: {\n        accessLimit: [{\n          type: 'number',\n          min: 0,\n          message: '不能小于0'\n        }],\n        expireTime: [{\n          validator: (rule, value, callback) => {\n            if (value && new Date(value) < new Date()) {\n              callback(new Error('失效时间不能早于当前时间'));\n            } else {\n              callback();\n            }\n          }\n        }],\n        password: [{\n          required: true,\n          validator: validatePass,\n          trigger: 'blur'\n        }, {\n          min: 4,\n          max: 16,\n          message: '长度在4到16个字符'\n        }]\n      }\n    };\n  },\n  created() {\n    this.fetchLinkDetail();\n  },\n  methods: {\n    // 禁用过去日期\n    disabledDate(time) {\n      return time.getTime() < Date.now() - 8.64e7; // 禁用昨天及以前\n    },\n    // 获取详情数据\n    async fetchLinkDetail() {\n      try {\n        // 模拟API调用\n        await new Promise(resolve => setTimeout(resolve, 800));\n        this.currentLink = {\n          id: this.linkId,\n          accessLimit: 100,\n          expireTime: '2024-04-01 23:59:59',\n          isPrivate: false,\n          password: '',\n          confirmPassword: ''\n        };\n      } catch (error) {\n        this.$message.error('获取详情失败');\n      }\n    },\n    // 保存设置\n    async saveSettings() {\n      try {\n        this.saving = true;\n        await this.$refs.detailForm.validate();\n\n        // 模拟API提交\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        this.$message.success('设置保存成功');\n        this.$router.push('/list');\n      } catch (error) {\n        this.$message.warning('请正确填写表单');\n      } finally {\n        this.saving = false;\n      }\n    },\n    // 重置表单\n    resetForm() {\n      this.$refs.detailForm.resetFields();\n      this.fetchLinkDetail();\n    }\n  }\n};","map":{"version":3,"names":["name","props","data","validatePass","rule","value","callback","currentLink","isPrivate","Error","confirmPassword","saving","rules","accessLimit","type","min","message","expireTime","validator","Date","password","required","trigger","max","created","fetchLinkDetail","methods","disabledDate","time","getTime","now","Promise","resolve","setTimeout","id","linkId","error","$message","saveSettings","$refs","detailForm","validate","success","$router","push","warning","resetForm","resetFields"],"sources":["src/views/LinkDetail.vue"],"sourcesContent":["<template>\n  <el-card class=\"detail-container\">\n    <div class=\"header\">\n      <el-page-header\n          title=\"返回列表\"\n          @back=\"$router.go(-1)\"\n          content=\"短链详情\"\n      />\n      <el-tag v-if=\"currentLink\" type=\"info\">ID: {{ currentLink.id }}</el-tag>\n    </div>\n\n    <el-form\n        v-if=\"currentLink\"\n        ref=\"detailForm\"\n        :model=\"currentLink\"\n        :rules=\"rules\"\n        label-width=\"120px\"\n        label-position=\"top\"\n    >\n      <!-- 访问控制 -->\n      <el-form-item label=\"访问次数限制：\" prop=\"accessLimit\">\n        <el-input-number\n            v-model=\"currentLink.accessLimit\"\n            :min=\"0\"\n            :max=\"10000\"\n            controls-position=\"right\"\n            placeholder=\"0表示无限制\"\n        />\n        <span class=\"tip-text\">（0表示不限制访问次数）</span>\n      </el-form-item>\n\n      <!-- 失效时间 -->\n      <el-form-item label=\"失效时间：\" prop=\"expireTime\">\n        <el-date-picker\n            v-model=\"currentLink.expireTime\"\n            type=\"datetime\"\n            value-format=\"yyyy-MM-dd HH:mm:ss\"\n            :default-time=\"['23:59:59']\"\n            :disabled-date=\"disabledDate\"\n            placeholder=\"选择失效时间\"\n        />\n      </el-form-item>\n\n      <!-- 私密性控制 -->\n      <el-form-item label=\"私密性设置：\">\n        <el-switch\n            v-model=\"currentLink.isPrivate\"\n            active-text=\"启用密码保护\"\n            inactive-text=\"公开链接\"\n        />\n      </el-form-item>\n\n      <!-- 密码设置 -->\n      <template v-if=\"currentLink.isPrivate\">\n        <el-form-item\n            label=\"访问密码：\"\n            prop=\"password\"\n            key=\"password\"\n        >\n          <el-input\n              v-model=\"currentLink.password\"\n              type=\"password\"\n              show-password\n              placeholder=\"请输入4-16位密码\"\n          />\n        </el-form-item>\n        <el-form-item\n            label=\"确认密码：\"\n            prop=\"confirmPassword\"\n            key=\"confirmPassword\"\n        >\n          <el-input\n              v-model=\"currentLink.confirmPassword\"\n              type=\"password\"\n              show-password\n              placeholder=\"请再次输入密码\"\n          />\n        </el-form-item>\n      </template>\n\n      <!-- 操作按钮 -->\n      <el-form-item class=\"action-buttons\">\n        <el-button\n            type=\"primary\"\n            :loading=\"saving\"\n            @click=\"saveSettings\"\n        >保存设置</el-button>\n        <el-button @click=\"resetForm\">恢复默认</el-button>\n      </el-form-item>\n    </el-form>\n\n    <!-- 加载状态 -->\n    <el-skeleton v-else :rows=\"6\" animated />\n  </el-card>\n</template>\n\n<script>\nexport default {\n  name: 'LinkDetail',\n  props: ['linkId'],\n  data() {\n    // 密码一致性验证\n    const validatePass = (rule, value, callback) => {\n      if (this.currentLink.isPrivate && !value) {\n        callback(new Error('请输入访问密码'));\n      } else if (this.currentLink.confirmPassword !== value) {\n        callback(new Error('两次输入密码不一致'));\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      currentLink: null,\n      saving: false,\n      rules: {\n        accessLimit: [\n          { type: 'number', min: 0, message: '不能小于0' }\n        ],\n        expireTime: [\n          {\n            validator: (rule, value, callback) => {\n              if (value && new Date(value) < new Date()) {\n                callback(new Error('失效时间不能早于当前时间'));\n              } else {\n                callback();\n              }\n            }\n          }\n        ],\n        password: [\n          { required: true, validator: validatePass, trigger: 'blur' },\n          { min: 4, max: 16, message: '长度在4到16个字符' }\n        ]\n      }\n    }\n  },\n  created() {\n    this.fetchLinkDetail()\n  },\n  methods: {\n    // 禁用过去日期\n    disabledDate(time) {\n      return time.getTime() < Date.now() - 8.64e7 // 禁用昨天及以前\n    },\n\n    // 获取详情数据\n    async fetchLinkDetail() {\n      try {\n        // 模拟API调用\n        await new Promise(resolve => setTimeout(resolve, 800))\n        this.currentLink = {\n          id: this.linkId,\n          accessLimit: 100,\n          expireTime: '2024-04-01 23:59:59',\n          isPrivate: false,\n          password: '',\n          confirmPassword: ''\n        }\n      } catch (error) {\n        this.$message.error('获取详情失败')\n      }\n    },\n\n    // 保存设置\n    async saveSettings() {\n      try {\n        this.saving = true\n        await this.$refs.detailForm.validate()\n\n        // 模拟API提交\n        await new Promise(resolve => setTimeout(resolve, 1000))\n        this.$message.success('设置保存成功')\n        this.$router.push('/list')\n      } catch (error) {\n        this.$message.warning('请正确填写表单')\n      } finally {\n        this.saving = false\n      }\n    },\n\n    // 重置表单\n    resetForm() {\n      this.$refs.detailForm.resetFields()\n      this.fetchLinkDetail()\n    }\n  }\n}\n</script>\n\n<style scoped>\n.detail-container {\n  max-width: 800px;\n  margin: 20px auto;\n  padding: 30px;\n}\n\n.header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 30px;\n}\n\n.action-buttons {\n  margin-top: 40px;\n  text-align: center;\n}\n\n.tip-text {\n  font-size: 12px;\n  color: #909399;\n  margin-left: 10px;\n}\n\n.el-form-item {\n  margin-bottom: 22px;\n}\n\n.el-date-editor,\n.el-input-number {\n  width: 100%;\n}\n</style>"],"mappings":"AAiGA;EACAA,IAAA;EACAC,KAAA;EACAC,KAAA;IACA;IACA,MAAAC,YAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,SAAAC,WAAA,CAAAC,SAAA,KAAAH,KAAA;QACAC,QAAA,KAAAG,KAAA;MACA,gBAAAF,WAAA,CAAAG,eAAA,KAAAL,KAAA;QACAC,QAAA,KAAAG,KAAA;MACA;QACAH,QAAA;MACA;IACA;IAEA;MACAC,WAAA;MACAI,MAAA;MACAC,KAAA;QACAC,WAAA,GACA;UAAAC,IAAA;UAAAC,GAAA;UAAAC,OAAA;QAAA,EACA;QACAC,UAAA,GACA;UACAC,SAAA,EAAAA,CAAAd,IAAA,EAAAC,KAAA,EAAAC,QAAA;YACA,IAAAD,KAAA,QAAAc,IAAA,CAAAd,KAAA,QAAAc,IAAA;cACAb,QAAA,KAAAG,KAAA;YACA;cACAH,QAAA;YACA;UACA;QACA,EACA;QACAc,QAAA,GACA;UAAAC,QAAA;UAAAH,SAAA,EAAAf,YAAA;UAAAmB,OAAA;QAAA,GACA;UAAAP,GAAA;UAAAQ,GAAA;UAAAP,OAAA;QAAA;MAEA;IACA;EACA;EACAQ,QAAA;IACA,KAAAC,eAAA;EACA;EACAC,OAAA;IACA;IACAC,aAAAC,IAAA;MACA,OAAAA,IAAA,CAAAC,OAAA,KAAAV,IAAA,CAAAW,GAAA;IACA;IAEA;IACA,MAAAL,gBAAA;MACA;QACA;QACA,UAAAM,OAAA,CAAAC,OAAA,IAAAC,UAAA,CAAAD,OAAA;QACA,KAAAzB,WAAA;UACA2B,EAAA,OAAAC,MAAA;UACAtB,WAAA;UACAI,UAAA;UACAT,SAAA;UACAY,QAAA;UACAV,eAAA;QACA;MACA,SAAA0B,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA;IACA;IAEA;IACA,MAAAE,aAAA;MACA;QACA,KAAA3B,MAAA;QACA,WAAA4B,KAAA,CAAAC,UAAA,CAAAC,QAAA;;QAEA;QACA,UAAAV,OAAA,CAAAC,OAAA,IAAAC,UAAA,CAAAD,OAAA;QACA,KAAAK,QAAA,CAAAK,OAAA;QACA,KAAAC,OAAA,CAAAC,IAAA;MACA,SAAAR,KAAA;QACA,KAAAC,QAAA,CAAAQ,OAAA;MACA;QACA,KAAAlC,MAAA;MACA;IACA;IAEA;IACAmC,UAAA;MACA,KAAAP,KAAA,CAAAC,UAAA,CAAAO,WAAA;MACA,KAAAtB,eAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}