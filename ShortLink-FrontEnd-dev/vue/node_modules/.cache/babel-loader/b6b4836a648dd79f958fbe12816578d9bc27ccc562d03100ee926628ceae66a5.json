{"ast":null,"code":"import { MessageBox } from \"element-ui\";\nimport defaultAvatar from \"@/assets/logo.png\"; // 引入默认头像，需确保路径正确\nimport request from \"../utils/request\";\nexport default {\n  data() {\n    return {\n      isChangingPassword: false,\n      userInfo: {\n        email: \"\",\n        nickname: \"\",\n        avatar: \"\",\n        profile: \"\",\n        oldPassword: \"\",\n        newPassword: \"\"\n      },\n      defaultAvatar // 存储默认头像路径\n    };\n  },\n  created() {\n    this.fetchUserInformation();\n  },\n  methods: {\n    fetchUserInformation() {\n      // 从本地存储获取参数\n      const email = localStorage.getItem(\"userEmail\");\n      if (!email) {\n        this.$message.error(\"未找到用户邮箱信息，请重新登录！\");\n        // 注销成功，清除token和用户信息\n        localStorage.removeItem(\"accessToken\");\n        localStorage.removeItem(\"refreshToken\");\n        localStorage.removeItem(\"userEmail\");\n        // 跳转到登录页面\n        this.$router.push(\"/login\");\n        return;\n      }\n      request.get(`/user/information`).then(response => {\n        if (response.code === 200) {\n          const {\n            name,\n            avatar,\n            profile,\n            email\n          } = response.data;\n          this.userInfo = {\n            ...this.userInfo,\n            nickname: name,\n            avatar,\n            profile,\n            email\n          };\n        } else {\n          console.error(response.msg);\n        }\n      }).catch(error => {\n        console.error(\"获取用户信息失败\", error);\n        this.$message.error(\"获取用户信息失败\");\n      });\n    },\n    saveNickname() {\n      request.put(`/user/name?name=${this.userInfo.nickname}`).then(response => {\n        // 处理修改昵称成功逻辑\n        console.log(\"昵称修改成功\");\n        this.$message.success(\"昵称修改成功\");\n      }).catch(error => {\n        // 处理修改昵称失败逻辑\n        console.log(error);\n        this.$message.error(\"昵称修改失败\");\n      });\n    },\n    saveProfile() {\n      request.put(`/user/profile?profile=${this.userInfo.profile}`).then(response => {\n        // 处理修改个人简介成功逻辑\n        console.log(\"个人简介修改成功\");\n        this.$message.success(\"个人简介修改成功\");\n      }).catch(error => {\n        // 处理修改个人简介失败逻辑\n        console.log(error);\n        this.$message.error(\"个人简介修改失败\");\n      });\n    },\n    savePassword() {\n      request.put(\"/user/change/password\", {\n        prePassword: String(this.userInfo.oldPassword),\n        newPassword: String(this.userInfo.newPassword)\n      }).then(response => {\n        // 处理修改密码成功逻辑\n        this.isChangingPassword = false;\n        console.log(\"密码修改成功\");\n        this.$message.success(\"密码修改成功\");\n      }).catch(error => {\n        // 处理修改密码失败逻辑\n        console.log(error);\n        this.$message.error(\"密码修改失败\");\n      });\n    },\n    toggleChangePassword() {\n      this.isChangingPassword = !this.isChangingPassword;\n    },\n    // 触发文件上传选择框\n    triggerAvatarUpload() {\n      document.getElementById(\"avatarInput\").click();\n    },\n    // 处理头像上传\n    handleAvatarUpload(event) {\n      const file = event.target.files[0];\n      if (file) {\n        const formData = new FormData();\n        formData.append(\"avatar\", file);\n        request.post(\"/user/uploadAvatar\", formData).then(response => {\n          // 更新用户头像信息\n          this.userInfo.avatar = response.data.avatarUrl;\n          console.log(\"头像上传成功\");\n          this.$message.success(\"头像上传成功\");\n        }).catch(error => {\n          console.log(error);\n          this.$message.error(\"头像上传失败\");\n        });\n      }\n    },\n    // 显示注销确认弹窗\n    showLogoutConfirm() {\n      MessageBox.confirm(\"确定要注销账号吗？\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(() => {\n        request.post(\"/user/logout\").then(response => {\n          // 注销成功，清除token和用户信息\n          localStorage.removeItem(\"accessToken\");\n          localStorage.removeItem(\"refreshToken\");\n          localStorage.removeItem(\"userEmail\");\n          // 跳转到登录页面\n          this.$router.push(\"/login\");\n        }).catch(error => {\n          // 处理注销失败逻辑\n          console.log(error);\n          this.$message.error(\"注销失败\");\n        });\n      }).catch(() => {\n        // 用户取消操作\n      });\n    }\n  }\n};","map":{"version":3,"names":["MessageBox","defaultAvatar","request","data","isChangingPassword","userInfo","email","nickname","avatar","profile","oldPassword","newPassword","created","fetchUserInformation","methods","localStorage","getItem","$message","error","removeItem","$router","push","get","then","response","code","name","console","msg","catch","saveNickname","put","log","success","saveProfile","savePassword","prePassword","String","toggleChangePassword","triggerAvatarUpload","document","getElementById","click","handleAvatarUpload","event","file","target","files","formData","FormData","append","post","avatarUrl","showLogoutConfirm","confirm","confirmButtonText","cancelButtonText","type"],"sources":["src/views/User.vue"],"sourcesContent":["<template>\n  <div>\n    <el-form\n      :model=\"userInfo\"\n      ref=\"userInfoFormRef\"\n      label-width=\"80px\"\n      class=\"create-form\"\n    >\n      <h2 class=\"form-title\">用户信息</h2>\n      <!-- 邮箱信息，从接口获取并展示，不使用input框 -->\n      <el-form-item label=\"邮箱\">\n        <span class=\"email-display\">{{ userInfo.email }}</span>\n      </el-form-item>\n      <el-form-item label=\"头像\">\n        <div class=\"avatar-container\">\n          <!-- 展示头像 -->\n          <img\n            :src=\"userInfo.avatar || defaultAvatar\"\n            alt=\"Avatar\"\n            class=\"avatar\"\n          />\n          <!-- 隐藏的文件上传 input -->\n          <input\n            type=\"file\"\n            accept=\"image/*\"\n            @change=\"handleAvatarUpload\"\n            style=\"display: none\"\n            id=\"avatarInput\"\n          />\n          <el-button @click=\"triggerAvatarUpload\">上传头像</el-button>\n        </div>\n      </el-form-item>\n      <el-form-item label=\"昵称\">\n        <div class=\"input-button-group\">\n          <el-input v-model=\"userInfo.nickname\"></el-input>\n          <el-button @click=\"saveNickname\">保存昵称</el-button>\n        </div>\n      </el-form-item>\n\n      <el-form-item label=\"个人简介\">\n        <div class=\"input-button-group\">\n          <el-input v-model=\"userInfo.profile\" type=\"textarea\"></el-input>\n          <el-button @click=\"saveProfile\">保存简介</el-button>\n        </div>\n      </el-form-item>\n      <el-form-item label=\"旧密码\" v-if=\"isChangingPassword\">\n        <el-input v-model=\"userInfo.oldPassword\" type=\"password\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"新密码\" v-if=\"isChangingPassword\">\n        <el-input v-model=\"userInfo.newPassword\" type=\"password\"></el-input>\n      </el-form-item>\n      <el-form-item>\n        <el-button\n          type=\"primary\"\n          @click=\"savePassword\"\n          v-if=\"isChangingPassword\"\n          >保存密码</el-button\n        >\n        <el-button @click=\"toggleChangePassword\">\n          {{ isChangingPassword ? \"取消修改密码\" : \"修改密码\" }}\n        </el-button>\n        <el-button @click=\"showLogoutConfirm\">注销</el-button>\n      </el-form-item>\n    </el-form>\n  </div>\n</template>\n\n<script>\nimport { MessageBox } from \"element-ui\";\nimport defaultAvatar from \"@/assets/logo.png\"; // 引入默认头像，需确保路径正确\nimport request from \"../utils/request\";\n\nexport default {\n  data() {\n    return {\n      isChangingPassword: false,\n      userInfo: {\n        email: \"\",\n        nickname: \"\",\n        avatar: \"\",\n        profile: \"\",\n        oldPassword: \"\",\n        newPassword: \"\",\n      },\n      defaultAvatar, // 存储默认头像路径\n    };\n  },\n  created() {\n    this.fetchUserInformation();\n  },\n  methods: {\n    fetchUserInformation() {\n      // 从本地存储获取参数\n      const email = localStorage.getItem(\"userEmail\");\n      if (!email) {\n        this.$message.error(\"未找到用户邮箱信息，请重新登录！\");\n        // 注销成功，清除token和用户信息\n        localStorage.removeItem(\"accessToken\");\n        localStorage.removeItem(\"refreshToken\");\n        localStorage.removeItem(\"userEmail\");\n        // 跳转到登录页面\n        this.$router.push(\"/login\");\n        return;\n      }\n\n      request\n        .get(`/user/information`)\n        .then((response) => {\n          if (response.code === 200) {\n            const { name, avatar, profile, email } = response.data;\n            this.userInfo = {\n              ...this.userInfo,\n              nickname: name,\n              avatar,\n              profile,\n              email,\n            };\n          } else {\n            console.error(response.msg);\n          }\n        })\n        .catch((error) => {\n          console.error(\"获取用户信息失败\", error);\n          this.$message.error(\"获取用户信息失败\");\n        });\n    },\n    saveNickname() {\n      request\n        .put(`/user/name?name=${this.userInfo.nickname}`)\n        .then((response) => {\n          // 处理修改昵称成功逻辑\n          console.log(\"昵称修改成功\");\n          this.$message.success(\"昵称修改成功\");\n        })\n        .catch((error) => {\n          // 处理修改昵称失败逻辑\n          console.log(error);\n          this.$message.error(\"昵称修改失败\");\n        });\n    },\n    saveProfile() {\n      request\n        .put(`/user/profile?profile=${this.userInfo.profile}`)\n        .then((response) => {\n          // 处理修改个人简介成功逻辑\n          console.log(\"个人简介修改成功\");\n          this.$message.success(\"个人简介修改成功\");\n        })\n        .catch((error) => {\n          // 处理修改个人简介失败逻辑\n          console.log(error);\n          this.$message.error(\"个人简介修改失败\");\n        });\n    },\n    savePassword() {\n      request\n        .put(\"/user/change/password\", {\n          prePassword: String(this.userInfo.oldPassword),\n          newPassword: String(this.userInfo.newPassword),\n        })\n        .then((response) => {\n          // 处理修改密码成功逻辑\n          this.isChangingPassword = false;\n          console.log(\"密码修改成功\");\n          this.$message.success(\"密码修改成功\");\n        })\n        .catch((error) => {\n          // 处理修改密码失败逻辑\n          console.log(error);\n          this.$message.error(\"密码修改失败\");\n        });\n    },\n    toggleChangePassword() {\n      this.isChangingPassword = !this.isChangingPassword;\n    },\n    // 触发文件上传选择框\n    triggerAvatarUpload() {\n      document.getElementById(\"avatarInput\").click();\n    },\n    // 处理头像上传\n    handleAvatarUpload(event) {\n      const file = event.target.files[0];\n      if (file) {\n        const formData = new FormData();\n        formData.append(\"avatar\", file);\n        request\n          .post(\"/user/uploadAvatar\", formData)\n          .then((response) => {\n            // 更新用户头像信息\n            this.userInfo.avatar = response.data.avatarUrl;\n            console.log(\"头像上传成功\");\n            this.$message.success(\"头像上传成功\");\n          })\n          .catch((error) => {\n            console.log(error);\n            this.$message.error(\"头像上传失败\");\n          });\n      }\n    },\n    // 显示注销确认弹窗\n    showLogoutConfirm() {\n      MessageBox.confirm(\"确定要注销账号吗？\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\",\n      })\n        .then(() => {\n          request\n            .post(\"/user/logout\")\n            .then((response) => {\n              // 注销成功，清除token和用户信息\n              localStorage.removeItem(\"accessToken\");\n              localStorage.removeItem(\"refreshToken\");\n              localStorage.removeItem(\"userEmail\");\n              // 跳转到登录页面\n              this.$router.push(\"/login\");\n            })\n            .catch((error) => {\n              // 处理注销失败逻辑\n              console.log(error);\n              this.$message.error(\"注销失败\");\n            });\n        })\n        .catch(() => {\n          // 用户取消操作\n        });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.avatar-container {\n  display: flex;\n  align-items: center;\n}\n\n.avatar {\n  width: 80px;\n  height: 80px;\n  border-radius: 50%;\n  margin-right: 10px;\n  object-fit: cover;\n  border: 1px solid #409eff;\n}\n\n.create-form {\n  max-width: 800px;\n  margin: 20px auto;\n  padding: 30px;\n  background: #fff;\n  border-radius: 8px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\n}\n\n.form-title {\n  text-align: center;\n  color: #409eff;\n  margin-bottom: 30px;\n}\n\n.input-button-group {\n  display: flex;\n  gap: 5px;\n  align-items: center;\n}\n\n.input-button-group.el-input {\n  flex: 1;\n  margin-right: 10px;\n}\n\n.email-display {\n  display: inline-block;\n  text-align: left;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}